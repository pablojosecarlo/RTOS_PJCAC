
examples/c/app/out/app.elf:     file format elf32-littlearm
examples/c/app/out/app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000edd

Program Header:
0x70000001 off    0x0001566c vaddr 0x1a00566c paddr 0x1a00566c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002d60 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005674 memsz 0x00005674 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005674 align 2**16
         filesz 0x000000bc memsz 0x000000bc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005668  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  10000000  1a005674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200bc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200bc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200bc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200bc  2**2
                  CONTENTS
  6 .bss          00002ca0  100000c0  100000c0  000000c0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200bc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200bc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200bc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200bc  2**2
                  CONTENTS
 11 .init_array   00000004  1a005668  1a005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00566c  1a00566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200bc  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200bc  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200bc  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200bc  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200bc  2**2
                  CONTENTS
 18 .noinit       00000000  10002d60  10002d60  000200bc  2**2
                  CONTENTS
 19 .debug_info   0002cb77  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005cc2  00000000  00000000  0004cc33  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000bc6e  00000000  00000000  000528f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000010e8  00000000  00000000  0005e563  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000011e8  00000000  00000000  0005f64b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000114c7  00000000  00000000  00060833  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001576c  00000000  00000000  00071cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00030c77  00000000  00000000  00087466  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000b80dd  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000b815c  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002f68  00000000  00000000  000b8194  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000c0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005668 l    d  .init_array	00000000 .init_array
1a00566c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002d60 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003f5c l     F .text	000000a4 uartProcessIRQ
10002b54 l     O .bss	00000004 rxIsrCallbackUART0
10002b58 l     O .bss	00000004 rxIsrCallbackUART2
10002b5c l     O .bss	00000004 rxIsrCallbackUART3
10002b60 l     O .bss	00000004 txIsrCallbackUART0
10002b64 l     O .bss	00000004 txIsrCallbackUART2
10002b68 l     O .bss	00000004 txIsrCallbackUART3
1a005478 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 RTOS_PJCAC.c
00000000 l    df *ABS*	00000000 sapi_interrupt.c
1a000884 l     F .text	00000010 interruptInitState
00000000 l    df *ABS*	00000000 LCD_I2C_16F819.c
00000000 l    df *ABS*	00000000 system.c
10000118 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_1.c
10000120 l     O .bss	00002000 ucHeap
1000011c l     O .bss	00000004 pucAlignedHeap.11438
10002120 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a0010b6 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a0010c8 l     F .text	0000001e prvIsQueueFull
1a0010e6 l     F .text	0000001a prvIsQueueEmpty
1a001100 l     F .text	00000076 prvCopyDataToQueue
1a001176 l     F .text	00000024 prvCopyDataFromQueue
1a00119a l     F .text	0000006e prvUnlockQueue
1a00128c l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002124 l     O .bss	00000168 uxIdleTaskStack.10728
1000228c l     O .bss	000005a0 uxTimerTaskStack.10735
1000282c l     O .bss	00000060 xIdleTaskTCB.10727
1000288c l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001a08 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001a34 l     F .text	00000092 prvInitialiseNewTask
1a001ac8 l     F .text	00000068 prvInitialiseTaskLists
1a001b30 l     F .text	000000ac prvAddNewTaskToReadyList
1a001bdc l     F .text	00000038 prvDeleteTCB
1a001c14 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001c60 l     F .text	00000028 prvIdleTask
1a001c88 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100028f0 l     O .bss	00000004 pxDelayedTaskList
100028f4 l     O .bss	00000004 pxOverflowDelayedTaskList
100028f8 l     O .bss	0000008c pxReadyTasksLists
10002984 l     O .bss	00000004 uxCurrentNumberOfTasks
10002988 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
1000298c l     O .bss	00000004 uxPendedTicks
10002990 l     O .bss	00000004 uxSchedulerSuspended
10002994 l     O .bss	00000004 uxTaskNumber
10002998 l     O .bss	00000004 uxTopReadyPriority
1000299c l     O .bss	00000014 xDelayedTaskList1
100029b0 l     O .bss	00000014 xDelayedTaskList2
100029c4 l     O .bss	00000004 xNextTaskUnblockTime
100029c8 l     O .bss	00000004 xNumOfOverflows
100029cc l     O .bss	00000014 xPendingReadyList
100029e0 l     O .bss	00000004 xSchedulerRunning
100029e4 l     O .bss	00000014 xSuspendedTaskList
100029f8 l     O .bss	00000014 xTasksWaitingTermination
10002a0c l     O .bss	00000004 xTickCount
10002a10 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0026b0 l     F .text	00000020 prvGetNextExpireTime
1a0026d0 l     F .text	00000048 prvInsertTimerInActiveList
1a002718 l     F .text	00000070 prvCheckForValidListAndQueue
1a002788 l     F .text	00000040 prvInitialiseNewTimer
1a002b58 l     F .text	00000016 prvTimerTask
1a0028e4 l     F .text	00000078 prvSwitchTimerLists
1a00295c l     F .text	0000002c prvSampleTimeNow
1a002988 l     F .text	00000060 prvProcessExpiredTimer
1a0029e8 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002a5c l     F .text	000000fc prvProcessReceivedCommands
10002a14 l     O .bss	00000004 pxCurrentTimerList
10002a18 l     O .bss	00000004 pxOverflowTimerList
10002a1c l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002abc l     O .bss	00000014 xActiveTimerList1
10002ad0 l     O .bss	00000014 xActiveTimerList2
10002ae4 l     O .bss	00000004 xLastTime.11777
10002ae8 l     O .bss	00000050 xStaticTimerQueue.11827
10002b38 l     O .bss	00000004 xTimerQueue
10002b3c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002b70 l     F .text	00000040 prvTaskExitError
1a002bb0 l     F .text	00000022 prvPortStartFirstTask
1a002bd8 l     F .text	0000000e vPortEnableVFP
1a002c40 l       .text	00000000 pxCurrentTCBConst2
1a002d20 l       .text	00000000 pxCurrentTCBConst
10002b40 l     O .bss	00000001 ucMaxSysCallPriority
10002b44 l     O .bss	00000004 ulMaxPRIGROUPValue
10000018 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002f14 l     F .text	00000044 Board_LED_Init
1a002f58 l     F .text	00000040 Board_TEC_Init
1a002f98 l     F .text	00000040 Board_GPIO_Init
1a002fd8 l     F .text	00000030 Board_ADC_Init
1a003008 l     F .text	00000038 Board_SPI_Init
1a003040 l     F .text	00000024 Board_I2C_Init
1a005304 l     O .text	00000008 GpioButtons
1a00530c l     O .text	0000000c GpioLeds
1a005318 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005330 l     O .text	00000004 InitClkStates
1a005334 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0031b0 l     F .text	0000002c Chip_UART_GetIndex
1a0053a8 l     O .text	00000008 UART_BClock
1a0053b0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003318 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00332c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0033f4 l     F .text	000000a4 pll_calc_divs
1a003498 l     F .text	0000010c pll_get_frac
1a0035a4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003818 l     F .text	00000022 Chip_Clock_GetDivRate
10002b4c l     O .bss	00000008 audio_usb_pll_freq
1a0053c4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005430 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003c08 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003c1c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000001c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000054 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10002b6c l     O .bss	00000004 callBackFuncParams
10002b70 l     O .bss	00000008 tickCounter
10002b78 l     O .bss	00000004 tickHookFunction
10002b7c l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a004094 l     F .text	00000030 i2cHardwareInit
1a0040c4 l     F .text	0000003c i2cHardwareRead
1a004100 l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00418c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002bac l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_magnetometer_hmc5883l.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004b08 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
1000005c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a00566c l       .init_array	00000000 __init_array_end
1a005668 l       .bss_RAM5	00000000 __preinit_array_end
1a005668 l       .init_array	00000000 __init_array_start
1a005668 l       .bss_RAM5	00000000 __preinit_array_start
1a004510 g     F .text	00000004 hmc5883lIsAlive
1a00363c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000f7c g     F .text	00000012 _isatty_r
1a003bd4 g     F .text	0000000e Chip_I2CM_Xfer
1a004e5c g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00413c g     F .text	0000000e i2cInit
1a000f8e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
10002d0c g     O .bss	00000009 TxtBLE
100000d1 g     O .bss	00000001 int2_UP
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002c88 g     F .text	0000002c vPortExitCritical
10002bb8 g     O .bss	00000050 myIntrr2
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0030f6 g     F .text	00000008 __stdio_init
1a004f7e g     F .text	00000024 __sseek
1a004b88 g     F .text	00000060 __sinit
1a004fac g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a0018f0 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003cdc g     F .text	00000120 handleMasterXferState
1a004b5c g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0033d2 g     F .text	0000000c Chip_ADC_SetResolution
1a0051f6 g     F .text	00000002 __malloc_unlock
100000ec g     O .bss	00000004 myTaskMagnetometroLecturaHandle
1a000378 g     F .text	00000040 myTaskInterrupt
1a002d24 g     F .text	0000002c SysTick_Handler
1a000ed8  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00309c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002cc0 g     F .text	00000064 PendSV_Handler
1a001508 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005674 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0008b2 g     F .text	00000056 interruptInit
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
100000f4 g     O .bss	00000004 myTaskTareasLcdHandle
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a00414a g     F .text	00000028 i2cRead
100028ec g     O .bss	00000004 pxCurrentTCB
1a000f72 g     F .text	0000000a _fstat_r
53ff69b2 g       *ABS*	00000000 __valid_user_code_checksum
1a005674 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a000a94 g     F .text	00000024 LCD_I2C_CLEAR
1a0023a8 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0004bc g     F .text	000000b8 myTaskMostrarValoresLcd
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
100000cc g     O .bss	00000004 int0Up
1a0038ba g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002d88 g     F .text	00000110 xPortStartScheduler
1a004ce4 g     F .text	00000016 memcpy
1a0022b4 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
100000d0 g     O .bss	00000001 int1_UP
1a000908 g     F .text	00000152 interruptFsmUpdate
1a004b50 g     F .text	0000000c _cleanup_r
100000c8 g     O .bss	00000004 int0Down
1a002d50  w    F .text	00000038 vPortSetupTimerInterrupt
1a003e88 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a0046a8 g     F .text	00000000 .hidden __aeabi_uldivmod
10002d60 g       .noinit	00000000 _noinit
1a004f14 g     F .text	00000010 puts
1a0010a0 g     F .text	00000016 vPortFree
10002d58 g     O .bss	00000004 SystemCoreClock
10002c08 g     O .bss	00000050 myIntrr3
10002c58 g     O .bss	00000002 hmc5883l_y_raw
1a0031dc g     F .text	00000054 Chip_UART_Init
1a00172c g     F .text	0000019c xQueueSemaphoreTake
1a004014 g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002e98 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003938 g     F .text	0000004c Chip_Clock_GetRate
100000e8 g     O .bss	00000004 myTaskInterruptHandle
1a00195e g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a003138 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003e58 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a0046d8 g     F .text	000002cc .hidden __udivmoddi4
1a001010 g     F .text	00000020 _sbrk_r
1a005300 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
100000e0 g     O .bss	00000004 myTaskEncoderPosicionHandle
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000f98 g     F .text	0000004e _read_r
1a001958 g     F .text	00000006 vListInitialiseItem
10000004 g     O .data	00000004 int1Up
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0015d4 g     F .text	00000158 xQueueReceive
10000000 g     O .data	00000004 int1Down
10002d18 g     O .bss	00000040 xQueueRegistry
1a0019ec g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a00566c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a005664 g     O .text	00000004 _global_impure_ptr
10000100 g     O .bss	00000016 stringLcd
1a004c9c g     F .text	00000048 __libc_init_array
1a000da4 g     F .text	00000134 FLOAT_A_LCD
100000d2 g     O .bss	00000001 int_magnetometro
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001030 g     F .text	00000070 pvPortMalloc
1a000300 g     F .text	00000078 myTaskTareasLcd
1a0030b8 g     F .text	0000002c Board_Init
1a000f66  w    F .text	00000002 _init
1a001942 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001e9c g     F .text	0000000c xTaskGetTickCount
1a00138c g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002d60 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000edc g     F .text	00000088 Reset_Handler
1a004048 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003be2 g     F .text	00000024 Chip_I2CM_XferBlocking
1a003e20 g     F .text	00000038 Chip_I2C_SetClockRate
1a002524 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000b58 g     F .text	00000218 BIN16_A_DIGITAL5
1a0035f0 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00231c g     F .text	0000008c xTaskRemoveFromEventList
1a001a06 g     F .text	00000002 vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a005604 g     O .text	00000020 __sf_fake_stderr
1a003dfc g     F .text	00000024 Chip_I2C_Init
1a004000 g     F .text	0000000a UART2_IRQHandler
1a0037ac g     F .text	0000006c Chip_Clock_GetMainPLLHz
10002c5a g     O .bss	00000002 hmc5883l_z_raw
1a000a5a g     F .text	0000003a i2cWrite2
1a0054cc g     O .text	00000136 gpioPinsInit
100000c2 g     O .bss	00000002 encoder_contador_previo
1a002694 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003c34 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0023c0 g     F .text	00000080 xTaskCheckForTimeOut
1a004d0c g     F .text	0000009c _free_r
1a003894 g     F .text	00000026 Chip_Clock_GetBaseClock
1a00246c g     F .text	000000b8 xTaskPriorityInherit
1a004514 g     F .text	00000014 hmc5883lPrepareDefaultInit
1a0005b0 g     F .text	00000054 myTaskIniciarLcd
100000c0 g       .bss	00000000 _bss
1a0033a0 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000ae0 g     F .text	00000024 LCD_I2C_SETUP
10002b48 g     O .bss	00000004 freeRtosInterruptCallback
1a001e8c g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003c46 g     F .text	0000003e Chip_SSP_SetBitRate
1a0019aa g     F .text	00000028 uxListRemove
1a000b04 g     F .text	00000054 LCD_I2C_WRITE_DATA_1234_STRING
1a003c06 g     F .text	00000002 Chip_GPIO_Init
1a00532c g     O .text	00000004 OscRateIn
1a001d20 g     F .text	00000072 xTaskCreateStatic
10002d60 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
100000d8 g     O .bss	00000004 mySemaphoreEncoderChangeHandle
1a002100 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0012ae g     F .text	00000090 xQueueGenericCreateStatic
1a0022e4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
10002c5c g     O .bss	00000001 bIniciando_WBM
1a000f68 g     F .text	0000000a _close_r
1a0041c0 g     F .text	00000194 gpioInit
10002c5e g     O .bss	00000002 hmc5883l_x_raw
1a000876 g     F .text	0000000e interruptIsDown
1a0019d4 g     F .text	00000018 vApplicationGetIdleTaskMemory
100000f8 g     O .bss	00000005 NUM
1a002878 g     F .text	0000006c xTimerGenericCommand
1a005050 g     F .text	000000dc __swsetup_r
1a001a04 g     F .text	00000002 vApplicationStackOverflowHook
1a0049a4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00085c g     F .text	0000001a interruptIsUp
1a0021c8 g     F .text	000000ec vTaskSuspend
1a004be8 g     F .text	00000078 __sfp
1a000894 g     F .text	0000001e interruptFsmInit
1a004f24 g     F .text	00000022 __sread
1a004400 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a000d70 g     F .text	00000034 FLOAT_A_DIGITAL5
1a0051f4 g     F .text	00000002 __malloc_lock
1a003088 g     F .text	00000014 Board_UARTPutChar
1a003eb8 g     F .text	00000018 Chip_I2C_IsStateChanged
1a004528 g     F .text	00000088 hmc5883lInit
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a004ab4 g     F .text	00000054 _fflush_r
1a000ab8 g     F .text	00000028 LCD_I2C_SET_ADDRESS_1234
1a005624 g     O .text	00000020 __sf_fake_stdin
1a003658 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004cfa g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000604 g     F .text	00000258 main
100000dc g     O .bss	00000004 mySemaphoreMagnetometroChangeHandle
100000d4 g     O .bss	00000004 myQueueLcdCommandHandle
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001976 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002c20 g     F .text	00000024 SVC_Handler
1a004fa2 g     F .text	00000008 __sclose
1a0027c8 g     F .text	00000064 xTimerCreateTimerTask
1a004da8 g     F .text	000000b4 _malloc_r
10002c60 g     O .bss	00000050 myIntrr1
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0038c8 g     F .text	0000003c Chip_Clock_EnableOpts
1a0030ee g     F .text	00000008 __stdio_getchar
100000c4 g     O .bss	00000004 encoder_posicion
10000010 g     O .data	00000004 int3Down
1a00133e g     F .text	0000004e xQueueGenericCreate
1a003674 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00372c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0003b8 g     F .text	00000058 myTaskEncoderPosicion
1a003f08 g     F .text	00000038 SystemInit
1000000c g     O .data	00000004 int2Up
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
10000014 g     O .data	00000004 int3Up
1a004354 g     F .text	00000056 gpioWrite
10002cb0 g     O .bss	00000050 myIntrr0
1a000f64  w    F .text	00000002 _fini
1a001fc0 g     F .text	000000f4 xTaskResumeAll
1a001df8 g     F .text	00000094 vTaskStartScheduler
1a003360 g     F .text	00000040 Chip_ADC_Init
10002d5c g     O .bss	00000004 g_pUsbApi
1a003100 g     F .text	00000038 Board_SetupMuxing
1a003230 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000fe6 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a000474 g     F .text	00000048 myTaskMagnetometroLectura
10000058 g     O .data	00000004 _impure_ptr
1a0049a8 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a003ad8 g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a002440 g     F .text	0000000c vTaskMissedYield
10002d60 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003c84 g     F .text	00000038 Chip_SSP_Init
1a003ed0 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0018c8 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
10002d00 g     O .bss	00000001 bParadaDeEmergencia
1a001ea8 g     F .text	00000118 xTaskIncrementTick
1a00512c g     F .text	00000048 __swhatbuf_r
1a002ef4 g     F .text	00000020 DAC_IRQHandler
1a004172 g     F .text	00000018 i2cWrite
1a003064 g     F .text	00000024 Board_Debug_Init
1a000574 g     F .text	0000003c myIntrrDownCallback
1a0030e4 g     F .text	0000000a __stdio_putchar
1a001208 g     F .text	00000084 xQueueGenericReset
100000e4 g     O .bss	00000004 myTaskIniciarLcdHandle
100000bc g       .data	00000000 _edata
1a003cbc g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001d92 g     F .text	00000066 xTaskCreate
1a003984 g     F .text	00000154 Chip_SetupCoreClock
1a004f46 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
10000008 g     O .data	00000004 int2Down
1a004c60 g     F .text	0000003c _fwalk_reent
1a0033e0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0020b4 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005644 g     O .text	00000020 __sf_fake_stdout
1a00244c g     F .text	00000020 xTaskGetSchedulerState
1a0025d4 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a0049a4  w    F .text	00000002 .hidden __aeabi_idiv0
10002d04 g     O .bss	00000005 hmc5883L_configValue
1a00017e  w    F .text	00000002 BusFault_Handler
1a005174 g     F .text	00000080 __smakebuf_r
1a002bec g     F .text	0000002c pxPortInitialiseStack
1a003904 g     F .text	00000034 Chip_Clock_Enable
1a00400a g     F .text	0000000a UART3_IRQHandler
10002bb4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a00282c g     F .text	0000004c xTimerCreateStatic
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0043aa g     F .text	00000054 gpioRead
1a00441c g     F .text	000000f4 boardInit
1a002c44 g     F .text	00000044 vPortEnterCritical
10002bb0 g     O .bss	00000004 __malloc_free_list
1a000410 g     F .text	00000064 myIntrrUpCallback
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
100000c0 g     O .bss	00000002 encoder_contador
1a00383c g     F .text	00000058 Chip_Clock_SetBaseClock
1a003f40 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100000f0 g     O .bss	00000004 myTaskMostrarValoresLcdHandle
1a0045b0 g     F .text	000000f6 hmc5883lRead
1a0031a4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 dd 0e 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a b2 69 ff 53     }............i.S
	...
1a00002c:	21 2c 00 1a 85 01 00 1a 00 00 00 00 c1 2c 00 1a     !,...........,..
1a00003c:	25 2d 00 1a                                         %-..

1a000040 <g_pfnVendorVectors>:
1a000040:	f5 2e 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	01 44 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .D..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 01 40 00 1a 0b 40 00 1a     .........@...@..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005674 	.word	0x1a005674
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000bc 	.word	0x000000bc
1a000120:	1a005674 	.word	0x1a005674
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005674 	.word	0x1a005674
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005674 	.word	0x1a005674
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005674 	.word	0x1a005674
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000c0 	.word	0x100000c0
1a000154:	00002ca0 	.word	0x00002ca0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 fecc 	bl	1a003f5c <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <myTaskTareasLcd>:
TaskHandle_t myTaskMostrarValoresLcdHandle = NULL;
TaskHandle_t myTaskIniciarLcdHandle = NULL;


// Tareas de escritura y comando del LCD
void myTaskTareasLcd(void *p){
1a000300:	b510      	push	{r4, lr}
1a000302:	b0b2      	sub	sp, #200	; 0xc8
1a000304:	e010      	b.n	1a000328 <myTaskTareasLcd+0x28>
				//printf( "Comandos Recibidos: %s\n", myRxBuffer );

			}else{

				for (uint8_t i = 2; i < 22; i++ ){
					i2cWrite2(myRxBuffer[0], myRxBuffer[1], myRxBuffer[i]);
1a000306:	ab32      	add	r3, sp, #200	; 0xc8
1a000308:	4423      	add	r3, r4
1a00030a:	f813 2cc8 	ldrb.w	r2, [r3, #-200]
1a00030e:	f89d 1001 	ldrb.w	r1, [sp, #1]
1a000312:	f89d 0000 	ldrb.w	r0, [sp]
1a000316:	f000 fba0 	bl	1a000a5a <i2cWrite2>
					vTaskDelay( pdMS_TO_TICKS( 1 ) );
1a00031a:	2001      	movs	r0, #1
1a00031c:	f001 feca 	bl	1a0020b4 <vTaskDelay>
				for (uint8_t i = 2; i < 22; i++ ){
1a000320:	3401      	adds	r4, #1
1a000322:	b2e4      	uxtb	r4, r4
1a000324:	2c15      	cmp	r4, #21
1a000326:	d9ee      	bls.n	1a000306 <myTaskTareasLcd+0x6>
		gpioWrite( LED2, !gpioRead( LED2 ) ); //señal de vida. . .
1a000328:	202c      	movs	r0, #44	; 0x2c
1a00032a:	f004 f83e 	bl	1a0043aa <gpioRead>
1a00032e:	fab0 f180 	clz	r1, r0
1a000332:	0949      	lsrs	r1, r1, #5
1a000334:	202c      	movs	r0, #44	; 0x2c
1a000336:	f004 f80d 	bl	1a004354 <gpioWrite>
		vTaskDelay( pdMS_TO_TICKS( 1000 ) );  //idem, luego lo vuelo. . .
1a00033a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00033e:	f001 feb9 	bl	1a0020b4 <vTaskDelay>
		if (xQueueReceive( myQueueLcdCommandHandle, (void*)myRxBuffer, (TickType_t) 5) ){
1a000342:	2205      	movs	r2, #5
1a000344:	4669      	mov	r1, sp
1a000346:	4b0b      	ldr	r3, [pc, #44]	; (1a000374 <myTaskTareasLcd+0x74>)
1a000348:	6818      	ldr	r0, [r3, #0]
1a00034a:	f001 f943 	bl	1a0015d4 <xQueueReceive>
1a00034e:	2800      	cmp	r0, #0
1a000350:	d0ea      	beq.n	1a000328 <myTaskTareasLcd+0x28>
			if ( myRxBuffer[1] != 0x64 ){
1a000352:	f89d 1001 	ldrb.w	r1, [sp, #1]
1a000356:	2964      	cmp	r1, #100	; 0x64
1a000358:	d009      	beq.n	1a00036e <myTaskTareasLcd+0x6e>
				i2cWrite2(myRxBuffer[0], myRxBuffer[1], myRxBuffer[2]);
1a00035a:	f89d 2002 	ldrb.w	r2, [sp, #2]
1a00035e:	f89d 0000 	ldrb.w	r0, [sp]
1a000362:	f000 fb7a 	bl	1a000a5a <i2cWrite2>
				vTaskDelay( pdMS_TO_TICKS( 1 ) );
1a000366:	2001      	movs	r0, #1
1a000368:	f001 fea4 	bl	1a0020b4 <vTaskDelay>
1a00036c:	e7dc      	b.n	1a000328 <myTaskTareasLcd+0x28>
				for (uint8_t i = 2; i < 22; i++ ){
1a00036e:	2402      	movs	r4, #2
1a000370:	e7d8      	b.n	1a000324 <myTaskTareasLcd+0x24>
1a000372:	bf00      	nop
1a000374:	100000d4 	.word	0x100000d4

1a000378 <myTaskInterrupt>:
		}
	}
}

// Tareas de Actualización de las MEF de las interrupciones
void myTaskInterrupt(void *p){
1a000378:	b508      	push	{r3, lr}

	while( 1 ){
		gpioWrite( LED3, !gpioRead( LED3 ) );
1a00037a:	202d      	movs	r0, #45	; 0x2d
1a00037c:	f004 f815 	bl	1a0043aa <gpioRead>
1a000380:	fab0 f180 	clz	r1, r0
1a000384:	0949      	lsrs	r1, r1, #5
1a000386:	202d      	movs	r0, #45	; 0x2d
1a000388:	f003 ffe4 	bl	1a004354 <gpioWrite>

		interruptFsmUpdate( &myIntrr0 );
1a00038c:	4806      	ldr	r0, [pc, #24]	; (1a0003a8 <myTaskInterrupt+0x30>)
1a00038e:	f000 fabb 	bl	1a000908 <interruptFsmUpdate>
		interruptFsmUpdate( &myIntrr1 );
1a000392:	4806      	ldr	r0, [pc, #24]	; (1a0003ac <myTaskInterrupt+0x34>)
1a000394:	f000 fab8 	bl	1a000908 <interruptFsmUpdate>
		interruptFsmUpdate( &myIntrr2 );
1a000398:	4805      	ldr	r0, [pc, #20]	; (1a0003b0 <myTaskInterrupt+0x38>)
1a00039a:	f000 fab5 	bl	1a000908 <interruptFsmUpdate>
		interruptFsmUpdate( &myIntrr3 );
1a00039e:	4805      	ldr	r0, [pc, #20]	; (1a0003b4 <myTaskInterrupt+0x3c>)
1a0003a0:	f000 fab2 	bl	1a000908 <interruptFsmUpdate>
1a0003a4:	e7e9      	b.n	1a00037a <myTaskInterrupt+0x2>
1a0003a6:	bf00      	nop
1a0003a8:	10002cb0 	.word	0x10002cb0
1a0003ac:	10002c60 	.word	0x10002c60
1a0003b0:	10002bb8 	.word	0x10002bb8
1a0003b4:	10002c08 	.word	0x10002c08

1a0003b8 <myTaskEncoderPosicion>:
	}
}

// Tareas de Actualización la posición del encoder y
// abilitacion del sensor magnético.
void myTaskEncoderPosicion(void *p){
1a0003b8:	b508      	push	{r3, lr}
1a0003ba:	e003      	b.n	1a0003c4 <myTaskEncoderPosicion+0xc>
			 xSemaphoreGive( mySemaphoreEncoderChangeHandle ); //doy el semaphoro para que el sensor magnético tome una lectura

			 //printf("posc: %i\n", encoder_contador);

		}
		vTaskDelay( pdMS_TO_TICKS( 333 ) );
1a0003bc:	f240 104d 	movw	r0, #333	; 0x14d
1a0003c0:	f001 fe78 	bl	1a0020b4 <vTaskDelay>
		if ( encoder_contador_previo != encoder_contador ){
1a0003c4:	4b0e      	ldr	r3, [pc, #56]	; (1a000400 <myTaskEncoderPosicion+0x48>)
1a0003c6:	f9b3 2000 	ldrsh.w	r2, [r3]
1a0003ca:	4b0e      	ldr	r3, [pc, #56]	; (1a000404 <myTaskEncoderPosicion+0x4c>)
1a0003cc:	f9b3 3000 	ldrsh.w	r3, [r3]
1a0003d0:	429a      	cmp	r2, r3
1a0003d2:	d0f3      	beq.n	1a0003bc <myTaskEncoderPosicion+0x4>
			 encoder_contador_previo  = encoder_contador;
1a0003d4:	4a0a      	ldr	r2, [pc, #40]	; (1a000400 <myTaskEncoderPosicion+0x48>)
1a0003d6:	8013      	strh	r3, [r2, #0]
			 encoder_posicion = (float)encoder_contador * encoder_pulso_a_mm;
1a0003d8:	ee07 3a90 	vmov	s15, r3
1a0003dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0003e0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
1a0003e4:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0003e8:	4b07      	ldr	r3, [pc, #28]	; (1a000408 <myTaskEncoderPosicion+0x50>)
1a0003ea:	edc3 7a00 	vstr	s15, [r3]
			 xSemaphoreGive( mySemaphoreEncoderChangeHandle ); //doy el semaphoro para que el sensor magnético tome una lectura
1a0003ee:	2300      	movs	r3, #0
1a0003f0:	461a      	mov	r2, r3
1a0003f2:	4619      	mov	r1, r3
1a0003f4:	4805      	ldr	r0, [pc, #20]	; (1a00040c <myTaskEncoderPosicion+0x54>)
1a0003f6:	6800      	ldr	r0, [r0, #0]
1a0003f8:	f000 ffc8 	bl	1a00138c <xQueueGenericSend>
1a0003fc:	e7de      	b.n	1a0003bc <myTaskEncoderPosicion+0x4>
1a0003fe:	bf00      	nop
1a000400:	100000c2 	.word	0x100000c2
1a000404:	100000c0 	.word	0x100000c0
1a000408:	100000c4 	.word	0x100000c4
1a00040c:	100000d8 	.word	0x100000d8

1a000410 <myIntrrUpCallback>:
   	//printf("Intrr Down %i: \r\n", int_N);
}

// Funciones de Callbacks para las interrupciones (Up)
void myIntrrUpCallback(void* ptr)
{
1a000410:	b508      	push	{r3, lr}
    int int_N = * (int *) ptr;
1a000412:	6803      	ldr	r3, [r0, #0]

    switch ( int_N ){
1a000414:	2b02      	cmp	r3, #2
1a000416:	d014      	beq.n	1a000442 <myIntrrUpCallback+0x32>
1a000418:	2b03      	cmp	r3, #3
1a00041a:	d016      	beq.n	1a00044a <myIntrrUpCallback+0x3a>
1a00041c:	2b01      	cmp	r3, #1
1a00041e:	d000      	beq.n	1a000422 <myIntrrUpCallback+0x12>
    		int_magnetometro = TRUE;
    	   	xSemaphoreGive( mySemaphoreMagnetometroChangeHandle );
    	break;
    }
	//printf("Intrr Down %i: \r\n", int_N);
}
1a000420:	bd08      	pop	{r3, pc}
    		int1_UP  = TRUE;
1a000422:	4b0f      	ldr	r3, [pc, #60]	; (1a000460 <myIntrrUpCallback+0x50>)
1a000424:	2201      	movs	r2, #1
1a000426:	701a      	strb	r2, [r3, #0]
    		if ( int2_UP) {
1a000428:	4b0e      	ldr	r3, [pc, #56]	; (1a000464 <myIntrrUpCallback+0x54>)
1a00042a:	781b      	ldrb	r3, [r3, #0]
1a00042c:	b123      	cbz	r3, 1a000438 <myIntrrUpCallback+0x28>
    			encoder_contador++;  //horario
1a00042e:	4a0e      	ldr	r2, [pc, #56]	; (1a000468 <myIntrrUpCallback+0x58>)
1a000430:	8813      	ldrh	r3, [r2, #0]
1a000432:	3301      	adds	r3, #1
1a000434:	8013      	strh	r3, [r2, #0]
1a000436:	e7f3      	b.n	1a000420 <myIntrrUpCallback+0x10>
    			encoder_contador--;  //antihorario
1a000438:	4a0b      	ldr	r2, [pc, #44]	; (1a000468 <myIntrrUpCallback+0x58>)
1a00043a:	8813      	ldrh	r3, [r2, #0]
1a00043c:	3b01      	subs	r3, #1
1a00043e:	8013      	strh	r3, [r2, #0]
1a000440:	e7ee      	b.n	1a000420 <myIntrrUpCallback+0x10>
    		int2_UP  = TRUE;
1a000442:	4b08      	ldr	r3, [pc, #32]	; (1a000464 <myIntrrUpCallback+0x54>)
1a000444:	2201      	movs	r2, #1
1a000446:	701a      	strb	r2, [r3, #0]
    	break;
1a000448:	e7ea      	b.n	1a000420 <myIntrrUpCallback+0x10>
    		int_magnetometro = TRUE;
1a00044a:	4b08      	ldr	r3, [pc, #32]	; (1a00046c <myIntrrUpCallback+0x5c>)
1a00044c:	2201      	movs	r2, #1
1a00044e:	701a      	strb	r2, [r3, #0]
    	   	xSemaphoreGive( mySemaphoreMagnetometroChangeHandle );
1a000450:	2300      	movs	r3, #0
1a000452:	461a      	mov	r2, r3
1a000454:	4619      	mov	r1, r3
1a000456:	4806      	ldr	r0, [pc, #24]	; (1a000470 <myIntrrUpCallback+0x60>)
1a000458:	6800      	ldr	r0, [r0, #0]
1a00045a:	f000 ff97 	bl	1a00138c <xQueueGenericSend>
}
1a00045e:	e7df      	b.n	1a000420 <myIntrrUpCallback+0x10>
1a000460:	100000d0 	.word	0x100000d0
1a000464:	100000d1 	.word	0x100000d1
1a000468:	100000c0 	.word	0x100000c0
1a00046c:	100000d2 	.word	0x100000d2
1a000470:	100000dc 	.word	0x100000dc

1a000474 <myTaskMagnetometroLectura>:
void myTaskMagnetometroLectura(void *p){
1a000474:	b508      	push	{r3, lr}
1a000476:	e002      	b.n	1a00047e <myTaskMagnetometroLectura+0xa>
		vTaskDelay( pdMS_TO_TICKS( 200 ) );
1a000478:	20c8      	movs	r0, #200	; 0xc8
1a00047a:	f001 fe1b 	bl	1a0020b4 <vTaskDelay>
		if ( xSemaphoreTake( mySemaphoreEncoderChangeHandle , (TickType_t) 0xFFFFFFFF ) == 1 ){
1a00047e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000482:	4b09      	ldr	r3, [pc, #36]	; (1a0004a8 <myTaskMagnetometroLectura+0x34>)
1a000484:	6818      	ldr	r0, [r3, #0]
1a000486:	f001 f951 	bl	1a00172c <xQueueSemaphoreTake>
1a00048a:	2801      	cmp	r0, #1
1a00048c:	d1f4      	bne.n	1a000478 <myTaskMagnetometroLectura+0x4>
			 hmc5883L_configValue.mode    = HMC5883L_single_measurement;
1a00048e:	4b07      	ldr	r3, [pc, #28]	; (1a0004ac <myTaskMagnetometroLectura+0x38>)
1a000490:	2101      	movs	r1, #1
1a000492:	7119      	strb	r1, [r3, #4]
		     hmc5883lInit( hmc5883L_configValue );
1a000494:	6818      	ldr	r0, [r3, #0]
1a000496:	f004 f847 	bl	1a004528 <hmc5883lInit>
			 hmc5883lRead( &hmc5883l_x_raw, &hmc5883l_y_raw, &hmc5883l_z_raw );
1a00049a:	4a05      	ldr	r2, [pc, #20]	; (1a0004b0 <myTaskMagnetometroLectura+0x3c>)
1a00049c:	4905      	ldr	r1, [pc, #20]	; (1a0004b4 <myTaskMagnetometroLectura+0x40>)
1a00049e:	4806      	ldr	r0, [pc, #24]	; (1a0004b8 <myTaskMagnetometroLectura+0x44>)
1a0004a0:	f004 f886 	bl	1a0045b0 <hmc5883lRead>
1a0004a4:	e7e8      	b.n	1a000478 <myTaskMagnetometroLectura+0x4>
1a0004a6:	bf00      	nop
1a0004a8:	100000d8 	.word	0x100000d8
1a0004ac:	10002d04 	.word	0x10002d04
1a0004b0:	10002c5a 	.word	0x10002c5a
1a0004b4:	10002c58 	.word	0x10002c58
1a0004b8:	10002c5e 	.word	0x10002c5e

1a0004bc <myTaskMostrarValoresLcd>:
void myTaskMostrarValoresLcd(void *p){
1a0004bc:	b508      	push	{r3, lr}
		if ( xSemaphoreTake( mySemaphoreMagnetometroChangeHandle , (TickType_t) 0xFFFFFFFF ) == 1 ){
1a0004be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0004c2:	4b23      	ldr	r3, [pc, #140]	; (1a000550 <myTaskMostrarValoresLcd+0x94>)
1a0004c4:	6818      	ldr	r0, [r3, #0]
1a0004c6:	f001 f931 	bl	1a00172c <xQueueSemaphoreTake>
1a0004ca:	2801      	cmp	r0, #1
1a0004cc:	d1f7      	bne.n	1a0004be <myTaskMostrarValoresLcd+0x2>
			 LCD_I2C_SET_ADDRESS_1234( 0x66, 2 );
1a0004ce:	2102      	movs	r1, #2
1a0004d0:	2066      	movs	r0, #102	; 0x66
1a0004d2:	f000 faf1 	bl	1a000ab8 <LCD_I2C_SET_ADDRESS_1234>
			 LCD_I2C_WRITE_DATA_1234_STRING( 0x66, "Bx = ;");
1a0004d6:	491f      	ldr	r1, [pc, #124]	; (1a000554 <myTaskMostrarValoresLcd+0x98>)
1a0004d8:	2066      	movs	r0, #102	; 0x66
1a0004da:	f000 fb13 	bl	1a000b04 <LCD_I2C_WRITE_DATA_1234_STRING>
			 FLOAT_A_LCD( ( float )hmc5883l_x_raw );
1a0004de:	4b1e      	ldr	r3, [pc, #120]	; (1a000558 <myTaskMostrarValoresLcd+0x9c>)
1a0004e0:	f9b3 3000 	ldrsh.w	r3, [r3]
1a0004e4:	ee00 3a10 	vmov	s0, r3
1a0004e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
1a0004ec:	f000 fc5a 	bl	1a000da4 <FLOAT_A_LCD>
			 LCD_I2C_SET_ADDRESS_1234( 0x66, 22 );
1a0004f0:	2116      	movs	r1, #22
1a0004f2:	2066      	movs	r0, #102	; 0x66
1a0004f4:	f000 fae0 	bl	1a000ab8 <LCD_I2C_SET_ADDRESS_1234>
			 LCD_I2C_WRITE_DATA_1234_STRING( 0x66, "By = ;");
1a0004f8:	4918      	ldr	r1, [pc, #96]	; (1a00055c <myTaskMostrarValoresLcd+0xa0>)
1a0004fa:	2066      	movs	r0, #102	; 0x66
1a0004fc:	f000 fb02 	bl	1a000b04 <LCD_I2C_WRITE_DATA_1234_STRING>
			 FLOAT_A_LCD( ( float )hmc5883l_y_raw );
1a000500:	4b17      	ldr	r3, [pc, #92]	; (1a000560 <myTaskMostrarValoresLcd+0xa4>)
1a000502:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000506:	ee00 3a10 	vmov	s0, r3
1a00050a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
1a00050e:	f000 fc49 	bl	1a000da4 <FLOAT_A_LCD>
			 LCD_I2C_SET_ADDRESS_1234( 0x66, 42 );
1a000512:	212a      	movs	r1, #42	; 0x2a
1a000514:	2066      	movs	r0, #102	; 0x66
1a000516:	f000 facf 	bl	1a000ab8 <LCD_I2C_SET_ADDRESS_1234>
			 LCD_I2C_WRITE_DATA_1234_STRING( 0x66, "Bz = ;");
1a00051a:	4912      	ldr	r1, [pc, #72]	; (1a000564 <myTaskMostrarValoresLcd+0xa8>)
1a00051c:	2066      	movs	r0, #102	; 0x66
1a00051e:	f000 faf1 	bl	1a000b04 <LCD_I2C_WRITE_DATA_1234_STRING>
			 FLOAT_A_LCD( ( float )hmc5883l_z_raw );
1a000522:	4b11      	ldr	r3, [pc, #68]	; (1a000568 <myTaskMostrarValoresLcd+0xac>)
1a000524:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000528:	ee00 3a10 	vmov	s0, r3
1a00052c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
1a000530:	f000 fc38 	bl	1a000da4 <FLOAT_A_LCD>
			 LCD_I2C_SET_ADDRESS_1234( 0x66, 62 );
1a000534:	213e      	movs	r1, #62	; 0x3e
1a000536:	2066      	movs	r0, #102	; 0x66
1a000538:	f000 fabe 	bl	1a000ab8 <LCD_I2C_SET_ADDRESS_1234>
			 LCD_I2C_WRITE_DATA_1234_STRING( 0x66, "encoder = ;");
1a00053c:	490b      	ldr	r1, [pc, #44]	; (1a00056c <myTaskMostrarValoresLcd+0xb0>)
1a00053e:	2066      	movs	r0, #102	; 0x66
1a000540:	f000 fae0 	bl	1a000b04 <LCD_I2C_WRITE_DATA_1234_STRING>
			 FLOAT_A_LCD( encoder_posicion );
1a000544:	4b0a      	ldr	r3, [pc, #40]	; (1a000570 <myTaskMostrarValoresLcd+0xb4>)
1a000546:	ed93 0a00 	vldr	s0, [r3]
1a00054a:	f000 fc2b 	bl	1a000da4 <FLOAT_A_LCD>
1a00054e:	e7b6      	b.n	1a0004be <myTaskMostrarValoresLcd+0x2>
1a000550:	100000dc 	.word	0x100000dc
1a000554:	1a0052c4 	.word	0x1a0052c4
1a000558:	10002c5e 	.word	0x10002c5e
1a00055c:	1a0052cc 	.word	0x1a0052cc
1a000560:	10002c58 	.word	0x10002c58
1a000564:	1a0052d4 	.word	0x1a0052d4
1a000568:	10002c5a 	.word	0x10002c5a
1a00056c:	1a0052dc 	.word	0x1a0052dc
1a000570:	100000c4 	.word	0x100000c4

1a000574 <myIntrrDownCallback>:
{
1a000574:	b508      	push	{r3, lr}
    int int_N = * (int *) ptr;
1a000576:	6803      	ldr	r3, [r0, #0]
    switch ( int_N ){
1a000578:	2b03      	cmp	r3, #3
1a00057a:	d806      	bhi.n	1a00058a <myIntrrDownCallback+0x16>
1a00057c:	e8df f003 	tbb	[pc, r3]
1a000580:	0e0a0602 	.word	0x0e0a0602
    		LCD_I2C_CLEAR( 0x66 );
1a000584:	2066      	movs	r0, #102	; 0x66
1a000586:	f000 fa85 	bl	1a000a94 <LCD_I2C_CLEAR>
}
1a00058a:	bd08      	pop	{r3, pc}
    		int1_UP  = FALSE;
1a00058c:	4b05      	ldr	r3, [pc, #20]	; (1a0005a4 <myIntrrDownCallback+0x30>)
1a00058e:	2200      	movs	r2, #0
1a000590:	701a      	strb	r2, [r3, #0]
    	break;
1a000592:	e7fa      	b.n	1a00058a <myIntrrDownCallback+0x16>
    		int2_UP  = FALSE;
1a000594:	4b04      	ldr	r3, [pc, #16]	; (1a0005a8 <myIntrrDownCallback+0x34>)
1a000596:	2200      	movs	r2, #0
1a000598:	701a      	strb	r2, [r3, #0]
    	break;
1a00059a:	e7f6      	b.n	1a00058a <myIntrrDownCallback+0x16>
			int_magnetometro = FALSE;
1a00059c:	4b03      	ldr	r3, [pc, #12]	; (1a0005ac <myIntrrDownCallback+0x38>)
1a00059e:	2200      	movs	r2, #0
1a0005a0:	701a      	strb	r2, [r3, #0]
}
1a0005a2:	e7f2      	b.n	1a00058a <myIntrrDownCallback+0x16>
1a0005a4:	100000d0 	.word	0x100000d0
1a0005a8:	100000d1 	.word	0x100000d1
1a0005ac:	100000d2 	.word	0x100000d2

1a0005b0 <myTaskIniciarLcd>:
void myTaskIniciarLcd(void *p){
1a0005b0:	b508      	push	{r3, lr}
		LCD_I2C_SETUP( 0x66 );
1a0005b2:	2066      	movs	r0, #102	; 0x66
1a0005b4:	f000 fa94 	bl	1a000ae0 <LCD_I2C_SETUP>
		LCD_I2C_CLEAR( 0x66 );
1a0005b8:	2066      	movs	r0, #102	; 0x66
1a0005ba:	f000 fa6b 	bl	1a000a94 <LCD_I2C_CLEAR>
		LCD_I2C_SET_ADDRESS_1234( 0x66, 24);
1a0005be:	2118      	movs	r1, #24
1a0005c0:	2066      	movs	r0, #102	; 0x66
1a0005c2:	f000 fa79 	bl	1a000ab8 <LCD_I2C_SET_ADDRESS_1234>
		LCD_I2C_WRITE_DATA_1234_STRING( 0x66, "RTOS - PJCAC  ;");
1a0005c6:	490c      	ldr	r1, [pc, #48]	; (1a0005f8 <myTaskIniciarLcd+0x48>)
1a0005c8:	2066      	movs	r0, #102	; 0x66
1a0005ca:	f000 fa9b 	bl	1a000b04 <LCD_I2C_WRITE_DATA_1234_STRING>
		LCD_I2C_SET_ADDRESS_1234( 0x66, 42);
1a0005ce:	212a      	movs	r1, #42	; 0x2a
1a0005d0:	2066      	movs	r0, #102	; 0x66
1a0005d2:	f000 fa71 	bl	1a000ab8 <LCD_I2C_SET_ADDRESS_1234>
		LCD_I2C_WRITE_DATA_1234_STRING( 0x66, "10 Cohorte -2019;");
1a0005d6:	4909      	ldr	r1, [pc, #36]	; (1a0005fc <myTaskIniciarLcd+0x4c>)
1a0005d8:	2066      	movs	r0, #102	; 0x66
1a0005da:	f000 fa93 	bl	1a000b04 <LCD_I2C_WRITE_DATA_1234_STRING>
		LCD_I2C_SET_ADDRESS_1234( 0x66, 61);
1a0005de:	213d      	movs	r1, #61	; 0x3d
1a0005e0:	2066      	movs	r0, #102	; 0x66
1a0005e2:	f000 fa69 	bl	1a000ab8 <LCD_I2C_SET_ADDRESS_1234>
		LCD_I2C_WRITE_DATA_1234_STRING( 0x66, "Encoder Magnetico;");
1a0005e6:	4906      	ldr	r1, [pc, #24]	; (1a000600 <myTaskIniciarLcd+0x50>)
1a0005e8:	2066      	movs	r0, #102	; 0x66
1a0005ea:	f000 fa8b 	bl	1a000b04 <LCD_I2C_WRITE_DATA_1234_STRING>
		vTaskSuspend( NULL );
1a0005ee:	2000      	movs	r0, #0
1a0005f0:	f001 fdea 	bl	1a0021c8 <vTaskSuspend>
1a0005f4:	e7dd      	b.n	1a0005b2 <myTaskIniciarLcd+0x2>
1a0005f6:	bf00      	nop
1a0005f8:	1a00528c 	.word	0x1a00528c
1a0005fc:	1a00529c 	.word	0x1a00529c
1a000600:	1a0052b0 	.word	0x1a0052b0

1a000604 <main>:


/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000604:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
1a000608:	b08f      	sub	sp, #60	; 0x3c
   /* ------------- INICIALIZACIONES ------------- */

   // Inicialización del Board de la CIAA
   boardConfig();
1a00060a:	f003 ff07 	bl	1a00441c <boardInit>

   // Inicialización del Sensor Magnético:

   // Cargo la Estructura de configuracion del HMC5883L con valores por defecto
   hmc5883lPrepareDefaultInit( &hmc5883L_configValue );
1a00060e:	4c6d      	ldr	r4, [pc, #436]	; (1a0007c4 <main+0x1c0>)
1a000610:	4620      	mov	r0, r4
1a000612:	f003 ff7f 	bl	1a004514 <hmc5883lPrepareDefaultInit>

   // Cambio los valores que deseo configurar de la Estructura de configuracion
   // del HMC5883L y dejo el resto con sus valore por defecto
   hmc5883L_configValue.mode    = HMC5883L_idle;
1a000616:	2702      	movs	r7, #2
1a000618:	7127      	strb	r7, [r4, #4]
   hmc5883L_configValue.samples = HMC5883L_8_sample;
1a00061a:	2603      	movs	r6, #3
1a00061c:	7026      	strb	r6, [r4, #0]

   // Inicializar HMC5883L
   hmc5883lInit( hmc5883L_configValue );
1a00061e:	6820      	ldr	r0, [r4, #0]
1a000620:	4639      	mov	r1, r7
1a000622:	f003 ff81 	bl	1a004528 <hmc5883lInit>

   //Inicializo las interrupciones.
   //No hizo falta manejar de las interrupciones a través de FreeRTOS pues se realizan operaciones mínimas en ellas

   //Set as inputs pins used for interruptions
    gpioConfig( INTRR0, GPIO_INPUT );
1a000626:	2100      	movs	r1, #0
1a000628:	2020      	movs	r0, #32
1a00062a:	f003 fdc9 	bl	1a0041c0 <gpioInit>
    gpioConfig( INTRR1, GPIO_INPUT );
1a00062e:	2100      	movs	r1, #0
1a000630:	200f      	movs	r0, #15
1a000632:	f003 fdc5 	bl	1a0041c0 <gpioInit>
    gpioConfig( INTRR2, GPIO_INPUT );
1a000636:	2100      	movs	r1, #0
1a000638:	201f      	movs	r0, #31
1a00063a:	f003 fdc1 	bl	1a0041c0 <gpioInit>
    gpioConfig( INTRR3, GPIO_INPUT );
1a00063e:	2100      	movs	r1, #0
1a000640:	200e      	movs	r0, #14
1a000642:	f003 fdbd 	bl	1a0041c0 <gpioInit>


    // myIntrr is handled with callbacks
    interruptInit( &myIntrr0,                   // Interrupt structure (object)
1a000646:	2400      	movs	r4, #0
1a000648:	940d      	str	r4, [sp, #52]	; 0x34
1a00064a:	4b5f      	ldr	r3, [pc, #380]	; (1a0007c8 <main+0x1c4>)
1a00064c:	930c      	str	r3, [sp, #48]	; 0x30
1a00064e:	4b5f      	ldr	r3, [pc, #380]	; (1a0007cc <main+0x1c8>)
1a000650:	930b      	str	r3, [sp, #44]	; 0x2c
1a000652:	940a      	str	r4, [sp, #40]	; 0x28
1a000654:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 1a000854 <main+0x250>
1a000658:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00065c:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 1a000858 <main+0x254>
1a000660:	f8cd a020 	str.w	sl, [sp, #32]
1a000664:	f640 38b8 	movw	r8, #3000	; 0xbb8
1a000668:	f04f 0900 	mov.w	r9, #0
1a00066c:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a000670:	9404      	str	r4, [sp, #16]
1a000672:	2501      	movs	r5, #1
1a000674:	9503      	str	r5, [sp, #12]
1a000676:	9502      	str	r5, [sp, #8]
1a000678:	2232      	movs	r2, #50	; 0x32
1a00067a:	2300      	movs	r3, #0
1a00067c:	e9cd 2300 	strd	r2, r3, [sp]
1a000680:	462a      	mov	r2, r5
1a000682:	2120      	movs	r1, #32
1a000684:	4852      	ldr	r0, [pc, #328]	; (1a0007d0 <main+0x1cc>)
1a000686:	f000 f914 	bl	1a0008b2 <interruptInit>
 				  &int0Down,					// argument for downCallback
 				  &int0Up,						// argument for upCallback
 				  NULL							// argument for holdDownCallback
                 );

    interruptInit( &myIntrr1,                   // Interrupt structure (object)
1a00068a:	940d      	str	r4, [sp, #52]	; 0x34
1a00068c:	4b51      	ldr	r3, [pc, #324]	; (1a0007d4 <main+0x1d0>)
1a00068e:	930c      	str	r3, [sp, #48]	; 0x30
1a000690:	4b51      	ldr	r3, [pc, #324]	; (1a0007d8 <main+0x1d4>)
1a000692:	930b      	str	r3, [sp, #44]	; 0x2c
1a000694:	940a      	str	r4, [sp, #40]	; 0x28
1a000696:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00069a:	f8cd a020 	str.w	sl, [sp, #32]
1a00069e:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a0006a2:	9404      	str	r4, [sp, #16]
1a0006a4:	9503      	str	r5, [sp, #12]
1a0006a6:	9502      	str	r5, [sp, #8]
1a0006a8:	2232      	movs	r2, #50	; 0x32
1a0006aa:	2300      	movs	r3, #0
1a0006ac:	e9cd 2300 	strd	r2, r3, [sp]
1a0006b0:	462a      	mov	r2, r5
1a0006b2:	210f      	movs	r1, #15
1a0006b4:	4849      	ldr	r0, [pc, #292]	; (1a0007dc <main+0x1d8>)
1a0006b6:	f000 f8fc 	bl	1a0008b2 <interruptInit>
 				  &int1Down,					// argument for downCallback
 				  &int1Up,						// argument for upCallback
 				  NULL							// argument for holdDownCallback
                 );

    interruptInit( &myIntrr2,                   // Interrupt structure (object)
1a0006ba:	940d      	str	r4, [sp, #52]	; 0x34
1a0006bc:	4b48      	ldr	r3, [pc, #288]	; (1a0007e0 <main+0x1dc>)
1a0006be:	930c      	str	r3, [sp, #48]	; 0x30
1a0006c0:	4b48      	ldr	r3, [pc, #288]	; (1a0007e4 <main+0x1e0>)
1a0006c2:	930b      	str	r3, [sp, #44]	; 0x2c
1a0006c4:	940a      	str	r4, [sp, #40]	; 0x28
1a0006c6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a0006ca:	f8cd a020 	str.w	sl, [sp, #32]
1a0006ce:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a0006d2:	9404      	str	r4, [sp, #16]
1a0006d4:	9503      	str	r5, [sp, #12]
1a0006d6:	9502      	str	r5, [sp, #8]
1a0006d8:	2232      	movs	r2, #50	; 0x32
1a0006da:	2300      	movs	r3, #0
1a0006dc:	e9cd 2300 	strd	r2, r3, [sp]
1a0006e0:	462a      	mov	r2, r5
1a0006e2:	211f      	movs	r1, #31
1a0006e4:	4840      	ldr	r0, [pc, #256]	; (1a0007e8 <main+0x1e4>)
1a0006e6:	f000 f8e4 	bl	1a0008b2 <interruptInit>
 				  &int2Down,					// argument for downCallback
 				  &int2Up,						// argument for upCallback
 				  NULL							// argument for holdDownCallback
                 );

    interruptInit( &myIntrr3,                   // Interrupt structure (object)
1a0006ea:	940d      	str	r4, [sp, #52]	; 0x34
1a0006ec:	4b3f      	ldr	r3, [pc, #252]	; (1a0007ec <main+0x1e8>)
1a0006ee:	930c      	str	r3, [sp, #48]	; 0x30
1a0006f0:	4b3f      	ldr	r3, [pc, #252]	; (1a0007f0 <main+0x1ec>)
1a0006f2:	930b      	str	r3, [sp, #44]	; 0x2c
1a0006f4:	940a      	str	r4, [sp, #40]	; 0x28
1a0006f6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a0006fa:	f8cd a020 	str.w	sl, [sp, #32]
1a0006fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a000702:	9404      	str	r4, [sp, #16]
1a000704:	9503      	str	r5, [sp, #12]
1a000706:	9502      	str	r5, [sp, #8]
1a000708:	2232      	movs	r2, #50	; 0x32
1a00070a:	2300      	movs	r3, #0
1a00070c:	e9cd 2300 	strd	r2, r3, [sp]
1a000710:	462a      	mov	r2, r5
1a000712:	210e      	movs	r1, #14
1a000714:	4837      	ldr	r0, [pc, #220]	; (1a0007f4 <main+0x1f0>)
1a000716:	f000 f8cc 	bl	1a0008b2 <interruptInit>
                 );

    //-----------------------------------------------------------------------------------------------

    // Inicializando el i2c
    i2cInit(I2C0, 100000);
1a00071a:	4937      	ldr	r1, [pc, #220]	; (1a0007f8 <main+0x1f4>)
1a00071c:	4620      	mov	r0, r4
1a00071e:	f003 fd0d 	bl	1a00413c <i2cInit>

	printf("Inicializando PJCAC\r\n" );
1a000722:	4836      	ldr	r0, [pc, #216]	; (1a0007fc <main+0x1f8>)
1a000724:	f004 fbf6 	bl	1a004f14 <puts>

	xTaskCreate( myTaskInterrupt, "TaskInterrupt",   configMINIMAL_STACK_SIZE*2, (void*)0, tskIDLE_PRIORITY + 1, &myTaskInterruptHandle );
1a000728:	4b35      	ldr	r3, [pc, #212]	; (1a000800 <main+0x1fc>)
1a00072a:	9301      	str	r3, [sp, #4]
1a00072c:	9500      	str	r5, [sp, #0]
1a00072e:	4623      	mov	r3, r4
1a000730:	22b4      	movs	r2, #180	; 0xb4
1a000732:	4934      	ldr	r1, [pc, #208]	; (1a000804 <main+0x200>)
1a000734:	4834      	ldr	r0, [pc, #208]	; (1a000808 <main+0x204>)
1a000736:	f001 fb2c 	bl	1a001d92 <xTaskCreate>

	xTaskCreate( myTaskEncoderPosicion, "TaskEncoderPosicion",   configMINIMAL_STACK_SIZE*2, (void*)0, tskIDLE_PRIORITY + 1, &myTaskEncoderPosicionHandle );
1a00073a:	4b34      	ldr	r3, [pc, #208]	; (1a00080c <main+0x208>)
1a00073c:	9301      	str	r3, [sp, #4]
1a00073e:	9500      	str	r5, [sp, #0]
1a000740:	4623      	mov	r3, r4
1a000742:	22b4      	movs	r2, #180	; 0xb4
1a000744:	4932      	ldr	r1, [pc, #200]	; (1a000810 <main+0x20c>)
1a000746:	4833      	ldr	r0, [pc, #204]	; (1a000814 <main+0x210>)
1a000748:	f001 fb23 	bl	1a001d92 <xTaskCreate>

	xTaskCreate( myTaskMagnetometroLectura, "myTaskMagnetometroLectura",   configMINIMAL_STACK_SIZE*2, (void*)0, tskIDLE_PRIORITY + 1, &myTaskMagnetometroLecturaHandle );
1a00074c:	4b32      	ldr	r3, [pc, #200]	; (1a000818 <main+0x214>)
1a00074e:	9301      	str	r3, [sp, #4]
1a000750:	9500      	str	r5, [sp, #0]
1a000752:	4623      	mov	r3, r4
1a000754:	22b4      	movs	r2, #180	; 0xb4
1a000756:	4931      	ldr	r1, [pc, #196]	; (1a00081c <main+0x218>)
1a000758:	4831      	ldr	r0, [pc, #196]	; (1a000820 <main+0x21c>)
1a00075a:	f001 fb1a 	bl	1a001d92 <xTaskCreate>

	xTaskCreate( myTaskTareasLcd,  "myTaskTareasLcd", configMINIMAL_STACK_SIZE*2, (void*)0, tskIDLE_PRIORITY + 2, &myTaskTareasLcdHandle  );
1a00075e:	4b31      	ldr	r3, [pc, #196]	; (1a000824 <main+0x220>)
1a000760:	9301      	str	r3, [sp, #4]
1a000762:	9700      	str	r7, [sp, #0]
1a000764:	4623      	mov	r3, r4
1a000766:	22b4      	movs	r2, #180	; 0xb4
1a000768:	492f      	ldr	r1, [pc, #188]	; (1a000828 <main+0x224>)
1a00076a:	4830      	ldr	r0, [pc, #192]	; (1a00082c <main+0x228>)
1a00076c:	f001 fb11 	bl	1a001d92 <xTaskCreate>

	xTaskCreate( myTaskIniciarLcd, "myTaskIniciarLcd", configMINIMAL_STACK_SIZE*2, (void*)0, tskIDLE_PRIORITY + 3, &myTaskIniciarLcdHandle );
1a000770:	4b2f      	ldr	r3, [pc, #188]	; (1a000830 <main+0x22c>)
1a000772:	9301      	str	r3, [sp, #4]
1a000774:	9600      	str	r6, [sp, #0]
1a000776:	4623      	mov	r3, r4
1a000778:	22b4      	movs	r2, #180	; 0xb4
1a00077a:	492e      	ldr	r1, [pc, #184]	; (1a000834 <main+0x230>)
1a00077c:	482e      	ldr	r0, [pc, #184]	; (1a000838 <main+0x234>)
1a00077e:	f001 fb08 	bl	1a001d92 <xTaskCreate>

	xTaskCreate( myTaskMostrarValoresLcd, "myTaskMostrarValoresLcd", configMINIMAL_STACK_SIZE*2, (void*)0, tskIDLE_PRIORITY + 2, &myTaskMostrarValoresLcdHandle );
1a000782:	4b2e      	ldr	r3, [pc, #184]	; (1a00083c <main+0x238>)
1a000784:	9301      	str	r3, [sp, #4]
1a000786:	9700      	str	r7, [sp, #0]
1a000788:	4623      	mov	r3, r4
1a00078a:	22b4      	movs	r2, #180	; 0xb4
1a00078c:	492c      	ldr	r1, [pc, #176]	; (1a000840 <main+0x23c>)
1a00078e:	482d      	ldr	r0, [pc, #180]	; (1a000844 <main+0x240>)
1a000790:	f001 faff 	bl	1a001d92 <xTaskCreate>

	mySemaphoreEncoderChangeHandle = xSemaphoreCreateBinary();
1a000794:	4632      	mov	r2, r6
1a000796:	4621      	mov	r1, r4
1a000798:	4628      	mov	r0, r5
1a00079a:	f000 fdd0 	bl	1a00133e <xQueueGenericCreate>
1a00079e:	4b2a      	ldr	r3, [pc, #168]	; (1a000848 <main+0x244>)
1a0007a0:	6018      	str	r0, [r3, #0]

	mySemaphoreMagnetometroChangeHandle = xSemaphoreCreateBinary();
1a0007a2:	4632      	mov	r2, r6
1a0007a4:	4621      	mov	r1, r4
1a0007a6:	4628      	mov	r0, r5
1a0007a8:	f000 fdc9 	bl	1a00133e <xQueueGenericCreate>
1a0007ac:	4b27      	ldr	r3, [pc, #156]	; (1a00084c <main+0x248>)
1a0007ae:	6018      	str	r0, [r3, #0]

	myQueueLcdCommandHandle = xQueueCreate( 12,  22*sizeof( uint8_t ) );
1a0007b0:	4622      	mov	r2, r4
1a0007b2:	2116      	movs	r1, #22
1a0007b4:	200c      	movs	r0, #12
1a0007b6:	f000 fdc2 	bl	1a00133e <xQueueGenericCreate>
1a0007ba:	4b25      	ldr	r3, [pc, #148]	; (1a000850 <main+0x24c>)
1a0007bc:	6018      	str	r0, [r3, #0]

    // Iniciar scheduler
    vTaskStartScheduler();
1a0007be:	f001 fb1b 	bl	1a001df8 <vTaskStartScheduler>
1a0007c2:	e7fe      	b.n	1a0007c2 <main+0x1be>
1a0007c4:	10002d04 	.word	0x10002d04
1a0007c8:	100000cc 	.word	0x100000cc
1a0007cc:	100000c8 	.word	0x100000c8
1a0007d0:	10002cb0 	.word	0x10002cb0
1a0007d4:	10000004 	.word	0x10000004
1a0007d8:	10000000 	.word	0x10000000
1a0007dc:	10002c60 	.word	0x10002c60
1a0007e0:	1000000c 	.word	0x1000000c
1a0007e4:	10000008 	.word	0x10000008
1a0007e8:	10002bb8 	.word	0x10002bb8
1a0007ec:	10000014 	.word	0x10000014
1a0007f0:	10000010 	.word	0x10000010
1a0007f4:	10002c08 	.word	0x10002c08
1a0007f8:	000186a0 	.word	0x000186a0
1a0007fc:	1a0051f8 	.word	0x1a0051f8
1a000800:	100000e8 	.word	0x100000e8
1a000804:	1a005210 	.word	0x1a005210
1a000808:	1a000379 	.word	0x1a000379
1a00080c:	100000e0 	.word	0x100000e0
1a000810:	1a005220 	.word	0x1a005220
1a000814:	1a0003b9 	.word	0x1a0003b9
1a000818:	100000ec 	.word	0x100000ec
1a00081c:	1a005234 	.word	0x1a005234
1a000820:	1a000475 	.word	0x1a000475
1a000824:	100000f4 	.word	0x100000f4
1a000828:	1a005250 	.word	0x1a005250
1a00082c:	1a000301 	.word	0x1a000301
1a000830:	100000e4 	.word	0x100000e4
1a000834:	1a005260 	.word	0x1a005260
1a000838:	1a0005b1 	.word	0x1a0005b1
1a00083c:	100000f0 	.word	0x100000f0
1a000840:	1a005274 	.word	0x1a005274
1a000844:	1a0004bd 	.word	0x1a0004bd
1a000848:	100000d8 	.word	0x100000d8
1a00084c:	100000dc 	.word	0x100000dc
1a000850:	100000d4 	.word	0x100000d4
1a000854:	1a000411 	.word	0x1a000411
1a000858:	1a000575 	.word	0x1a000575

1a00085c <interruptIsUp>:

// LOW LEVEL FUNCTIONS --------------------------------------

// Return true if interrupt is up
bool_t interruptIsUp( interrupt_t* interrupt )
{
1a00085c:	b510      	push	{r4, lr}
1a00085e:	4604      	mov	r4, r0
   bool_t gpioStatus = gpioRead( interrupt->gpio );
1a000860:	f990 0000 	ldrsb.w	r0, [r0]
1a000864:	f003 fda1 	bl	1a0043aa <gpioRead>
   if( interrupt->logic == INTERRUPT_ONE_IS_UP ){
1a000868:	7923      	ldrb	r3, [r4, #4]
1a00086a:	2b01      	cmp	r3, #1
1a00086c:	d002      	beq.n	1a000874 <interruptIsUp+0x18>
      return gpioStatus;
   } else{
      return !gpioStatus;
1a00086e:	fab0 f080 	clz	r0, r0
1a000872:	0940      	lsrs	r0, r0, #5
   }
}
1a000874:	bd10      	pop	{r4, pc}

1a000876 <interruptIsDown>:

// Return true if interrupt is down
bool_t interruptIsDown( interrupt_t* interrupt )
{
1a000876:	b508      	push	{r3, lr}
   return !interruptIsUp( interrupt );
1a000878:	f7ff fff0 	bl	1a00085c <interruptIsUp>
}
1a00087c:	fab0 f080 	clz	r0, r0
1a000880:	0940      	lsrs	r0, r0, #5
1a000882:	bd08      	pop	{r3, pc}

1a000884 <interruptInitState>:

/*=====[Private functions definitions]=======================================*/

static interruptFsmState_t interruptInitState( interrupt_t* interrupt )
{
1a000884:	b508      	push	{r3, lr}
   if( interruptIsDown(interrupt) ){
1a000886:	f7ff fff6 	bl	1a000876 <interruptIsDown>
1a00088a:	b908      	cbnz	r0, 1a000890 <interruptInitState+0xc>
      return INTERRUPT_DOWN;
   }else{
      return INTERRUPT_UP;
1a00088c:	2000      	movs	r0, #0
   }
}
1a00088e:	bd08      	pop	{r3, pc}
      return INTERRUPT_DOWN;
1a000890:	2001      	movs	r0, #1
1a000892:	e7fc      	b.n	1a00088e <interruptInitState+0xa>

1a000894 <interruptFsmInit>:
{
1a000894:	b510      	push	{r4, lr}
1a000896:	4604      	mov	r4, r0
	interrupt->state = interruptInitState( interrupt );
1a000898:	f7ff fff4 	bl	1a000884 <interruptInitState>
1a00089c:	7420      	strb	r0, [r4, #16]
	interrupt->timeInSate = 0;
1a00089e:	2200      	movs	r2, #0
1a0008a0:	2300      	movs	r3, #0
1a0008a2:	e9c4 2306 	strd	r2, r3, [r4, #24]
	interrupt->flagUp = FALSE;
1a0008a6:	2300      	movs	r3, #0
1a0008a8:	7463      	strb	r3, [r4, #17]
	interrupt->flagDown = FALSE;
1a0008aa:	74a3      	strb	r3, [r4, #18]
	interrupt->flagFalling = FALSE;
1a0008ac:	74e3      	strb	r3, [r4, #19]
	interrupt->flagRising = FALSE;
1a0008ae:	7523      	strb	r3, [r4, #20]
}
1a0008b0:	bd10      	pop	{r4, pc}

1a0008b2 <interruptInit>:
{
1a0008b2:	b510      	push	{r4, lr}
1a0008b4:	4604      	mov	r4, r0
   interrupt->gpio = gpio;
1a0008b6:	6001      	str	r1, [r0, #0]
   interrupt->logic = logic;
1a0008b8:	7102      	strb	r2, [r0, #4]
   interrupt->refreshTime = refreshTime;
1a0008ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0008be:	e9c0 2302 	strd	r2, r3, [r0, #8]
   interruptFsmInit( interrupt );
1a0008c2:	f7ff ffe7 	bl	1a000894 <interruptFsmInit>
   interrupt->event = INTERRUPT_NO_EVENT;
1a0008c6:	2200      	movs	r2, #0
1a0008c8:	2300      	movs	r3, #0
1a0008ca:	e9c4 2308 	strd	r2, r3, [r4, #32]
   interrupt->checkDownEvent = checkDownEvent;
1a0008ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
1a0008d2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   interrupt->checkUpEvent = checkUpEvent;
1a0008d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
1a0008da:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   interrupt->checkHoldDownEvent = checkHoldDownEvent;
1a0008de:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0008e2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
   interrupt->holdDownTime = holdDownTime;
1a0008e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a0008ea:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   interrupt->downCallback = downCallback;
1a0008ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0008f0:	63a3      	str	r3, [r4, #56]	; 0x38
   interrupt->upCallback = upCallback;
1a0008f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0008f4:	63e3      	str	r3, [r4, #60]	; 0x3c
   interrupt->holdDownCallback = holdDownCallback;
1a0008f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0008f8:	6423      	str	r3, [r4, #64]	; 0x40
   interrupt->argDownCallback = argDownCallback;
1a0008fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0008fc:	6463      	str	r3, [r4, #68]	; 0x44
   interrupt->argUpCallback = argUpCallback;
1a0008fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000900:	64a3      	str	r3, [r4, #72]	; 0x48
   interrupt->argHoldDownCallback = argHoldDownCallback;
1a000902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a000904:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a000906:	bd10      	pop	{r4, pc}

1a000908 <interruptFsmUpdate>:
{   
1a000908:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
1a00090c:	4604      	mov	r4, r0
   interrupt->timeInSate += interrupt->refreshTime;
1a00090e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
1a000912:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
1a000916:	eb12 0b00 	adds.w	fp, r2, r0
1a00091a:	eb43 0c01 	adc.w	ip, r3, r1
1a00091e:	e9c4 bc06 	strd	fp, ip, [r4, #24]
   switch( interrupt->state ){
1a000922:	7c23      	ldrb	r3, [r4, #16]
1a000924:	2b03      	cmp	r3, #3
1a000926:	f200 8096 	bhi.w	1a000a56 <interruptFsmUpdate+0x14e>
1a00092a:	e8df f003 	tbb	[pc, r3]
1a00092e:	2002      	.short	0x2002
1a000930:	7351      	.short	0x7351
         if( interrupt->flagUp == FALSE ){
1a000932:	7c63      	ldrb	r3, [r4, #17]
1a000934:	b92b      	cbnz	r3, 1a000942 <interruptFsmUpdate+0x3a>
        	 interrupt->flagUp = TRUE;
1a000936:	2301      	movs	r3, #1
1a000938:	7463      	strb	r3, [r4, #17]
        	 interrupt->event = INTERRUPT_NO_EVENT;
1a00093a:	2200      	movs	r2, #0
1a00093c:	2300      	movs	r3, #0
1a00093e:	e9c4 2308 	strd	r2, r3, [r4, #32]
         if( interruptIsDown(interrupt) ){
1a000942:	4620      	mov	r0, r4
1a000944:	f7ff ff97 	bl	1a000876 <interruptIsDown>
1a000948:	b128      	cbz	r0, 1a000956 <interruptFsmUpdate+0x4e>
        	 interrupt->state = INTERRUPT_FALLING;
1a00094a:	2302      	movs	r3, #2
1a00094c:	7423      	strb	r3, [r4, #16]
        	 interrupt->timeInSate = 0;
1a00094e:	2200      	movs	r2, #0
1a000950:	2300      	movs	r3, #0
1a000952:	e9c4 2306 	strd	r2, r3, [r4, #24]
         if( interrupt->state != INTERRUPT_UP ){
1a000956:	7c23      	ldrb	r3, [r4, #16]
1a000958:	2b00      	cmp	r3, #0
1a00095a:	d07c      	beq.n	1a000a56 <interruptFsmUpdate+0x14e>
        	 interrupt->flagUp = FALSE;
1a00095c:	2300      	movs	r3, #0
1a00095e:	7463      	strb	r3, [r4, #17]
        	 interrupt->timeInSate = 0;
1a000960:	2200      	movs	r2, #0
1a000962:	2300      	movs	r3, #0
1a000964:	e9c4 2306 	strd	r2, r3, [r4, #24]
        	 interrupt->event = INTERRUPT_NO_EVENT;
1a000968:	e9c4 2308 	strd	r2, r3, [r4, #32]
1a00096c:	e073      	b.n	1a000a56 <interruptFsmUpdate+0x14e>
         if( interrupt->flagDown == FALSE ){
1a00096e:	7ca3      	ldrb	r3, [r4, #18]
1a000970:	b92b      	cbnz	r3, 1a00097e <interruptFsmUpdate+0x76>
        	 interrupt->flagDown = TRUE;
1a000972:	2301      	movs	r3, #1
1a000974:	74a3      	strb	r3, [r4, #18]
        	 interrupt->event = INTERRUPT_NO_EVENT;
1a000976:	2200      	movs	r2, #0
1a000978:	2300      	movs	r3, #0
1a00097a:	e9c4 2308 	strd	r2, r3, [r4, #32]
         if( interruptIsUp(interrupt) ){
1a00097e:	4620      	mov	r0, r4
1a000980:	f7ff ff6c 	bl	1a00085c <interruptIsUp>
1a000984:	b108      	cbz	r0, 1a00098a <interruptFsmUpdate+0x82>
        	 interrupt->state = INTERRUPT_RISING;
1a000986:	2303      	movs	r3, #3
1a000988:	7423      	strb	r3, [r4, #16]
         if( (interrupt->checkHoldDownEvent) &&
1a00098a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
1a00098e:	b19b      	cbz	r3, 1a0009b8 <interruptFsmUpdate+0xb0>
             (interrupt->timeInSate > interrupt->holdDownTime) ){
1a000990:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
1a000994:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
         if( (interrupt->checkHoldDownEvent) &&
1a000998:	4299      	cmp	r1, r3
1a00099a:	bf08      	it	eq
1a00099c:	4290      	cmpeq	r0, r2
1a00099e:	d20b      	bcs.n	1a0009b8 <interruptFsmUpdate+0xb0>
            if( interrupt->event == INTERRUPT_NO_EVENT ){
1a0009a0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
1a0009a4:	4313      	orrs	r3, r2
1a0009a6:	d107      	bne.n	1a0009b8 <interruptFsmUpdate+0xb0>
            	interrupt->event = INTERRUPT_HOLD_PRESED;
1a0009a8:	2203      	movs	r2, #3
1a0009aa:	2300      	movs	r3, #0
1a0009ac:	e9c4 2308 	strd	r2, r3, [r4, #32]
               if( (interrupt->holdDownCallback != NULL) ){
1a0009b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0009b2:	b10b      	cbz	r3, 1a0009b8 <interruptFsmUpdate+0xb0>
                  (*(interrupt->holdDownCallback))( interrupt->argHoldDownCallback );
1a0009b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
1a0009b6:	4798      	blx	r3
         if( interrupt->state != INTERRUPT_DOWN ){
1a0009b8:	7c23      	ldrb	r3, [r4, #16]
1a0009ba:	2b01      	cmp	r3, #1
1a0009bc:	d04b      	beq.n	1a000a56 <interruptFsmUpdate+0x14e>
        	 interrupt->flagDown = FALSE;
1a0009be:	2300      	movs	r3, #0
1a0009c0:	74a3      	strb	r3, [r4, #18]
        	 interrupt->timeInSate = 0;
1a0009c2:	2200      	movs	r2, #0
1a0009c4:	2300      	movs	r3, #0
1a0009c6:	e9c4 2306 	strd	r2, r3, [r4, #24]
        	 interrupt->event = INTERRUPT_NO_EVENT;
1a0009ca:	e9c4 2308 	strd	r2, r3, [r4, #32]
1a0009ce:	e042      	b.n	1a000a56 <interruptFsmUpdate+0x14e>
         if( interrupt->flagFalling == FALSE ){
1a0009d0:	7ce3      	ldrb	r3, [r4, #19]
1a0009d2:	b90b      	cbnz	r3, 1a0009d8 <interruptFsmUpdate+0xd0>
        	 interrupt->flagFalling = TRUE;
1a0009d4:	2301      	movs	r3, #1
1a0009d6:	74e3      	strb	r3, [r4, #19]
         if( interruptIsDown(interrupt) ){
1a0009d8:	4620      	mov	r0, r4
1a0009da:	f7ff ff4c 	bl	1a000876 <interruptIsDown>
1a0009de:	b168      	cbz	r0, 1a0009fc <interruptFsmUpdate+0xf4>
        	 interrupt->state = INTERRUPT_DOWN;
1a0009e0:	2301      	movs	r3, #1
1a0009e2:	7423      	strb	r3, [r4, #16]
            if( (interrupt->checkDownEvent) ){
1a0009e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
1a0009e8:	b153      	cbz	r3, 1a000a00 <interruptFsmUpdate+0xf8>
            	interrupt->event = INTERRUPT_PRESSED;
1a0009ea:	2201      	movs	r2, #1
1a0009ec:	2300      	movs	r3, #0
1a0009ee:	e9c4 2308 	strd	r2, r3, [r4, #32]
               if( (interrupt->downCallback != NULL) ){
1a0009f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0009f4:	b123      	cbz	r3, 1a000a00 <interruptFsmUpdate+0xf8>
                  (*(interrupt->downCallback))( interrupt->argDownCallback );
1a0009f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
1a0009f8:	4798      	blx	r3
1a0009fa:	e001      	b.n	1a000a00 <interruptFsmUpdate+0xf8>
        	 interrupt->state = INTERRUPT_UP;
1a0009fc:	2300      	movs	r3, #0
1a0009fe:	7423      	strb	r3, [r4, #16]
         if( interrupt->state != INTERRUPT_FALLING ){
1a000a00:	7c23      	ldrb	r3, [r4, #16]
1a000a02:	2b02      	cmp	r3, #2
1a000a04:	d027      	beq.n	1a000a56 <interruptFsmUpdate+0x14e>
        	 interrupt->flagFalling = FALSE;
1a000a06:	2300      	movs	r3, #0
1a000a08:	74e3      	strb	r3, [r4, #19]
        	 interrupt->timeInSate = 0;
1a000a0a:	2200      	movs	r2, #0
1a000a0c:	2300      	movs	r3, #0
1a000a0e:	e9c4 2306 	strd	r2, r3, [r4, #24]
1a000a12:	e020      	b.n	1a000a56 <interruptFsmUpdate+0x14e>
         if( interrupt->flagRising == FALSE ){
1a000a14:	7d23      	ldrb	r3, [r4, #20]
1a000a16:	b90b      	cbnz	r3, 1a000a1c <interruptFsmUpdate+0x114>
        	 interrupt->flagRising = TRUE;
1a000a18:	2301      	movs	r3, #1
1a000a1a:	7523      	strb	r3, [r4, #20]
         if( interruptIsUp(interrupt) ){
1a000a1c:	4620      	mov	r0, r4
1a000a1e:	f7ff ff1d 	bl	1a00085c <interruptIsUp>
1a000a22:	b168      	cbz	r0, 1a000a40 <interruptFsmUpdate+0x138>
        	 interrupt->state = INTERRUPT_UP;
1a000a24:	2300      	movs	r3, #0
1a000a26:	7423      	strb	r3, [r4, #16]
            if( (interrupt->checkUpEvent) ){
1a000a28:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
1a000a2c:	b153      	cbz	r3, 1a000a44 <interruptFsmUpdate+0x13c>
            	interrupt->event = INTERRUPT_RELEASED;
1a000a2e:	2202      	movs	r2, #2
1a000a30:	2300      	movs	r3, #0
1a000a32:	e9c4 2308 	strd	r2, r3, [r4, #32]
               if( (interrupt->upCallback != NULL) ){
1a000a36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000a38:	b123      	cbz	r3, 1a000a44 <interruptFsmUpdate+0x13c>
                  (*(interrupt->upCallback))( interrupt->argUpCallback );
1a000a3a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1a000a3c:	4798      	blx	r3
1a000a3e:	e001      	b.n	1a000a44 <interruptFsmUpdate+0x13c>
        	 interrupt->state = INTERRUPT_DOWN;
1a000a40:	2301      	movs	r3, #1
1a000a42:	7423      	strb	r3, [r4, #16]
         if( interrupt->state != INTERRUPT_RISING ){
1a000a44:	7c23      	ldrb	r3, [r4, #16]
1a000a46:	2b03      	cmp	r3, #3
1a000a48:	d005      	beq.n	1a000a56 <interruptFsmUpdate+0x14e>
        	 interrupt->flagRising = FALSE;
1a000a4a:	2300      	movs	r3, #0
1a000a4c:	7523      	strb	r3, [r4, #20]
        	 interrupt->timeInSate = 0;
1a000a4e:	2200      	movs	r2, #0
1a000a50:	2300      	movs	r3, #0
1a000a52:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
1a000a56:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}

1a000a5a <i2cWrite2>:


bool_t i2cWrite2(uint8_t  i2cSlaveAddress,
				 uint8_t  cmnd,
				 uint8_t  data )
{
1a000a5a:	b500      	push	{lr}
1a000a5c:	b085      	sub	sp, #20
	uint8_t cmndData[5];

	cmndData[0] = cmnd;
1a000a5e:	f88d 1008 	strb.w	r1, [sp, #8]
	cmndData[1] = data;
1a000a62:	f88d 2009 	strb.w	r2, [sp, #9]
	cmndData[2] = 0;
1a000a66:	2300      	movs	r3, #0
1a000a68:	f88d 300a 	strb.w	r3, [sp, #10]
	cmndData[3] = 0;
1a000a6c:	f88d 300b 	strb.w	r3, [sp, #11]
	cmndData[4] = 0;
1a000a70:	f88d 300c 	strb.w	r3, [sp, #12]

	if ( cmnd == 0x64 && data == 0 ) return 1;
1a000a74:	2964      	cmp	r1, #100	; 0x64
1a000a76:	d100      	bne.n	1a000a7a <i2cWrite2+0x20>
1a000a78:	b152      	cbz	r2, 1a000a90 <i2cWrite2+0x36>
1a000a7a:	4601      	mov	r1, r0

	return i2cWrite( I2C0, i2cSlaveAddress, cmndData, 5, TRUE );
1a000a7c:	2301      	movs	r3, #1
1a000a7e:	9300      	str	r3, [sp, #0]
1a000a80:	2305      	movs	r3, #5
1a000a82:	aa02      	add	r2, sp, #8
1a000a84:	2000      	movs	r0, #0
1a000a86:	f003 fb74 	bl	1a004172 <i2cWrite>

}
1a000a8a:	b005      	add	sp, #20
1a000a8c:	f85d fb04 	ldr.w	pc, [sp], #4
	if ( cmnd == 0x64 && data == 0 ) return 1;
1a000a90:	2001      	movs	r0, #1
1a000a92:	e7fa      	b.n	1a000a8a <i2cWrite2+0x30>

1a000a94 <LCD_I2C_CLEAR>:
void LCD_I2C_CLEAR(uint8_t lcd_add){
1a000a94:	b508      	push	{r3, lr}
	stringLcd[0] = lcd_add;
1a000a96:	4906      	ldr	r1, [pc, #24]	; (1a000ab0 <LCD_I2C_CLEAR+0x1c>)
1a000a98:	7008      	strb	r0, [r1, #0]
	stringLcd[1] = 0x61;
1a000a9a:	2361      	movs	r3, #97	; 0x61
1a000a9c:	704b      	strb	r3, [r1, #1]
	stringLcd[2] = 0;
1a000a9e:	2300      	movs	r3, #0
1a000aa0:	708b      	strb	r3, [r1, #2]
	xQueueSend( myQueueLcdCommandHandle, (void*)stringLcd,  (TickType_t) 1);
1a000aa2:	2201      	movs	r2, #1
1a000aa4:	4803      	ldr	r0, [pc, #12]	; (1a000ab4 <LCD_I2C_CLEAR+0x20>)
1a000aa6:	6800      	ldr	r0, [r0, #0]
1a000aa8:	f000 fc70 	bl	1a00138c <xQueueGenericSend>
};
1a000aac:	bd08      	pop	{r3, pc}
1a000aae:	bf00      	nop
1a000ab0:	10000100 	.word	0x10000100
1a000ab4:	100000d4 	.word	0x100000d4

1a000ab8 <LCD_I2C_SET_ADDRESS_1234>:
	stringLcd[0] = lcd_add;
	stringLcd[1] = 0x62;
	stringLcd[2] = 0;
	xQueueSend( myQueueLcdCommandHandle, (void*)stringLcd,  (TickType_t) 1);
};
void LCD_I2C_SET_ADDRESS_1234(uint8_t lcd_add, uint8_t chr_add){
1a000ab8:	b510      	push	{r4, lr}
	stringLcd[0] = lcd_add;
1a000aba:	4c07      	ldr	r4, [pc, #28]	; (1a000ad8 <LCD_I2C_SET_ADDRESS_1234+0x20>)
1a000abc:	7020      	strb	r0, [r4, #0]
	stringLcd[1] = 0x63;
1a000abe:	2363      	movs	r3, #99	; 0x63
1a000ac0:	7063      	strb	r3, [r4, #1]
	stringLcd[2] = chr_add;
1a000ac2:	70a1      	strb	r1, [r4, #2]
	stringLcd[3] = 0;
1a000ac4:	2300      	movs	r3, #0
1a000ac6:	70e3      	strb	r3, [r4, #3]
	xQueueSend( myQueueLcdCommandHandle, (void*)stringLcd,  (TickType_t) 1);
1a000ac8:	2201      	movs	r2, #1
1a000aca:	4621      	mov	r1, r4
1a000acc:	4803      	ldr	r0, [pc, #12]	; (1a000adc <LCD_I2C_SET_ADDRESS_1234+0x24>)
1a000ace:	6800      	ldr	r0, [r0, #0]
1a000ad0:	f000 fc5c 	bl	1a00138c <xQueueGenericSend>
};
1a000ad4:	bd10      	pop	{r4, pc}
1a000ad6:	bf00      	nop
1a000ad8:	10000100 	.word	0x10000100
1a000adc:	100000d4 	.word	0x100000d4

1a000ae0 <LCD_I2C_SETUP>:
	stringLcd[0] = lcd_add;
	stringLcd[1] = 0x84;
	stringLcd[2] = 0;
	xQueueSend( myQueueLcdCommandHandle, (void*)stringLcd,  (TickType_t) 1);
};
void LCD_I2C_SETUP(uint8_t lcd_add){
1a000ae0:	b508      	push	{r3, lr}
	stringLcd[0] = lcd_add;
1a000ae2:	4906      	ldr	r1, [pc, #24]	; (1a000afc <LCD_I2C_SETUP+0x1c>)
1a000ae4:	7008      	strb	r0, [r1, #0]
	stringLcd[1] = 0x85;
1a000ae6:	2385      	movs	r3, #133	; 0x85
1a000ae8:	704b      	strb	r3, [r1, #1]
	stringLcd[2] = 0;
1a000aea:	2300      	movs	r3, #0
1a000aec:	708b      	strb	r3, [r1, #2]
	xQueueSend( myQueueLcdCommandHandle, (void*)stringLcd,  (TickType_t) 1);
1a000aee:	2201      	movs	r2, #1
1a000af0:	4803      	ldr	r0, [pc, #12]	; (1a000b00 <LCD_I2C_SETUP+0x20>)
1a000af2:	6800      	ldr	r0, [r0, #0]
1a000af4:	f000 fc4a 	bl	1a00138c <xQueueGenericSend>
};
1a000af8:	bd08      	pop	{r3, pc}
1a000afa:	bf00      	nop
1a000afc:	10000100 	.word	0x10000100
1a000b00:	100000d4 	.word	0x100000d4

1a000b04 <LCD_I2C_WRITE_DATA_1234_STRING>:

void LCD_I2C_WRITE_DATA_1234_STRING( uint8_t lcd_add, uint8_t lcd_String[]){
1a000b04:	b508      	push	{r3, lr}
	stringLcd[0] = lcd_add;
1a000b06:	4b12      	ldr	r3, [pc, #72]	; (1a000b50 <LCD_I2C_WRITE_DATA_1234_STRING+0x4c>)
1a000b08:	7018      	strb	r0, [r3, #0]
	stringLcd[1] = 0x64;
1a000b0a:	2264      	movs	r2, #100	; 0x64
1a000b0c:	705a      	strb	r2, [r3, #1]
	uint8_t i = 0;
	for ( i = 2; i < 22; i++ ) stringLcd[i] = 0;
1a000b0e:	2302      	movs	r3, #2
1a000b10:	e004      	b.n	1a000b1c <LCD_I2C_WRITE_DATA_1234_STRING+0x18>
1a000b12:	4a0f      	ldr	r2, [pc, #60]	; (1a000b50 <LCD_I2C_WRITE_DATA_1234_STRING+0x4c>)
1a000b14:	2000      	movs	r0, #0
1a000b16:	54d0      	strb	r0, [r2, r3]
1a000b18:	3301      	adds	r3, #1
1a000b1a:	b2db      	uxtb	r3, r3
1a000b1c:	2b15      	cmp	r3, #21
1a000b1e:	d9f8      	bls.n	1a000b12 <LCD_I2C_WRITE_DATA_1234_STRING+0xe>
	i = 2;
1a000b20:	2302      	movs	r3, #2
1a000b22:	e003      	b.n	1a000b2c <LCD_I2C_WRITE_DATA_1234_STRING+0x28>
	while( ( i < 22) && ( lcd_String[i-2] != ';' ) && ( lcd_String[i-2] != 0 ) ){
		stringLcd[i] = lcd_String[i-2];
1a000b24:	480a      	ldr	r0, [pc, #40]	; (1a000b50 <LCD_I2C_WRITE_DATA_1234_STRING+0x4c>)
1a000b26:	54c2      	strb	r2, [r0, r3]
		i++;
1a000b28:	3301      	adds	r3, #1
1a000b2a:	b2db      	uxtb	r3, r3
	while( ( i < 22) && ( lcd_String[i-2] != ';' ) && ( lcd_String[i-2] != 0 ) ){
1a000b2c:	2b15      	cmp	r3, #21
1a000b2e:	d806      	bhi.n	1a000b3e <LCD_I2C_WRITE_DATA_1234_STRING+0x3a>
1a000b30:	18ca      	adds	r2, r1, r3
1a000b32:	f812 2c02 	ldrb.w	r2, [r2, #-2]
1a000b36:	2a3b      	cmp	r2, #59	; 0x3b
1a000b38:	d001      	beq.n	1a000b3e <LCD_I2C_WRITE_DATA_1234_STRING+0x3a>
1a000b3a:	2a00      	cmp	r2, #0
1a000b3c:	d1f2      	bne.n	1a000b24 <LCD_I2C_WRITE_DATA_1234_STRING+0x20>
	};

	xQueueSend( myQueueLcdCommandHandle, (void*)stringLcd,  (TickType_t) 1);
1a000b3e:	2300      	movs	r3, #0
1a000b40:	2201      	movs	r2, #1
1a000b42:	4903      	ldr	r1, [pc, #12]	; (1a000b50 <LCD_I2C_WRITE_DATA_1234_STRING+0x4c>)
1a000b44:	4803      	ldr	r0, [pc, #12]	; (1a000b54 <LCD_I2C_WRITE_DATA_1234_STRING+0x50>)
1a000b46:	6800      	ldr	r0, [r0, #0]
1a000b48:	f000 fc20 	bl	1a00138c <xQueueGenericSend>

}
1a000b4c:	bd08      	pop	{r3, pc}
1a000b4e:	bf00      	nop
1a000b50:	10000100 	.word	0x10000100
1a000b54:	100000d4 	.word	0x100000d4

1a000b58 <BIN16_A_DIGITAL5>:
void BIN16_A_DIGITAL5(uint8_t HADD, uint8_t LADD){
//Si, si. Ya sé Eric. Podria haber hecho directamente que tome un uint16_t pero pienso volver a usar este código y me gusta así

//convierte un uint_16 formando por dos mitades uint8_t en dígitos ascii que guarta en el arreglo NUM[5]

	NUM[0] = 0; NUM[1] = 0; NUM[2] = 0; NUM[3] = 0; NUM[4] = 0;
1a000b58:	4b84      	ldr	r3, [pc, #528]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000b5a:	2200      	movs	r2, #0
1a000b5c:	701a      	strb	r2, [r3, #0]
1a000b5e:	705a      	strb	r2, [r3, #1]
1a000b60:	709a      	strb	r2, [r3, #2]
1a000b62:	70da      	strb	r2, [r3, #3]
1a000b64:	711a      	strb	r2, [r3, #4]

	//BLOQUE DE PASAR DE BINARIO A GRUPOS DE UNIDADES, DECENAS, CENTENAS, MILES. ETC
	if (LADD & 0b00000001){ NUM[0] +=1; }//1
1a000b66:	f011 0f01 	tst.w	r1, #1
1a000b6a:	d001      	beq.n	1a000b70 <BIN16_A_DIGITAL5+0x18>
1a000b6c:	2201      	movs	r2, #1
1a000b6e:	701a      	strb	r2, [r3, #0]
	if (LADD & 0b00000010){ NUM[0] +=2; }//2
1a000b70:	f011 0f02 	tst.w	r1, #2
1a000b74:	d003      	beq.n	1a000b7e <BIN16_A_DIGITAL5+0x26>
1a000b76:	4a7d      	ldr	r2, [pc, #500]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000b78:	7813      	ldrb	r3, [r2, #0]
1a000b7a:	3302      	adds	r3, #2
1a000b7c:	7013      	strb	r3, [r2, #0]
	if (LADD & 0b00000100){ NUM[0] +=4; }//4
1a000b7e:	f011 0f04 	tst.w	r1, #4
1a000b82:	d003      	beq.n	1a000b8c <BIN16_A_DIGITAL5+0x34>
1a000b84:	4a79      	ldr	r2, [pc, #484]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000b86:	7813      	ldrb	r3, [r2, #0]
1a000b88:	3304      	adds	r3, #4
1a000b8a:	7013      	strb	r3, [r2, #0]
	if (LADD & 0b00001000){ NUM[0] +=8; }//8
1a000b8c:	f011 0f08 	tst.w	r1, #8
1a000b90:	d003      	beq.n	1a000b9a <BIN16_A_DIGITAL5+0x42>
1a000b92:	4a76      	ldr	r2, [pc, #472]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000b94:	7813      	ldrb	r3, [r2, #0]
1a000b96:	3308      	adds	r3, #8
1a000b98:	7013      	strb	r3, [r2, #0]
	if (LADD & 0b00010000){ NUM[0] +=6; NUM[1] += 1; }//16
1a000b9a:	f011 0f10 	tst.w	r1, #16
1a000b9e:	d005      	beq.n	1a000bac <BIN16_A_DIGITAL5+0x54>
1a000ba0:	4b72      	ldr	r3, [pc, #456]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000ba2:	781a      	ldrb	r2, [r3, #0]
1a000ba4:	3206      	adds	r2, #6
1a000ba6:	701a      	strb	r2, [r3, #0]
1a000ba8:	2201      	movs	r2, #1
1a000baa:	705a      	strb	r2, [r3, #1]
	if (LADD & 0b00100000){ NUM[0] +=2; NUM[1] += 3; }//32
1a000bac:	f011 0f20 	tst.w	r1, #32
1a000bb0:	d006      	beq.n	1a000bc0 <BIN16_A_DIGITAL5+0x68>
1a000bb2:	4b6e      	ldr	r3, [pc, #440]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000bb4:	781a      	ldrb	r2, [r3, #0]
1a000bb6:	3202      	adds	r2, #2
1a000bb8:	701a      	strb	r2, [r3, #0]
1a000bba:	785a      	ldrb	r2, [r3, #1]
1a000bbc:	3203      	adds	r2, #3
1a000bbe:	705a      	strb	r2, [r3, #1]
	if (LADD & 0b01000000){ NUM[0] +=4; NUM[1] += 6; }//64
1a000bc0:	f011 0f40 	tst.w	r1, #64	; 0x40
1a000bc4:	d006      	beq.n	1a000bd4 <BIN16_A_DIGITAL5+0x7c>
1a000bc6:	4b69      	ldr	r3, [pc, #420]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000bc8:	781a      	ldrb	r2, [r3, #0]
1a000bca:	3204      	adds	r2, #4
1a000bcc:	701a      	strb	r2, [r3, #0]
1a000bce:	785a      	ldrb	r2, [r3, #1]
1a000bd0:	3206      	adds	r2, #6
1a000bd2:	705a      	strb	r2, [r3, #1]
	if (LADD & 0b10000000){ NUM[0] +=8; NUM[1] += 2; NUM[2] += 1; }//128
1a000bd4:	f011 0f80 	tst.w	r1, #128	; 0x80
1a000bd8:	d173      	bne.n	1a000cc2 <BIN16_A_DIGITAL5+0x16a>

	if (HADD & 0b00000001){ NUM[0] +=6; NUM[1] += 5; NUM[2] += 2; }//256
1a000bda:	f010 0f01 	tst.w	r0, #1
1a000bde:	d009      	beq.n	1a000bf4 <BIN16_A_DIGITAL5+0x9c>
1a000be0:	4b62      	ldr	r3, [pc, #392]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000be2:	781a      	ldrb	r2, [r3, #0]
1a000be4:	3206      	adds	r2, #6
1a000be6:	701a      	strb	r2, [r3, #0]
1a000be8:	785a      	ldrb	r2, [r3, #1]
1a000bea:	3205      	adds	r2, #5
1a000bec:	705a      	strb	r2, [r3, #1]
1a000bee:	789a      	ldrb	r2, [r3, #2]
1a000bf0:	3202      	adds	r2, #2
1a000bf2:	709a      	strb	r2, [r3, #2]
	if (HADD & 0b00000010){ NUM[0] +=2; NUM[1] += 1; NUM[2] += 5; }//512
1a000bf4:	f010 0f02 	tst.w	r0, #2
1a000bf8:	d009      	beq.n	1a000c0e <BIN16_A_DIGITAL5+0xb6>
1a000bfa:	4b5c      	ldr	r3, [pc, #368]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000bfc:	781a      	ldrb	r2, [r3, #0]
1a000bfe:	3202      	adds	r2, #2
1a000c00:	701a      	strb	r2, [r3, #0]
1a000c02:	785a      	ldrb	r2, [r3, #1]
1a000c04:	3201      	adds	r2, #1
1a000c06:	705a      	strb	r2, [r3, #1]
1a000c08:	789a      	ldrb	r2, [r3, #2]
1a000c0a:	3205      	adds	r2, #5
1a000c0c:	709a      	strb	r2, [r3, #2]
	if (HADD & 0b00000100){ NUM[0] +=4; NUM[1] += 2; NUM[2] += 0; NUM[3] += 1; }//1024
1a000c0e:	f010 0f04 	tst.w	r0, #4
1a000c12:	d008      	beq.n	1a000c26 <BIN16_A_DIGITAL5+0xce>
1a000c14:	4b55      	ldr	r3, [pc, #340]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000c16:	781a      	ldrb	r2, [r3, #0]
1a000c18:	3204      	adds	r2, #4
1a000c1a:	701a      	strb	r2, [r3, #0]
1a000c1c:	785a      	ldrb	r2, [r3, #1]
1a000c1e:	3202      	adds	r2, #2
1a000c20:	705a      	strb	r2, [r3, #1]
1a000c22:	2201      	movs	r2, #1
1a000c24:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b00001000){ NUM[0] +=8; NUM[1] += 4; NUM[2] += 0; NUM[3] += 2; }//2048
1a000c26:	f010 0f08 	tst.w	r0, #8
1a000c2a:	d009      	beq.n	1a000c40 <BIN16_A_DIGITAL5+0xe8>
1a000c2c:	4b4f      	ldr	r3, [pc, #316]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000c2e:	781a      	ldrb	r2, [r3, #0]
1a000c30:	3208      	adds	r2, #8
1a000c32:	701a      	strb	r2, [r3, #0]
1a000c34:	785a      	ldrb	r2, [r3, #1]
1a000c36:	3204      	adds	r2, #4
1a000c38:	705a      	strb	r2, [r3, #1]
1a000c3a:	78da      	ldrb	r2, [r3, #3]
1a000c3c:	3202      	adds	r2, #2
1a000c3e:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b00010000){ NUM[0] +=6; NUM[1] += 9; NUM[2] += 0; NUM[3] += 4; }//4096
1a000c40:	f010 0f10 	tst.w	r0, #16
1a000c44:	d009      	beq.n	1a000c5a <BIN16_A_DIGITAL5+0x102>
1a000c46:	4b49      	ldr	r3, [pc, #292]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000c48:	781a      	ldrb	r2, [r3, #0]
1a000c4a:	3206      	adds	r2, #6
1a000c4c:	701a      	strb	r2, [r3, #0]
1a000c4e:	785a      	ldrb	r2, [r3, #1]
1a000c50:	3209      	adds	r2, #9
1a000c52:	705a      	strb	r2, [r3, #1]
1a000c54:	78da      	ldrb	r2, [r3, #3]
1a000c56:	3204      	adds	r2, #4
1a000c58:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b00100000){ NUM[0] +=2; NUM[1] += 9; NUM[2] += 1; NUM[3] += 8; }//8192
1a000c5a:	f010 0f20 	tst.w	r0, #32
1a000c5e:	d00c      	beq.n	1a000c7a <BIN16_A_DIGITAL5+0x122>
1a000c60:	4b42      	ldr	r3, [pc, #264]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000c62:	781a      	ldrb	r2, [r3, #0]
1a000c64:	3202      	adds	r2, #2
1a000c66:	701a      	strb	r2, [r3, #0]
1a000c68:	785a      	ldrb	r2, [r3, #1]
1a000c6a:	3209      	adds	r2, #9
1a000c6c:	705a      	strb	r2, [r3, #1]
1a000c6e:	789a      	ldrb	r2, [r3, #2]
1a000c70:	3201      	adds	r2, #1
1a000c72:	709a      	strb	r2, [r3, #2]
1a000c74:	78da      	ldrb	r2, [r3, #3]
1a000c76:	3208      	adds	r2, #8
1a000c78:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b01000000){ NUM[0] +=4; NUM[1] += 8; NUM[2] += 3; NUM[3] += 6; NUM[4] += 1; }//16384
1a000c7a:	f010 0f40 	tst.w	r0, #64	; 0x40
1a000c7e:	d00e      	beq.n	1a000c9e <BIN16_A_DIGITAL5+0x146>
1a000c80:	4b3a      	ldr	r3, [pc, #232]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000c82:	781a      	ldrb	r2, [r3, #0]
1a000c84:	3204      	adds	r2, #4
1a000c86:	701a      	strb	r2, [r3, #0]
1a000c88:	785a      	ldrb	r2, [r3, #1]
1a000c8a:	3208      	adds	r2, #8
1a000c8c:	705a      	strb	r2, [r3, #1]
1a000c8e:	789a      	ldrb	r2, [r3, #2]
1a000c90:	3203      	adds	r2, #3
1a000c92:	709a      	strb	r2, [r3, #2]
1a000c94:	78da      	ldrb	r2, [r3, #3]
1a000c96:	3206      	adds	r2, #6
1a000c98:	70da      	strb	r2, [r3, #3]
1a000c9a:	2201      	movs	r2, #1
1a000c9c:	711a      	strb	r2, [r3, #4]
	if (HADD & 0b10000000){ NUM[0] +=8; NUM[1] += 6; NUM[2] += 7; NUM[3] += 2; NUM[4] += 3; }//32768
1a000c9e:	f010 0f80 	tst.w	r0, #128	; 0x80
1a000ca2:	d118      	bne.n	1a000cd6 <BIN16_A_DIGITAL5+0x17e>
	//BLOQUE DE PASAR DE GRUPOS DE UNIDADES, DECENAS, CENTENAS Y MILES
	//A UNIDADES DE: UNIDAD, DECENA, CENTENA, MIL, DIEZ MIL, ETC.
	while(NUM[0] >= 0) { NUM[0] -= 10; if ( NUM[0] >= 0 ) NUM[1] += 1;} NUM[0] += 10;
1a000ca4:	4b31      	ldr	r3, [pc, #196]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000ca6:	f993 3000 	ldrsb.w	r3, [r3]
1a000caa:	2b00      	cmp	r3, #0
1a000cac:	db24      	blt.n	1a000cf8 <BIN16_A_DIGITAL5+0x1a0>
1a000cae:	3b0a      	subs	r3, #10
1a000cb0:	b25b      	sxtb	r3, r3
1a000cb2:	4a2e      	ldr	r2, [pc, #184]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000cb4:	7013      	strb	r3, [r2, #0]
1a000cb6:	2b00      	cmp	r3, #0
1a000cb8:	dbf4      	blt.n	1a000ca4 <BIN16_A_DIGITAL5+0x14c>
1a000cba:	7853      	ldrb	r3, [r2, #1]
1a000cbc:	3301      	adds	r3, #1
1a000cbe:	7053      	strb	r3, [r2, #1]
1a000cc0:	e7f0      	b.n	1a000ca4 <BIN16_A_DIGITAL5+0x14c>
	if (LADD & 0b10000000){ NUM[0] +=8; NUM[1] += 2; NUM[2] += 1; }//128
1a000cc2:	4b2a      	ldr	r3, [pc, #168]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000cc4:	781a      	ldrb	r2, [r3, #0]
1a000cc6:	3208      	adds	r2, #8
1a000cc8:	701a      	strb	r2, [r3, #0]
1a000cca:	785a      	ldrb	r2, [r3, #1]
1a000ccc:	3202      	adds	r2, #2
1a000cce:	705a      	strb	r2, [r3, #1]
1a000cd0:	2201      	movs	r2, #1
1a000cd2:	709a      	strb	r2, [r3, #2]
1a000cd4:	e781      	b.n	1a000bda <BIN16_A_DIGITAL5+0x82>
	if (HADD & 0b10000000){ NUM[0] +=8; NUM[1] += 6; NUM[2] += 7; NUM[3] += 2; NUM[4] += 3; }//32768
1a000cd6:	4b25      	ldr	r3, [pc, #148]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000cd8:	781a      	ldrb	r2, [r3, #0]
1a000cda:	3208      	adds	r2, #8
1a000cdc:	701a      	strb	r2, [r3, #0]
1a000cde:	785a      	ldrb	r2, [r3, #1]
1a000ce0:	3206      	adds	r2, #6
1a000ce2:	705a      	strb	r2, [r3, #1]
1a000ce4:	789a      	ldrb	r2, [r3, #2]
1a000ce6:	3207      	adds	r2, #7
1a000ce8:	709a      	strb	r2, [r3, #2]
1a000cea:	78da      	ldrb	r2, [r3, #3]
1a000cec:	3202      	adds	r2, #2
1a000cee:	70da      	strb	r2, [r3, #3]
1a000cf0:	791a      	ldrb	r2, [r3, #4]
1a000cf2:	3203      	adds	r2, #3
1a000cf4:	711a      	strb	r2, [r3, #4]
1a000cf6:	e7d5      	b.n	1a000ca4 <BIN16_A_DIGITAL5+0x14c>
	while(NUM[0] >= 0) { NUM[0] -= 10; if ( NUM[0] >= 0 ) NUM[1] += 1;} NUM[0] += 10;
1a000cf8:	330a      	adds	r3, #10
1a000cfa:	4a1c      	ldr	r2, [pc, #112]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000cfc:	7013      	strb	r3, [r2, #0]
	while(NUM[1] >= 0) { NUM[1] -= 10; if ( NUM[1] >= 0 ) NUM[2] += 1;} NUM[1] += 10;
1a000cfe:	4b1b      	ldr	r3, [pc, #108]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000d00:	f993 3001 	ldrsb.w	r3, [r3, #1]
1a000d04:	2b00      	cmp	r3, #0
1a000d06:	db09      	blt.n	1a000d1c <BIN16_A_DIGITAL5+0x1c4>
1a000d08:	3b0a      	subs	r3, #10
1a000d0a:	b25b      	sxtb	r3, r3
1a000d0c:	4a17      	ldr	r2, [pc, #92]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000d0e:	7053      	strb	r3, [r2, #1]
1a000d10:	2b00      	cmp	r3, #0
1a000d12:	dbf4      	blt.n	1a000cfe <BIN16_A_DIGITAL5+0x1a6>
1a000d14:	7893      	ldrb	r3, [r2, #2]
1a000d16:	3301      	adds	r3, #1
1a000d18:	7093      	strb	r3, [r2, #2]
1a000d1a:	e7f0      	b.n	1a000cfe <BIN16_A_DIGITAL5+0x1a6>
1a000d1c:	330a      	adds	r3, #10
1a000d1e:	4a13      	ldr	r2, [pc, #76]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000d20:	7053      	strb	r3, [r2, #1]
	while(NUM[2] >= 0) { NUM[2] -= 10; if ( NUM[2] >= 0 ) NUM[3] += 1;} NUM[2] += 10;
1a000d22:	4b12      	ldr	r3, [pc, #72]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000d24:	f993 3002 	ldrsb.w	r3, [r3, #2]
1a000d28:	2b00      	cmp	r3, #0
1a000d2a:	db09      	blt.n	1a000d40 <BIN16_A_DIGITAL5+0x1e8>
1a000d2c:	3b0a      	subs	r3, #10
1a000d2e:	b25b      	sxtb	r3, r3
1a000d30:	4a0e      	ldr	r2, [pc, #56]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000d32:	7093      	strb	r3, [r2, #2]
1a000d34:	2b00      	cmp	r3, #0
1a000d36:	dbf4      	blt.n	1a000d22 <BIN16_A_DIGITAL5+0x1ca>
1a000d38:	78d3      	ldrb	r3, [r2, #3]
1a000d3a:	3301      	adds	r3, #1
1a000d3c:	70d3      	strb	r3, [r2, #3]
1a000d3e:	e7f0      	b.n	1a000d22 <BIN16_A_DIGITAL5+0x1ca>
1a000d40:	330a      	adds	r3, #10
1a000d42:	4a0a      	ldr	r2, [pc, #40]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000d44:	7093      	strb	r3, [r2, #2]
	while(NUM[3] >= 0) { NUM[3] -= 10; if ( NUM[3] >= 0 ) NUM[4] += 1;} NUM[3] += 10;
1a000d46:	4b09      	ldr	r3, [pc, #36]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000d48:	f993 3003 	ldrsb.w	r3, [r3, #3]
1a000d4c:	2b00      	cmp	r3, #0
1a000d4e:	db09      	blt.n	1a000d64 <BIN16_A_DIGITAL5+0x20c>
1a000d50:	3b0a      	subs	r3, #10
1a000d52:	b25b      	sxtb	r3, r3
1a000d54:	4a05      	ldr	r2, [pc, #20]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000d56:	70d3      	strb	r3, [r2, #3]
1a000d58:	2b00      	cmp	r3, #0
1a000d5a:	dbf4      	blt.n	1a000d46 <BIN16_A_DIGITAL5+0x1ee>
1a000d5c:	7913      	ldrb	r3, [r2, #4]
1a000d5e:	3301      	adds	r3, #1
1a000d60:	7113      	strb	r3, [r2, #4]
1a000d62:	e7f0      	b.n	1a000d46 <BIN16_A_DIGITAL5+0x1ee>
1a000d64:	330a      	adds	r3, #10
1a000d66:	4a01      	ldr	r2, [pc, #4]	; (1a000d6c <BIN16_A_DIGITAL5+0x214>)
1a000d68:	70d3      	strb	r3, [r2, #3]

}
1a000d6a:	4770      	bx	lr
1a000d6c:	100000f8 	.word	0x100000f8

1a000d70 <FLOAT_A_DIGITAL5>:
void FLOAT_A_DIGITAL5(float x){
1a000d70:	b508      	push	{r3, lr}
	if( y < 0 )	y = -y;
1a000d72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
1a000d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000d7a:	d40d      	bmi.n	1a000d98 <FLOAT_A_DIGITAL5+0x28>
	unionX.x = (uint16_t) ( 100 * y );
1a000d7c:	eddf 7a08 	vldr	s15, [pc, #32]	; 1a000da0 <FLOAT_A_DIGITAL5+0x30>
1a000d80:	ee20 0a27 	vmul.f32	s0, s0, s15
1a000d84:	eebc 0ac0 	vcvt.u32.f32	s0, s0
1a000d88:	ee10 3a10 	vmov	r3, s0
1a000d8c:	b298      	uxth	r0, r3
	BIN16_A_DIGITAL5(unionX.sector[1], unionX.sector[0]);	//CONVIERTE HADD Y LADD A NUM[4] -> NUM[0]
1a000d8e:	b2c1      	uxtb	r1, r0
1a000d90:	0a00      	lsrs	r0, r0, #8
1a000d92:	f7ff fee1 	bl	1a000b58 <BIN16_A_DIGITAL5>
}
1a000d96:	bd08      	pop	{r3, pc}
	if( y < 0 )	y = -y;
1a000d98:	eeb1 0a40 	vneg.f32	s0, s0
1a000d9c:	e7ee      	b.n	1a000d7c <FLOAT_A_DIGITAL5+0xc>
1a000d9e:	bf00      	nop
1a000da0:	42c80000 	.word	0x42c80000

1a000da4 <FLOAT_A_LCD>:
void FLOAT_A_LCD( float x){
1a000da4:	b510      	push	{r4, lr}
1a000da6:	ed2d 8b02 	vpush	{d8}
1a000daa:	b084      	sub	sp, #16
1a000dac:	eeb0 8a40 	vmov.f32	s16, s0
	FLOAT_A_DIGITAL5( x );
1a000db0:	f7ff ffde 	bl	1a000d70 <FLOAT_A_DIGITAL5>
	for( j=0; j<10; j++ ){ miNumero[ j ] = 0; };
1a000db4:	2300      	movs	r3, #0
1a000db6:	e006      	b.n	1a000dc6 <FLOAT_A_LCD+0x22>
1a000db8:	aa04      	add	r2, sp, #16
1a000dba:	441a      	add	r2, r3
1a000dbc:	2100      	movs	r1, #0
1a000dbe:	f802 1c0c 	strb.w	r1, [r2, #-12]
1a000dc2:	3301      	adds	r3, #1
1a000dc4:	b2db      	uxtb	r3, r3
1a000dc6:	2b09      	cmp	r3, #9
1a000dc8:	d9f6      	bls.n	1a000db8 <FLOAT_A_LCD+0x14>
	if ( x   <  0   ) { miNumero[0] = '-'; j++; };
1a000dca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
1a000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000dd2:	d43d      	bmi.n	1a000e50 <FLOAT_A_LCD+0xac>
	j = 0;
1a000dd4:	2300      	movs	r3, #0
	if ( NUM[4] > 0 ) { miNumero[j] = NUM[4] + 48; j++; };
1a000dd6:	4a3e      	ldr	r2, [pc, #248]	; (1a000ed0 <FLOAT_A_LCD+0x12c>)
1a000dd8:	f992 2004 	ldrsb.w	r2, [r2, #4]
1a000ddc:	2a00      	cmp	r2, #0
1a000dde:	dd07      	ble.n	1a000df0 <FLOAT_A_LCD+0x4c>
1a000de0:	b2d2      	uxtb	r2, r2
1a000de2:	3230      	adds	r2, #48	; 0x30
1a000de4:	a904      	add	r1, sp, #16
1a000de6:	4419      	add	r1, r3
1a000de8:	f801 2c0c 	strb.w	r2, [r1, #-12]
1a000dec:	3301      	adds	r3, #1
1a000dee:	b2db      	uxtb	r3, r3
	if ( NUM[3] > 0 ) { miNumero[j] = NUM[3] + 48; j++; };
1a000df0:	4a37      	ldr	r2, [pc, #220]	; (1a000ed0 <FLOAT_A_LCD+0x12c>)
1a000df2:	f992 2003 	ldrsb.w	r2, [r2, #3]
1a000df6:	2a00      	cmp	r2, #0
1a000df8:	dd07      	ble.n	1a000e0a <FLOAT_A_LCD+0x66>
1a000dfa:	b2d2      	uxtb	r2, r2
1a000dfc:	3230      	adds	r2, #48	; 0x30
1a000dfe:	a904      	add	r1, sp, #16
1a000e00:	4419      	add	r1, r3
1a000e02:	f801 2c0c 	strb.w	r2, [r1, #-12]
1a000e06:	3301      	adds	r3, #1
1a000e08:	b2db      	uxtb	r3, r3
	miNumero[j] = NUM[2] + 48; j++;
1a000e0a:	4a31      	ldr	r2, [pc, #196]	; (1a000ed0 <FLOAT_A_LCD+0x12c>)
1a000e0c:	7891      	ldrb	r1, [r2, #2]
1a000e0e:	3130      	adds	r1, #48	; 0x30
1a000e10:	a804      	add	r0, sp, #16
1a000e12:	4418      	add	r0, r3
1a000e14:	f800 1c0c 	strb.w	r1, [r0, #-12]
1a000e18:	1c59      	adds	r1, r3, #1
	miNumero[j] = '.'; j++;
1a000e1a:	a804      	add	r0, sp, #16
1a000e1c:	fa50 f181 	uxtab	r1, r0, r1
1a000e20:	202e      	movs	r0, #46	; 0x2e
1a000e22:	f801 0c0c 	strb.w	r0, [r1, #-12]
1a000e26:	1c99      	adds	r1, r3, #2
	miNumero[j] = NUM[1] + 48; j++;
1a000e28:	7850      	ldrb	r0, [r2, #1]
1a000e2a:	3030      	adds	r0, #48	; 0x30
1a000e2c:	ac04      	add	r4, sp, #16
1a000e2e:	fa54 f181 	uxtab	r1, r4, r1
1a000e32:	f801 0c0c 	strb.w	r0, [r1, #-12]
1a000e36:	3303      	adds	r3, #3
	miNumero[j] = NUM[0] + 48; j++;
1a000e38:	7812      	ldrb	r2, [r2, #0]
1a000e3a:	3230      	adds	r2, #48	; 0x30
1a000e3c:	fa54 f383 	uxtab	r3, r4, r3
1a000e40:	f803 2c0c 	strb.w	r2, [r3, #-12]
	LCD_I2C_WRITE_DATA_1234_STRING( 0x66, miNumero );
1a000e44:	a901      	add	r1, sp, #4
1a000e46:	2066      	movs	r0, #102	; 0x66
1a000e48:	f7ff fe5c 	bl	1a000b04 <LCD_I2C_WRITE_DATA_1234_STRING>
	uint8_t i = 0;
1a000e4c:	2300      	movs	r3, #0
	for (; i< 9; i++) TxtBLE[i] = ' ';
1a000e4e:	e009      	b.n	1a000e64 <FLOAT_A_LCD+0xc0>
	if ( x   <  0   ) { miNumero[0] = '-'; j++; };
1a000e50:	232d      	movs	r3, #45	; 0x2d
1a000e52:	f88d 3004 	strb.w	r3, [sp, #4]
1a000e56:	2301      	movs	r3, #1
1a000e58:	e7bd      	b.n	1a000dd6 <FLOAT_A_LCD+0x32>
	for (; i< 9; i++) TxtBLE[i] = ' ';
1a000e5a:	4a1e      	ldr	r2, [pc, #120]	; (1a000ed4 <FLOAT_A_LCD+0x130>)
1a000e5c:	2120      	movs	r1, #32
1a000e5e:	54d1      	strb	r1, [r2, r3]
1a000e60:	3301      	adds	r3, #1
1a000e62:	b2db      	uxtb	r3, r3
1a000e64:	2b08      	cmp	r3, #8
1a000e66:	d9f8      	bls.n	1a000e5a <FLOAT_A_LCD+0xb6>
	if (   x    < 0 ){ TxtBLE[i] = '-'        ; i++; }
1a000e68:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
1a000e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000e70:	d428      	bmi.n	1a000ec4 <FLOAT_A_LCD+0x120>
	i = 3;
1a000e72:	2303      	movs	r3, #3
	if ( NUM[4] > 0 ){ TxtBLE[i] = NUM[4] + 48; i++; }
1a000e74:	4a16      	ldr	r2, [pc, #88]	; (1a000ed0 <FLOAT_A_LCD+0x12c>)
1a000e76:	f992 2004 	ldrsb.w	r2, [r2, #4]
1a000e7a:	2a00      	cmp	r2, #0
1a000e7c:	dd05      	ble.n	1a000e8a <FLOAT_A_LCD+0xe6>
1a000e7e:	b2d2      	uxtb	r2, r2
1a000e80:	3230      	adds	r2, #48	; 0x30
1a000e82:	4914      	ldr	r1, [pc, #80]	; (1a000ed4 <FLOAT_A_LCD+0x130>)
1a000e84:	54ca      	strb	r2, [r1, r3]
1a000e86:	3301      	adds	r3, #1
1a000e88:	b2db      	uxtb	r3, r3
	if ( NUM[3] > 0 ){ TxtBLE[i] = NUM[3] + 48; i++; }
1a000e8a:	4a11      	ldr	r2, [pc, #68]	; (1a000ed0 <FLOAT_A_LCD+0x12c>)
1a000e8c:	f992 2003 	ldrsb.w	r2, [r2, #3]
1a000e90:	2a00      	cmp	r2, #0
1a000e92:	dd05      	ble.n	1a000ea0 <FLOAT_A_LCD+0xfc>
1a000e94:	b2d2      	uxtb	r2, r2
1a000e96:	3230      	adds	r2, #48	; 0x30
1a000e98:	490e      	ldr	r1, [pc, #56]	; (1a000ed4 <FLOAT_A_LCD+0x130>)
1a000e9a:	54ca      	strb	r2, [r1, r3]
1a000e9c:	3301      	adds	r3, #1
1a000e9e:	b2db      	uxtb	r3, r3
	                   TxtBLE[i] = NUM[2] + 48; i++;
1a000ea0:	480b      	ldr	r0, [pc, #44]	; (1a000ed0 <FLOAT_A_LCD+0x12c>)
1a000ea2:	7881      	ldrb	r1, [r0, #2]
1a000ea4:	3130      	adds	r1, #48	; 0x30
1a000ea6:	4a0b      	ldr	r2, [pc, #44]	; (1a000ed4 <FLOAT_A_LCD+0x130>)
1a000ea8:	54d1      	strb	r1, [r2, r3]
1a000eaa:	1c59      	adds	r1, r3, #1
1a000eac:	b2c9      	uxtb	r1, r1
	                   TxtBLE[i] = '.'        ; i++;
1a000eae:	242e      	movs	r4, #46	; 0x2e
1a000eb0:	5454      	strb	r4, [r2, r1]
1a000eb2:	3302      	adds	r3, #2
1a000eb4:	b2db      	uxtb	r3, r3
	                   TxtBLE[i] = NUM[1] + 48; i++;
1a000eb6:	7841      	ldrb	r1, [r0, #1]
1a000eb8:	3130      	adds	r1, #48	; 0x30
1a000eba:	54d1      	strb	r1, [r2, r3]
}
1a000ebc:	b004      	add	sp, #16
1a000ebe:	ecbd 8b02 	vpop	{d8}
1a000ec2:	bd10      	pop	{r4, pc}
	if (   x    < 0 ){ TxtBLE[i] = '-'        ; i++; }
1a000ec4:	4b03      	ldr	r3, [pc, #12]	; (1a000ed4 <FLOAT_A_LCD+0x130>)
1a000ec6:	222d      	movs	r2, #45	; 0x2d
1a000ec8:	70da      	strb	r2, [r3, #3]
1a000eca:	2304      	movs	r3, #4
1a000ecc:	e7d2      	b.n	1a000e74 <FLOAT_A_LCD+0xd0>
1a000ece:	bf00      	nop
1a000ed0:	100000f8 	.word	0x100000f8
1a000ed4:	10002d0c 	.word	0x10002d0c

1a000ed8 <initialise_monitor_handles>:
}
1a000ed8:	4770      	bx	lr
1a000eda:	Address 0x000000001a000eda is out of bounds.


1a000edc <Reset_Handler>:
void Reset_Handler(void) {
1a000edc:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000ede:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000ee0:	4b19      	ldr	r3, [pc, #100]	; (1a000f48 <Reset_Handler+0x6c>)
1a000ee2:	4a1a      	ldr	r2, [pc, #104]	; (1a000f4c <Reset_Handler+0x70>)
1a000ee4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000ee6:	3304      	adds	r3, #4
1a000ee8:	4a19      	ldr	r2, [pc, #100]	; (1a000f50 <Reset_Handler+0x74>)
1a000eea:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000eec:	2300      	movs	r3, #0
1a000eee:	e005      	b.n	1a000efc <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000ef0:	4a18      	ldr	r2, [pc, #96]	; (1a000f54 <Reset_Handler+0x78>)
1a000ef2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000ef6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000efa:	3301      	adds	r3, #1
1a000efc:	2b07      	cmp	r3, #7
1a000efe:	d9f7      	bls.n	1a000ef0 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000f00:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000f02:	4b15      	ldr	r3, [pc, #84]	; (1a000f58 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000f04:	e007      	b.n	1a000f16 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000f06:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000f0a:	689a      	ldr	r2, [r3, #8]
1a000f0c:	6859      	ldr	r1, [r3, #4]
1a000f0e:	6818      	ldr	r0, [r3, #0]
1a000f10:	f7ff f93b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000f14:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000f16:	4a11      	ldr	r2, [pc, #68]	; (1a000f5c <Reset_Handler+0x80>)
1a000f18:	4293      	cmp	r3, r2
1a000f1a:	d3f4      	bcc.n	1a000f06 <Reset_Handler+0x2a>
1a000f1c:	e006      	b.n	1a000f2c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000f1e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000f20:	6859      	ldr	r1, [r3, #4]
1a000f22:	f854 0b08 	ldr.w	r0, [r4], #8
1a000f26:	f7ff f93f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000f2a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000f2c:	4a0c      	ldr	r2, [pc, #48]	; (1a000f60 <Reset_Handler+0x84>)
1a000f2e:	4293      	cmp	r3, r2
1a000f30:	d3f5      	bcc.n	1a000f1e <Reset_Handler+0x42>
    SystemInit();
1a000f32:	f002 ffe9 	bl	1a003f08 <SystemInit>
    __libc_init_array();
1a000f36:	f003 feb1 	bl	1a004c9c <__libc_init_array>
    initialise_monitor_handles();
1a000f3a:	f7ff ffcd 	bl	1a000ed8 <initialise_monitor_handles>
    main();
1a000f3e:	f7ff fb61 	bl	1a000604 <main>
        __asm__ volatile("wfi");
1a000f42:	bf30      	wfi
1a000f44:	e7fd      	b.n	1a000f42 <Reset_Handler+0x66>
1a000f46:	bf00      	nop
1a000f48:	40053100 	.word	0x40053100
1a000f4c:	10df1000 	.word	0x10df1000
1a000f50:	01dff7ff 	.word	0x01dff7ff
1a000f54:	e000e280 	.word	0xe000e280
1a000f58:	1a000114 	.word	0x1a000114
1a000f5c:	1a000150 	.word	0x1a000150
1a000f60:	1a000178 	.word	0x1a000178

1a000f64 <_fini>:
void _fini(void) {}
1a000f64:	4770      	bx	lr

1a000f66 <_init>:
void _init(void) {}
1a000f66:	4770      	bx	lr

1a000f68 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000f68:	2309      	movs	r3, #9
1a000f6a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f70:	4770      	bx	lr

1a000f72 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000f72:	2358      	movs	r3, #88	; 0x58
1a000f74:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f7a:	4770      	bx	lr

1a000f7c <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000f7c:	2902      	cmp	r1, #2
1a000f7e:	d801      	bhi.n	1a000f84 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000f80:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000f82:	4770      	bx	lr
       SET_ERR(EBADF);
1a000f84:	2309      	movs	r3, #9
1a000f86:	6003      	str	r3, [r0, #0]
       return -1;
1a000f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f8c:	4770      	bx	lr

1a000f8e <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000f8e:	2358      	movs	r3, #88	; 0x58
1a000f90:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f96:	4770      	bx	lr

1a000f98 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000f98:	2902      	cmp	r1, #2
1a000f9a:	d81f      	bhi.n	1a000fdc <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000fa0:	461d      	mov	r5, r3
1a000fa2:	4617      	mov	r7, r2
1a000fa4:	4606      	mov	r6, r0
  size_t i = 0;
1a000fa6:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000fa8:	42ac      	cmp	r4, r5
1a000faa:	d211      	bcs.n	1a000fd0 <_read_r+0x38>
         int c = __stdio_getchar();
1a000fac:	f002 f89f 	bl	1a0030ee <__stdio_getchar>
         if( c != -1 ){
1a000fb0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000fb4:	d0f8      	beq.n	1a000fa8 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000fb6:	f104 0801 	add.w	r8, r4, #1
1a000fba:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000fbc:	280d      	cmp	r0, #13
1a000fbe:	d003      	beq.n	1a000fc8 <_read_r+0x30>
1a000fc0:	280a      	cmp	r0, #10
1a000fc2:	d001      	beq.n	1a000fc8 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000fc4:	4644      	mov	r4, r8
1a000fc6:	e7ef      	b.n	1a000fa8 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000fc8:	f002 f891 	bl	1a0030ee <__stdio_getchar>
               return i;
1a000fcc:	4640      	mov	r0, r8
1a000fce:	e003      	b.n	1a000fd8 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000fd0:	2313      	movs	r3, #19
1a000fd2:	6033      	str	r3, [r6, #0]
      return -1;
1a000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000fdc:	2313      	movs	r3, #19
1a000fde:	6003      	str	r3, [r0, #0]
      return -1;
1a000fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000fe4:	4770      	bx	lr

1a000fe6 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000fe6:	2902      	cmp	r1, #2
1a000fe8:	d80c      	bhi.n	1a001004 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000fea:	b570      	push	{r4, r5, r6, lr}
1a000fec:	461d      	mov	r5, r3
1a000fee:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000ff0:	2400      	movs	r4, #0
1a000ff2:	e003      	b.n	1a000ffc <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000ff4:	5d30      	ldrb	r0, [r6, r4]
1a000ff6:	f002 f875 	bl	1a0030e4 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000ffa:	3401      	adds	r4, #1
1a000ffc:	42ac      	cmp	r4, r5
1a000ffe:	d3f9      	bcc.n	1a000ff4 <_write_r+0xe>
       return n;
1a001000:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a001002:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a001004:	2313      	movs	r3, #19
1a001006:	6003      	str	r3, [r0, #0]
       return -1;
1a001008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00100c:	4770      	bx	lr
1a00100e:	Address 0x000000001a00100e is out of bounds.


1a001010 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001010:	4b05      	ldr	r3, [pc, #20]	; (1a001028 <_sbrk_r+0x18>)
1a001012:	681b      	ldr	r3, [r3, #0]
1a001014:	b123      	cbz	r3, 1a001020 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a001016:	4b04      	ldr	r3, [pc, #16]	; (1a001028 <_sbrk_r+0x18>)
1a001018:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00101a:	4401      	add	r1, r0
1a00101c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00101e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a001020:	4b01      	ldr	r3, [pc, #4]	; (1a001028 <_sbrk_r+0x18>)
1a001022:	4a02      	ldr	r2, [pc, #8]	; (1a00102c <_sbrk_r+0x1c>)
1a001024:	601a      	str	r2, [r3, #0]
1a001026:	e7f6      	b.n	1a001016 <_sbrk_r+0x6>
1a001028:	10000118 	.word	0x10000118
1a00102c:	10002d60 	.word	0x10002d60

1a001030 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a001030:	b538      	push	{r3, r4, r5, lr}
1a001032:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a001034:	f010 0f07 	tst.w	r0, #7
1a001038:	d002      	beq.n	1a001040 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00103a:	f020 0407 	bic.w	r4, r0, #7
1a00103e:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a001040:	f000 ff24 	bl	1a001e8c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a001044:	4b13      	ldr	r3, [pc, #76]	; (1a001094 <pvPortMalloc+0x64>)
1a001046:	681b      	ldr	r3, [r3, #0]
1a001048:	b17b      	cbz	r3, 1a00106a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a00104a:	4b13      	ldr	r3, [pc, #76]	; (1a001098 <pvPortMalloc+0x68>)
1a00104c:	681b      	ldr	r3, [r3, #0]
1a00104e:	441c      	add	r4, r3
1a001050:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a001054:	4294      	cmp	r4, r2
1a001056:	d80e      	bhi.n	1a001076 <pvPortMalloc+0x46>
1a001058:	42a3      	cmp	r3, r4
1a00105a:	d310      	bcc.n	1a00107e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a00105c:	f000 ffb0 	bl	1a001fc0 <xTaskResumeAll>
void *pvReturn = NULL;
1a001060:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a001062:	f000 fcd0 	bl	1a001a06 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a001066:	4628      	mov	r0, r5
1a001068:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00106a:	4b0c      	ldr	r3, [pc, #48]	; (1a00109c <pvPortMalloc+0x6c>)
1a00106c:	f023 0307 	bic.w	r3, r3, #7
1a001070:	4a08      	ldr	r2, [pc, #32]	; (1a001094 <pvPortMalloc+0x64>)
1a001072:	6013      	str	r3, [r2, #0]
1a001074:	e7e9      	b.n	1a00104a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a001076:	f000 ffa3 	bl	1a001fc0 <xTaskResumeAll>
void *pvReturn = NULL;
1a00107a:	2500      	movs	r5, #0
1a00107c:	e7f1      	b.n	1a001062 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00107e:	4a05      	ldr	r2, [pc, #20]	; (1a001094 <pvPortMalloc+0x64>)
1a001080:	6815      	ldr	r5, [r2, #0]
1a001082:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a001084:	4b04      	ldr	r3, [pc, #16]	; (1a001098 <pvPortMalloc+0x68>)
1a001086:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a001088:	f000 ff9a 	bl	1a001fc0 <xTaskResumeAll>
		if( pvReturn == NULL )
1a00108c:	2d00      	cmp	r5, #0
1a00108e:	d1ea      	bne.n	1a001066 <pvPortMalloc+0x36>
1a001090:	e7e7      	b.n	1a001062 <pvPortMalloc+0x32>
1a001092:	bf00      	nop
1a001094:	1000011c 	.word	0x1000011c
1a001098:	10002120 	.word	0x10002120
1a00109c:	10000128 	.word	0x10000128

1a0010a0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a0010a0:	b140      	cbz	r0, 1a0010b4 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0010a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010a6:	f383 8811 	msr	BASEPRI, r3
1a0010aa:	f3bf 8f6f 	isb	sy
1a0010ae:	f3bf 8f4f 	dsb	sy
1a0010b2:	e7fe      	b.n	1a0010b2 <vPortFree+0x12>
}
1a0010b4:	4770      	bx	lr

1a0010b6 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a0010b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a0010b8:	b123      	cbz	r3, 1a0010c4 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a0010ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0010bc:	6818      	ldr	r0, [r3, #0]
1a0010be:	f1c0 0007 	rsb	r0, r0, #7
1a0010c2:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a0010c4:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a0010c6:	4770      	bx	lr

1a0010c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0010c8:	b510      	push	{r4, lr}
1a0010ca:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0010cc:	f001 fdba 	bl	1a002c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0010d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0010d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0010d4:	429a      	cmp	r2, r3
1a0010d6:	d004      	beq.n	1a0010e2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0010d8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0010da:	f001 fdd5 	bl	1a002c88 <vPortExitCritical>

	return xReturn;
}
1a0010de:	4620      	mov	r0, r4
1a0010e0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0010e2:	2401      	movs	r4, #1
1a0010e4:	e7f9      	b.n	1a0010da <prvIsQueueFull+0x12>

1a0010e6 <prvIsQueueEmpty>:
{
1a0010e6:	b510      	push	{r4, lr}
1a0010e8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0010ea:	f001 fdab 	bl	1a002c44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0010ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0010f0:	b123      	cbz	r3, 1a0010fc <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0010f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0010f4:	f001 fdc8 	bl	1a002c88 <vPortExitCritical>
}
1a0010f8:	4620      	mov	r0, r4
1a0010fa:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0010fc:	2401      	movs	r4, #1
1a0010fe:	e7f9      	b.n	1a0010f4 <prvIsQueueEmpty+0xe>

1a001100 <prvCopyDataToQueue>:
{
1a001100:	b570      	push	{r4, r5, r6, lr}
1a001102:	4604      	mov	r4, r0
1a001104:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001106:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a001108:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00110a:	b95a      	cbnz	r2, 1a001124 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00110c:	6803      	ldr	r3, [r0, #0]
1a00110e:	b11b      	cbz	r3, 1a001118 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a001110:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a001112:	3501      	adds	r5, #1
1a001114:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a001116:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a001118:	6840      	ldr	r0, [r0, #4]
1a00111a:	f001 fa03 	bl	1a002524 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00111e:	2300      	movs	r3, #0
1a001120:	6063      	str	r3, [r4, #4]
1a001122:	e7f6      	b.n	1a001112 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a001124:	b96e      	cbnz	r6, 1a001142 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a001126:	6880      	ldr	r0, [r0, #8]
1a001128:	f003 fddc 	bl	1a004ce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a00112c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00112e:	68a3      	ldr	r3, [r4, #8]
1a001130:	4413      	add	r3, r2
1a001132:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001134:	6862      	ldr	r2, [r4, #4]
1a001136:	4293      	cmp	r3, r2
1a001138:	d319      	bcc.n	1a00116e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a00113a:	6823      	ldr	r3, [r4, #0]
1a00113c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00113e:	2000      	movs	r0, #0
1a001140:	e7e7      	b.n	1a001112 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001142:	68c0      	ldr	r0, [r0, #12]
1a001144:	f003 fdce 	bl	1a004ce4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001148:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00114a:	4252      	negs	r2, r2
1a00114c:	68e3      	ldr	r3, [r4, #12]
1a00114e:	4413      	add	r3, r2
1a001150:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001152:	6821      	ldr	r1, [r4, #0]
1a001154:	428b      	cmp	r3, r1
1a001156:	d202      	bcs.n	1a00115e <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001158:	6863      	ldr	r3, [r4, #4]
1a00115a:	441a      	add	r2, r3
1a00115c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a00115e:	2e02      	cmp	r6, #2
1a001160:	d001      	beq.n	1a001166 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a001162:	2000      	movs	r0, #0
1a001164:	e7d5      	b.n	1a001112 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001166:	b125      	cbz	r5, 1a001172 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001168:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a00116a:	2000      	movs	r0, #0
1a00116c:	e7d1      	b.n	1a001112 <prvCopyDataToQueue+0x12>
1a00116e:	2000      	movs	r0, #0
1a001170:	e7cf      	b.n	1a001112 <prvCopyDataToQueue+0x12>
1a001172:	2000      	movs	r0, #0
1a001174:	e7cd      	b.n	1a001112 <prvCopyDataToQueue+0x12>

1a001176 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001176:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001178:	b172      	cbz	r2, 1a001198 <prvCopyDataFromQueue+0x22>
{
1a00117a:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00117c:	68c3      	ldr	r3, [r0, #12]
1a00117e:	4413      	add	r3, r2
1a001180:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a001182:	6844      	ldr	r4, [r0, #4]
1a001184:	42a3      	cmp	r3, r4
1a001186:	d301      	bcc.n	1a00118c <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001188:	6803      	ldr	r3, [r0, #0]
1a00118a:	60c3      	str	r3, [r0, #12]
1a00118c:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00118e:	68c1      	ldr	r1, [r0, #12]
1a001190:	4620      	mov	r0, r4
1a001192:	f003 fda7 	bl	1a004ce4 <memcpy>
}
1a001196:	bd10      	pop	{r4, pc}
1a001198:	4770      	bx	lr

1a00119a <prvUnlockQueue>:
{
1a00119a:	b538      	push	{r3, r4, r5, lr}
1a00119c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00119e:	f001 fd51 	bl	1a002c44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0011a2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0011a6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0011a8:	e003      	b.n	1a0011b2 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a0011aa:	f001 f949 	bl	1a002440 <vTaskMissedYield>
			--cTxLock;
1a0011ae:	3c01      	subs	r4, #1
1a0011b0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0011b2:	2c00      	cmp	r4, #0
1a0011b4:	dd08      	ble.n	1a0011c8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0011b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0011b8:	b133      	cbz	r3, 1a0011c8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0011ba:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0011be:	f001 f8ad 	bl	1a00231c <xTaskRemoveFromEventList>
1a0011c2:	2800      	cmp	r0, #0
1a0011c4:	d0f3      	beq.n	1a0011ae <prvUnlockQueue+0x14>
1a0011c6:	e7f0      	b.n	1a0011aa <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0011c8:	23ff      	movs	r3, #255	; 0xff
1a0011ca:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0011ce:	f001 fd5b 	bl	1a002c88 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0011d2:	f001 fd37 	bl	1a002c44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0011d6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0011da:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0011dc:	e003      	b.n	1a0011e6 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0011de:	f001 f92f 	bl	1a002440 <vTaskMissedYield>
				--cRxLock;
1a0011e2:	3c01      	subs	r4, #1
1a0011e4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0011e6:	2c00      	cmp	r4, #0
1a0011e8:	dd08      	ble.n	1a0011fc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0011ea:	692b      	ldr	r3, [r5, #16]
1a0011ec:	b133      	cbz	r3, 1a0011fc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0011ee:	f105 0010 	add.w	r0, r5, #16
1a0011f2:	f001 f893 	bl	1a00231c <xTaskRemoveFromEventList>
1a0011f6:	2800      	cmp	r0, #0
1a0011f8:	d0f3      	beq.n	1a0011e2 <prvUnlockQueue+0x48>
1a0011fa:	e7f0      	b.n	1a0011de <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0011fc:	23ff      	movs	r3, #255	; 0xff
1a0011fe:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a001202:	f001 fd41 	bl	1a002c88 <vPortExitCritical>
}
1a001206:	bd38      	pop	{r3, r4, r5, pc}

1a001208 <xQueueGenericReset>:
{
1a001208:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00120a:	b940      	cbnz	r0, 1a00121e <xQueueGenericReset+0x16>
1a00120c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001210:	f383 8811 	msr	BASEPRI, r3
1a001214:	f3bf 8f6f 	isb	sy
1a001218:	f3bf 8f4f 	dsb	sy
1a00121c:	e7fe      	b.n	1a00121c <xQueueGenericReset+0x14>
1a00121e:	4604      	mov	r4, r0
1a001220:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a001222:	f001 fd0f 	bl	1a002c44 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a001226:	6821      	ldr	r1, [r4, #0]
1a001228:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00122a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00122c:	fb03 1002 	mla	r0, r3, r2, r1
1a001230:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a001232:	2000      	movs	r0, #0
1a001234:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a001236:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a001238:	3a01      	subs	r2, #1
1a00123a:	fb02 1303 	mla	r3, r2, r3, r1
1a00123e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a001240:	23ff      	movs	r3, #255	; 0xff
1a001242:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a001246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a00124a:	b9a5      	cbnz	r5, 1a001276 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00124c:	6923      	ldr	r3, [r4, #16]
1a00124e:	b91b      	cbnz	r3, 1a001258 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a001250:	f001 fd1a 	bl	1a002c88 <vPortExitCritical>
}
1a001254:	2001      	movs	r0, #1
1a001256:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001258:	f104 0010 	add.w	r0, r4, #16
1a00125c:	f001 f85e 	bl	1a00231c <xTaskRemoveFromEventList>
1a001260:	2800      	cmp	r0, #0
1a001262:	d0f5      	beq.n	1a001250 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a001264:	4b08      	ldr	r3, [pc, #32]	; (1a001288 <xQueueGenericReset+0x80>)
1a001266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00126a:	601a      	str	r2, [r3, #0]
1a00126c:	f3bf 8f4f 	dsb	sy
1a001270:	f3bf 8f6f 	isb	sy
1a001274:	e7ec      	b.n	1a001250 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001276:	f104 0010 	add.w	r0, r4, #16
1a00127a:	f000 fb62 	bl	1a001942 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00127e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001282:	f000 fb5e 	bl	1a001942 <vListInitialise>
1a001286:	e7e3      	b.n	1a001250 <xQueueGenericReset+0x48>
1a001288:	e000ed04 	.word	0xe000ed04

1a00128c <prvInitialiseNewQueue>:
{
1a00128c:	b538      	push	{r3, r4, r5, lr}
1a00128e:	461d      	mov	r5, r3
1a001290:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a001292:	460b      	mov	r3, r1
1a001294:	b149      	cbz	r1, 1a0012aa <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001296:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001298:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a00129a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a00129c:	2101      	movs	r1, #1
1a00129e:	4620      	mov	r0, r4
1a0012a0:	f7ff ffb2 	bl	1a001208 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0012a4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0012a8:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0012aa:	6024      	str	r4, [r4, #0]
1a0012ac:	e7f4      	b.n	1a001298 <prvInitialiseNewQueue+0xc>

1a0012ae <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0012ae:	b940      	cbnz	r0, 1a0012c2 <xQueueGenericCreateStatic+0x14>
1a0012b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012b4:	f383 8811 	msr	BASEPRI, r3
1a0012b8:	f3bf 8f6f 	isb	sy
1a0012bc:	f3bf 8f4f 	dsb	sy
1a0012c0:	e7fe      	b.n	1a0012c0 <xQueueGenericCreateStatic+0x12>
	{
1a0012c2:	b510      	push	{r4, lr}
1a0012c4:	b084      	sub	sp, #16
1a0012c6:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a0012c8:	b153      	cbz	r3, 1a0012e0 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0012ca:	b192      	cbz	r2, 1a0012f2 <xQueueGenericCreateStatic+0x44>
1a0012cc:	b989      	cbnz	r1, 1a0012f2 <xQueueGenericCreateStatic+0x44>
1a0012ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012d2:	f383 8811 	msr	BASEPRI, r3
1a0012d6:	f3bf 8f6f 	isb	sy
1a0012da:	f3bf 8f4f 	dsb	sy
1a0012de:	e7fe      	b.n	1a0012de <xQueueGenericCreateStatic+0x30>
1a0012e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012e4:	f383 8811 	msr	BASEPRI, r3
1a0012e8:	f3bf 8f6f 	isb	sy
1a0012ec:	f3bf 8f4f 	dsb	sy
1a0012f0:	e7fe      	b.n	1a0012f0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0012f2:	b94a      	cbnz	r2, 1a001308 <xQueueGenericCreateStatic+0x5a>
1a0012f4:	b141      	cbz	r1, 1a001308 <xQueueGenericCreateStatic+0x5a>
1a0012f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012fa:	f383 8811 	msr	BASEPRI, r3
1a0012fe:	f3bf 8f6f 	isb	sy
1a001302:	f3bf 8f4f 	dsb	sy
1a001306:	e7fe      	b.n	1a001306 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a001308:	2050      	movs	r0, #80	; 0x50
1a00130a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a00130c:	9803      	ldr	r0, [sp, #12]
1a00130e:	2850      	cmp	r0, #80	; 0x50
1a001310:	d008      	beq.n	1a001324 <xQueueGenericCreateStatic+0x76>
1a001312:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001316:	f383 8811 	msr	BASEPRI, r3
1a00131a:	f3bf 8f6f 	isb	sy
1a00131e:	f3bf 8f4f 	dsb	sy
1a001322:	e7fe      	b.n	1a001322 <xQueueGenericCreateStatic+0x74>
1a001324:	4620      	mov	r0, r4
1a001326:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a001328:	2301      	movs	r3, #1
1a00132a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00132e:	9400      	str	r4, [sp, #0]
1a001330:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a001334:	f7ff ffaa 	bl	1a00128c <prvInitialiseNewQueue>
	}
1a001338:	4620      	mov	r0, r4
1a00133a:	b004      	add	sp, #16
1a00133c:	bd10      	pop	{r4, pc}

1a00133e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00133e:	b940      	cbnz	r0, 1a001352 <xQueueGenericCreate+0x14>
1a001340:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001344:	f383 8811 	msr	BASEPRI, r3
1a001348:	f3bf 8f6f 	isb	sy
1a00134c:	f3bf 8f4f 	dsb	sy
1a001350:	e7fe      	b.n	1a001350 <xQueueGenericCreate+0x12>
	{
1a001352:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001354:	b083      	sub	sp, #12
1a001356:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001358:	b111      	cbz	r1, 1a001360 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00135a:	fb01 f000 	mul.w	r0, r1, r0
1a00135e:	e000      	b.n	1a001362 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a001360:	2000      	movs	r0, #0
1a001362:	4617      	mov	r7, r2
1a001364:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a001366:	3050      	adds	r0, #80	; 0x50
1a001368:	f7ff fe62 	bl	1a001030 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a00136c:	4605      	mov	r5, r0
1a00136e:	b150      	cbz	r0, 1a001386 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a001370:	2300      	movs	r3, #0
1a001372:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001376:	9000      	str	r0, [sp, #0]
1a001378:	463b      	mov	r3, r7
1a00137a:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a00137e:	4621      	mov	r1, r4
1a001380:	4630      	mov	r0, r6
1a001382:	f7ff ff83 	bl	1a00128c <prvInitialiseNewQueue>
	}
1a001386:	4628      	mov	r0, r5
1a001388:	b003      	add	sp, #12
1a00138a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a00138c <xQueueGenericSend>:
{
1a00138c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00138e:	b085      	sub	sp, #20
1a001390:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a001392:	b160      	cbz	r0, 1a0013ae <xQueueGenericSend+0x22>
1a001394:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001396:	b999      	cbnz	r1, 1a0013c0 <xQueueGenericSend+0x34>
1a001398:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00139a:	b18a      	cbz	r2, 1a0013c0 <xQueueGenericSend+0x34>
1a00139c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013a0:	f383 8811 	msr	BASEPRI, r3
1a0013a4:	f3bf 8f6f 	isb	sy
1a0013a8:	f3bf 8f4f 	dsb	sy
1a0013ac:	e7fe      	b.n	1a0013ac <xQueueGenericSend+0x20>
1a0013ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013b2:	f383 8811 	msr	BASEPRI, r3
1a0013b6:	f3bf 8f6f 	isb	sy
1a0013ba:	f3bf 8f4f 	dsb	sy
1a0013be:	e7fe      	b.n	1a0013be <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0013c0:	2b02      	cmp	r3, #2
1a0013c2:	d10b      	bne.n	1a0013dc <xQueueGenericSend+0x50>
1a0013c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0013c6:	2a01      	cmp	r2, #1
1a0013c8:	d008      	beq.n	1a0013dc <xQueueGenericSend+0x50>
1a0013ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013ce:	f383 8811 	msr	BASEPRI, r3
1a0013d2:	f3bf 8f6f 	isb	sy
1a0013d6:	f3bf 8f4f 	dsb	sy
1a0013da:	e7fe      	b.n	1a0013da <xQueueGenericSend+0x4e>
1a0013dc:	461e      	mov	r6, r3
1a0013de:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0013e0:	f001 f834 	bl	1a00244c <xTaskGetSchedulerState>
1a0013e4:	b950      	cbnz	r0, 1a0013fc <xQueueGenericSend+0x70>
1a0013e6:	9b01      	ldr	r3, [sp, #4]
1a0013e8:	b153      	cbz	r3, 1a001400 <xQueueGenericSend+0x74>
1a0013ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013ee:	f383 8811 	msr	BASEPRI, r3
1a0013f2:	f3bf 8f6f 	isb	sy
1a0013f6:	f3bf 8f4f 	dsb	sy
1a0013fa:	e7fe      	b.n	1a0013fa <xQueueGenericSend+0x6e>
1a0013fc:	2500      	movs	r5, #0
1a0013fe:	e03a      	b.n	1a001476 <xQueueGenericSend+0xea>
1a001400:	2500      	movs	r5, #0
1a001402:	e038      	b.n	1a001476 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001404:	4632      	mov	r2, r6
1a001406:	4639      	mov	r1, r7
1a001408:	4620      	mov	r0, r4
1a00140a:	f7ff fe79 	bl	1a001100 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00140e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001410:	b94b      	cbnz	r3, 1a001426 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a001412:	b1a8      	cbz	r0, 1a001440 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a001414:	4b3b      	ldr	r3, [pc, #236]	; (1a001504 <xQueueGenericSend+0x178>)
1a001416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00141a:	601a      	str	r2, [r3, #0]
1a00141c:	f3bf 8f4f 	dsb	sy
1a001420:	f3bf 8f6f 	isb	sy
1a001424:	e00c      	b.n	1a001440 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001426:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00142a:	f000 ff77 	bl	1a00231c <xTaskRemoveFromEventList>
1a00142e:	b138      	cbz	r0, 1a001440 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a001430:	4b34      	ldr	r3, [pc, #208]	; (1a001504 <xQueueGenericSend+0x178>)
1a001432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001436:	601a      	str	r2, [r3, #0]
1a001438:	f3bf 8f4f 	dsb	sy
1a00143c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001440:	f001 fc22 	bl	1a002c88 <vPortExitCritical>
				return pdPASS;
1a001444:	2001      	movs	r0, #1
}
1a001446:	b005      	add	sp, #20
1a001448:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a00144a:	f001 fc1d 	bl	1a002c88 <vPortExitCritical>
					return errQUEUE_FULL;
1a00144e:	2000      	movs	r0, #0
1a001450:	e7f9      	b.n	1a001446 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001452:	a802      	add	r0, sp, #8
1a001454:	f000 ffa8 	bl	1a0023a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001458:	2501      	movs	r5, #1
1a00145a:	e019      	b.n	1a001490 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a00145c:	2300      	movs	r3, #0
1a00145e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001462:	e021      	b.n	1a0014a8 <xQueueGenericSend+0x11c>
1a001464:	2300      	movs	r3, #0
1a001466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00146a:	e023      	b.n	1a0014b4 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a00146c:	4620      	mov	r0, r4
1a00146e:	f7ff fe94 	bl	1a00119a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001472:	f000 fda5 	bl	1a001fc0 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001476:	f001 fbe5 	bl	1a002c44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00147a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00147c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00147e:	429a      	cmp	r2, r3
1a001480:	d3c0      	bcc.n	1a001404 <xQueueGenericSend+0x78>
1a001482:	2e02      	cmp	r6, #2
1a001484:	d0be      	beq.n	1a001404 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001486:	9b01      	ldr	r3, [sp, #4]
1a001488:	2b00      	cmp	r3, #0
1a00148a:	d0de      	beq.n	1a00144a <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a00148c:	2d00      	cmp	r5, #0
1a00148e:	d0e0      	beq.n	1a001452 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a001490:	f001 fbfa 	bl	1a002c88 <vPortExitCritical>
		vTaskSuspendAll();
1a001494:	f000 fcfa 	bl	1a001e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001498:	f001 fbd4 	bl	1a002c44 <vPortEnterCritical>
1a00149c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0014a0:	b25b      	sxtb	r3, r3
1a0014a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0014a6:	d0d9      	beq.n	1a00145c <xQueueGenericSend+0xd0>
1a0014a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0014ac:	b25b      	sxtb	r3, r3
1a0014ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0014b2:	d0d7      	beq.n	1a001464 <xQueueGenericSend+0xd8>
1a0014b4:	f001 fbe8 	bl	1a002c88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0014b8:	a901      	add	r1, sp, #4
1a0014ba:	a802      	add	r0, sp, #8
1a0014bc:	f000 ff80 	bl	1a0023c0 <xTaskCheckForTimeOut>
1a0014c0:	b9c8      	cbnz	r0, 1a0014f6 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a0014c2:	4620      	mov	r0, r4
1a0014c4:	f7ff fe00 	bl	1a0010c8 <prvIsQueueFull>
1a0014c8:	2800      	cmp	r0, #0
1a0014ca:	d0cf      	beq.n	1a00146c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a0014cc:	9901      	ldr	r1, [sp, #4]
1a0014ce:	f104 0010 	add.w	r0, r4, #16
1a0014d2:	f000 feef 	bl	1a0022b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0014d6:	4620      	mov	r0, r4
1a0014d8:	f7ff fe5f 	bl	1a00119a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0014dc:	f000 fd70 	bl	1a001fc0 <xTaskResumeAll>
1a0014e0:	2800      	cmp	r0, #0
1a0014e2:	d1c8      	bne.n	1a001476 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a0014e4:	4b07      	ldr	r3, [pc, #28]	; (1a001504 <xQueueGenericSend+0x178>)
1a0014e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0014ea:	601a      	str	r2, [r3, #0]
1a0014ec:	f3bf 8f4f 	dsb	sy
1a0014f0:	f3bf 8f6f 	isb	sy
1a0014f4:	e7bf      	b.n	1a001476 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a0014f6:	4620      	mov	r0, r4
1a0014f8:	f7ff fe4f 	bl	1a00119a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0014fc:	f000 fd60 	bl	1a001fc0 <xTaskResumeAll>
			return errQUEUE_FULL;
1a001500:	2000      	movs	r0, #0
1a001502:	e7a0      	b.n	1a001446 <xQueueGenericSend+0xba>
1a001504:	e000ed04 	.word	0xe000ed04

1a001508 <xQueueGenericSendFromISR>:
{
1a001508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a00150c:	b160      	cbz	r0, 1a001528 <xQueueGenericSendFromISR+0x20>
1a00150e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001510:	b999      	cbnz	r1, 1a00153a <xQueueGenericSendFromISR+0x32>
1a001512:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001514:	b188      	cbz	r0, 1a00153a <xQueueGenericSendFromISR+0x32>
1a001516:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00151a:	f383 8811 	msr	BASEPRI, r3
1a00151e:	f3bf 8f6f 	isb	sy
1a001522:	f3bf 8f4f 	dsb	sy
1a001526:	e7fe      	b.n	1a001526 <xQueueGenericSendFromISR+0x1e>
1a001528:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00152c:	f383 8811 	msr	BASEPRI, r3
1a001530:	f3bf 8f6f 	isb	sy
1a001534:	f3bf 8f4f 	dsb	sy
1a001538:	e7fe      	b.n	1a001538 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00153a:	2b02      	cmp	r3, #2
1a00153c:	d10b      	bne.n	1a001556 <xQueueGenericSendFromISR+0x4e>
1a00153e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001540:	2801      	cmp	r0, #1
1a001542:	d008      	beq.n	1a001556 <xQueueGenericSendFromISR+0x4e>
1a001544:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001548:	f383 8811 	msr	BASEPRI, r3
1a00154c:	f3bf 8f6f 	isb	sy
1a001550:	f3bf 8f4f 	dsb	sy
1a001554:	e7fe      	b.n	1a001554 <xQueueGenericSendFromISR+0x4c>
1a001556:	461f      	mov	r7, r3
1a001558:	4690      	mov	r8, r2
1a00155a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00155c:	f001 fc9c 	bl	1a002e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001560:	f3ef 8611 	mrs	r6, BASEPRI
1a001564:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001568:	f383 8811 	msr	BASEPRI, r3
1a00156c:	f3bf 8f6f 	isb	sy
1a001570:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001574:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001576:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001578:	429a      	cmp	r2, r3
1a00157a:	d303      	bcc.n	1a001584 <xQueueGenericSendFromISR+0x7c>
1a00157c:	2f02      	cmp	r7, #2
1a00157e:	d001      	beq.n	1a001584 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001580:	2000      	movs	r0, #0
1a001582:	e00f      	b.n	1a0015a4 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001584:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001588:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00158a:	463a      	mov	r2, r7
1a00158c:	4649      	mov	r1, r9
1a00158e:	4620      	mov	r0, r4
1a001590:	f7ff fdb6 	bl	1a001100 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001594:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001598:	d008      	beq.n	1a0015ac <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a00159a:	1c6b      	adds	r3, r5, #1
1a00159c:	b25b      	sxtb	r3, r3
1a00159e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0015a2:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0015a4:	f386 8811 	msr	BASEPRI, r6
}
1a0015a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0015ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0015ae:	b15b      	cbz	r3, 1a0015c8 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0015b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0015b4:	f000 feb2 	bl	1a00231c <xTaskRemoveFromEventList>
1a0015b8:	b140      	cbz	r0, 1a0015cc <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a0015ba:	f1b8 0f00 	cmp.w	r8, #0
1a0015be:	d007      	beq.n	1a0015d0 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0015c0:	2001      	movs	r0, #1
1a0015c2:	f8c8 0000 	str.w	r0, [r8]
1a0015c6:	e7ed      	b.n	1a0015a4 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a0015c8:	2001      	movs	r0, #1
1a0015ca:	e7eb      	b.n	1a0015a4 <xQueueGenericSendFromISR+0x9c>
1a0015cc:	2001      	movs	r0, #1
1a0015ce:	e7e9      	b.n	1a0015a4 <xQueueGenericSendFromISR+0x9c>
1a0015d0:	2001      	movs	r0, #1
1a0015d2:	e7e7      	b.n	1a0015a4 <xQueueGenericSendFromISR+0x9c>

1a0015d4 <xQueueReceive>:
{
1a0015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0015d6:	b085      	sub	sp, #20
1a0015d8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0015da:	b160      	cbz	r0, 1a0015f6 <xQueueReceive+0x22>
1a0015dc:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0015de:	b999      	cbnz	r1, 1a001608 <xQueueReceive+0x34>
1a0015e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0015e2:	b18b      	cbz	r3, 1a001608 <xQueueReceive+0x34>
	__asm volatile
1a0015e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015e8:	f383 8811 	msr	BASEPRI, r3
1a0015ec:	f3bf 8f6f 	isb	sy
1a0015f0:	f3bf 8f4f 	dsb	sy
1a0015f4:	e7fe      	b.n	1a0015f4 <xQueueReceive+0x20>
1a0015f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015fa:	f383 8811 	msr	BASEPRI, r3
1a0015fe:	f3bf 8f6f 	isb	sy
1a001602:	f3bf 8f4f 	dsb	sy
1a001606:	e7fe      	b.n	1a001606 <xQueueReceive+0x32>
1a001608:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00160a:	f000 ff1f 	bl	1a00244c <xTaskGetSchedulerState>
1a00160e:	b950      	cbnz	r0, 1a001626 <xQueueReceive+0x52>
1a001610:	9b01      	ldr	r3, [sp, #4]
1a001612:	b153      	cbz	r3, 1a00162a <xQueueReceive+0x56>
1a001614:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001618:	f383 8811 	msr	BASEPRI, r3
1a00161c:	f3bf 8f6f 	isb	sy
1a001620:	f3bf 8f4f 	dsb	sy
1a001624:	e7fe      	b.n	1a001624 <xQueueReceive+0x50>
1a001626:	2600      	movs	r6, #0
1a001628:	e03e      	b.n	1a0016a8 <xQueueReceive+0xd4>
1a00162a:	2600      	movs	r6, #0
1a00162c:	e03c      	b.n	1a0016a8 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00162e:	4639      	mov	r1, r7
1a001630:	4620      	mov	r0, r4
1a001632:	f7ff fda0 	bl	1a001176 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001636:	3d01      	subs	r5, #1
1a001638:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00163a:	6923      	ldr	r3, [r4, #16]
1a00163c:	b923      	cbnz	r3, 1a001648 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a00163e:	f001 fb23 	bl	1a002c88 <vPortExitCritical>
				return pdPASS;
1a001642:	2001      	movs	r0, #1
}
1a001644:	b005      	add	sp, #20
1a001646:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001648:	f104 0010 	add.w	r0, r4, #16
1a00164c:	f000 fe66 	bl	1a00231c <xTaskRemoveFromEventList>
1a001650:	2800      	cmp	r0, #0
1a001652:	d0f4      	beq.n	1a00163e <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001654:	4b34      	ldr	r3, [pc, #208]	; (1a001728 <xQueueReceive+0x154>)
1a001656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00165a:	601a      	str	r2, [r3, #0]
1a00165c:	f3bf 8f4f 	dsb	sy
1a001660:	f3bf 8f6f 	isb	sy
1a001664:	e7eb      	b.n	1a00163e <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001666:	f001 fb0f 	bl	1a002c88 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00166a:	2000      	movs	r0, #0
1a00166c:	e7ea      	b.n	1a001644 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00166e:	a802      	add	r0, sp, #8
1a001670:	f000 fe9a 	bl	1a0023a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001674:	2601      	movs	r6, #1
1a001676:	e021      	b.n	1a0016bc <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001678:	2300      	movs	r3, #0
1a00167a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00167e:	e029      	b.n	1a0016d4 <xQueueReceive+0x100>
1a001680:	2300      	movs	r3, #0
1a001682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001686:	e02b      	b.n	1a0016e0 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001688:	4620      	mov	r0, r4
1a00168a:	f7ff fd86 	bl	1a00119a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00168e:	f000 fc97 	bl	1a001fc0 <xTaskResumeAll>
1a001692:	e009      	b.n	1a0016a8 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001694:	4620      	mov	r0, r4
1a001696:	f7ff fd80 	bl	1a00119a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00169a:	f000 fc91 	bl	1a001fc0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00169e:	4620      	mov	r0, r4
1a0016a0:	f7ff fd21 	bl	1a0010e6 <prvIsQueueEmpty>
1a0016a4:	2800      	cmp	r0, #0
1a0016a6:	d13d      	bne.n	1a001724 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0016a8:	f001 facc 	bl	1a002c44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0016ac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0016ae:	2d00      	cmp	r5, #0
1a0016b0:	d1bd      	bne.n	1a00162e <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0016b2:	9b01      	ldr	r3, [sp, #4]
1a0016b4:	2b00      	cmp	r3, #0
1a0016b6:	d0d6      	beq.n	1a001666 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a0016b8:	2e00      	cmp	r6, #0
1a0016ba:	d0d8      	beq.n	1a00166e <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a0016bc:	f001 fae4 	bl	1a002c88 <vPortExitCritical>
		vTaskSuspendAll();
1a0016c0:	f000 fbe4 	bl	1a001e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0016c4:	f001 fabe 	bl	1a002c44 <vPortEnterCritical>
1a0016c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0016cc:	b25b      	sxtb	r3, r3
1a0016ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0016d2:	d0d1      	beq.n	1a001678 <xQueueReceive+0xa4>
1a0016d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0016d8:	b25b      	sxtb	r3, r3
1a0016da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0016de:	d0cf      	beq.n	1a001680 <xQueueReceive+0xac>
1a0016e0:	f001 fad2 	bl	1a002c88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0016e4:	a901      	add	r1, sp, #4
1a0016e6:	a802      	add	r0, sp, #8
1a0016e8:	f000 fe6a 	bl	1a0023c0 <xTaskCheckForTimeOut>
1a0016ec:	2800      	cmp	r0, #0
1a0016ee:	d1d1      	bne.n	1a001694 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0016f0:	4620      	mov	r0, r4
1a0016f2:	f7ff fcf8 	bl	1a0010e6 <prvIsQueueEmpty>
1a0016f6:	2800      	cmp	r0, #0
1a0016f8:	d0c6      	beq.n	1a001688 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0016fa:	9901      	ldr	r1, [sp, #4]
1a0016fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001700:	f000 fdd8 	bl	1a0022b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001704:	4620      	mov	r0, r4
1a001706:	f7ff fd48 	bl	1a00119a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00170a:	f000 fc59 	bl	1a001fc0 <xTaskResumeAll>
1a00170e:	2800      	cmp	r0, #0
1a001710:	d1ca      	bne.n	1a0016a8 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001712:	4b05      	ldr	r3, [pc, #20]	; (1a001728 <xQueueReceive+0x154>)
1a001714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001718:	601a      	str	r2, [r3, #0]
1a00171a:	f3bf 8f4f 	dsb	sy
1a00171e:	f3bf 8f6f 	isb	sy
1a001722:	e7c1      	b.n	1a0016a8 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001724:	2000      	movs	r0, #0
1a001726:	e78d      	b.n	1a001644 <xQueueReceive+0x70>
1a001728:	e000ed04 	.word	0xe000ed04

1a00172c <xQueueSemaphoreTake>:
{
1a00172c:	b570      	push	{r4, r5, r6, lr}
1a00172e:	b084      	sub	sp, #16
1a001730:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001732:	b940      	cbnz	r0, 1a001746 <xQueueSemaphoreTake+0x1a>
1a001734:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001738:	f383 8811 	msr	BASEPRI, r3
1a00173c:	f3bf 8f6f 	isb	sy
1a001740:	f3bf 8f4f 	dsb	sy
1a001744:	e7fe      	b.n	1a001744 <xQueueSemaphoreTake+0x18>
1a001746:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001748:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00174a:	b143      	cbz	r3, 1a00175e <xQueueSemaphoreTake+0x32>
1a00174c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001750:	f383 8811 	msr	BASEPRI, r3
1a001754:	f3bf 8f6f 	isb	sy
1a001758:	f3bf 8f4f 	dsb	sy
1a00175c:	e7fe      	b.n	1a00175c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00175e:	f000 fe75 	bl	1a00244c <xTaskGetSchedulerState>
1a001762:	b950      	cbnz	r0, 1a00177a <xQueueSemaphoreTake+0x4e>
1a001764:	9b01      	ldr	r3, [sp, #4]
1a001766:	b15b      	cbz	r3, 1a001780 <xQueueSemaphoreTake+0x54>
1a001768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00176c:	f383 8811 	msr	BASEPRI, r3
1a001770:	f3bf 8f6f 	isb	sy
1a001774:	f3bf 8f4f 	dsb	sy
1a001778:	e7fe      	b.n	1a001778 <xQueueSemaphoreTake+0x4c>
1a00177a:	2500      	movs	r5, #0
1a00177c:	462e      	mov	r6, r5
1a00177e:	e051      	b.n	1a001824 <xQueueSemaphoreTake+0xf8>
1a001780:	2500      	movs	r5, #0
1a001782:	462e      	mov	r6, r5
1a001784:	e04e      	b.n	1a001824 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a001786:	3b01      	subs	r3, #1
1a001788:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00178a:	6823      	ldr	r3, [r4, #0]
1a00178c:	b913      	cbnz	r3, 1a001794 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a00178e:	f000 ff81 	bl	1a002694 <pvTaskIncrementMutexHeldCount>
1a001792:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001794:	6923      	ldr	r3, [r4, #16]
1a001796:	b163      	cbz	r3, 1a0017b2 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001798:	f104 0010 	add.w	r0, r4, #16
1a00179c:	f000 fdbe 	bl	1a00231c <xTaskRemoveFromEventList>
1a0017a0:	b138      	cbz	r0, 1a0017b2 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a0017a2:	4b48      	ldr	r3, [pc, #288]	; (1a0018c4 <xQueueSemaphoreTake+0x198>)
1a0017a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017a8:	601a      	str	r2, [r3, #0]
1a0017aa:	f3bf 8f4f 	dsb	sy
1a0017ae:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0017b2:	f001 fa69 	bl	1a002c88 <vPortExitCritical>
				return pdPASS;
1a0017b6:	2501      	movs	r5, #1
}
1a0017b8:	4628      	mov	r0, r5
1a0017ba:	b004      	add	sp, #16
1a0017bc:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a0017be:	b145      	cbz	r5, 1a0017d2 <xQueueSemaphoreTake+0xa6>
1a0017c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017c4:	f383 8811 	msr	BASEPRI, r3
1a0017c8:	f3bf 8f6f 	isb	sy
1a0017cc:	f3bf 8f4f 	dsb	sy
1a0017d0:	e7fe      	b.n	1a0017d0 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a0017d2:	f001 fa59 	bl	1a002c88 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0017d6:	e7ef      	b.n	1a0017b8 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0017d8:	a802      	add	r0, sp, #8
1a0017da:	f000 fde5 	bl	1a0023a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0017de:	2601      	movs	r6, #1
1a0017e0:	e02a      	b.n	1a001838 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a0017e2:	2300      	movs	r3, #0
1a0017e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0017e8:	e032      	b.n	1a001850 <xQueueSemaphoreTake+0x124>
1a0017ea:	2300      	movs	r3, #0
1a0017ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0017f0:	e034      	b.n	1a00185c <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a0017f2:	f001 fa27 	bl	1a002c44 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a0017f6:	6860      	ldr	r0, [r4, #4]
1a0017f8:	f000 fe38 	bl	1a00246c <xTaskPriorityInherit>
1a0017fc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a0017fe:	f001 fa43 	bl	1a002c88 <vPortExitCritical>
1a001802:	e03b      	b.n	1a00187c <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a001804:	4620      	mov	r0, r4
1a001806:	f7ff fcc8 	bl	1a00119a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00180a:	f000 fbd9 	bl	1a001fc0 <xTaskResumeAll>
1a00180e:	e009      	b.n	1a001824 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a001810:	4620      	mov	r0, r4
1a001812:	f7ff fcc2 	bl	1a00119a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001816:	f000 fbd3 	bl	1a001fc0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00181a:	4620      	mov	r0, r4
1a00181c:	f7ff fc63 	bl	1a0010e6 <prvIsQueueEmpty>
1a001820:	2800      	cmp	r0, #0
1a001822:	d140      	bne.n	1a0018a6 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a001824:	f001 fa0e 	bl	1a002c44 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001828:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a00182a:	2b00      	cmp	r3, #0
1a00182c:	d1ab      	bne.n	1a001786 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00182e:	9b01      	ldr	r3, [sp, #4]
1a001830:	2b00      	cmp	r3, #0
1a001832:	d0c4      	beq.n	1a0017be <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001834:	2e00      	cmp	r6, #0
1a001836:	d0cf      	beq.n	1a0017d8 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a001838:	f001 fa26 	bl	1a002c88 <vPortExitCritical>
		vTaskSuspendAll();
1a00183c:	f000 fb26 	bl	1a001e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001840:	f001 fa00 	bl	1a002c44 <vPortEnterCritical>
1a001844:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001848:	b25b      	sxtb	r3, r3
1a00184a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00184e:	d0c8      	beq.n	1a0017e2 <xQueueSemaphoreTake+0xb6>
1a001850:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001854:	b25b      	sxtb	r3, r3
1a001856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00185a:	d0c6      	beq.n	1a0017ea <xQueueSemaphoreTake+0xbe>
1a00185c:	f001 fa14 	bl	1a002c88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001860:	a901      	add	r1, sp, #4
1a001862:	a802      	add	r0, sp, #8
1a001864:	f000 fdac 	bl	1a0023c0 <xTaskCheckForTimeOut>
1a001868:	2800      	cmp	r0, #0
1a00186a:	d1d1      	bne.n	1a001810 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00186c:	4620      	mov	r0, r4
1a00186e:	f7ff fc3a 	bl	1a0010e6 <prvIsQueueEmpty>
1a001872:	2800      	cmp	r0, #0
1a001874:	d0c6      	beq.n	1a001804 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001876:	6823      	ldr	r3, [r4, #0]
1a001878:	2b00      	cmp	r3, #0
1a00187a:	d0ba      	beq.n	1a0017f2 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00187c:	9901      	ldr	r1, [sp, #4]
1a00187e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001882:	f000 fd17 	bl	1a0022b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001886:	4620      	mov	r0, r4
1a001888:	f7ff fc87 	bl	1a00119a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00188c:	f000 fb98 	bl	1a001fc0 <xTaskResumeAll>
1a001890:	2800      	cmp	r0, #0
1a001892:	d1c7      	bne.n	1a001824 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a001894:	4b0b      	ldr	r3, [pc, #44]	; (1a0018c4 <xQueueSemaphoreTake+0x198>)
1a001896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00189a:	601a      	str	r2, [r3, #0]
1a00189c:	f3bf 8f4f 	dsb	sy
1a0018a0:	f3bf 8f6f 	isb	sy
1a0018a4:	e7be      	b.n	1a001824 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a0018a6:	2d00      	cmp	r5, #0
1a0018a8:	d086      	beq.n	1a0017b8 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a0018aa:	f001 f9cb 	bl	1a002c44 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a0018ae:	4620      	mov	r0, r4
1a0018b0:	f7ff fc01 	bl	1a0010b6 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a0018b4:	4601      	mov	r1, r0
1a0018b6:	6860      	ldr	r0, [r4, #4]
1a0018b8:	f000 fe8c 	bl	1a0025d4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a0018bc:	f001 f9e4 	bl	1a002c88 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a0018c0:	2500      	movs	r5, #0
1a0018c2:	e779      	b.n	1a0017b8 <xQueueSemaphoreTake+0x8c>
1a0018c4:	e000ed04 	.word	0xe000ed04

1a0018c8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0018c8:	2300      	movs	r3, #0
1a0018ca:	2b07      	cmp	r3, #7
1a0018cc:	d80c      	bhi.n	1a0018e8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0018ce:	4a07      	ldr	r2, [pc, #28]	; (1a0018ec <vQueueAddToRegistry+0x24>)
1a0018d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0018d4:	b10a      	cbz	r2, 1a0018da <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0018d6:	3301      	adds	r3, #1
1a0018d8:	e7f7      	b.n	1a0018ca <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0018da:	4a04      	ldr	r2, [pc, #16]	; (1a0018ec <vQueueAddToRegistry+0x24>)
1a0018dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0018e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0018e4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0018e6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0018e8:	4770      	bx	lr
1a0018ea:	bf00      	nop
1a0018ec:	10002d18 	.word	0x10002d18

1a0018f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0018f0:	b570      	push	{r4, r5, r6, lr}
1a0018f2:	4604      	mov	r4, r0
1a0018f4:	460d      	mov	r5, r1
1a0018f6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0018f8:	f001 f9a4 	bl	1a002c44 <vPortEnterCritical>
1a0018fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001900:	b25b      	sxtb	r3, r3
1a001902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001906:	d00d      	beq.n	1a001924 <vQueueWaitForMessageRestricted+0x34>
1a001908:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00190c:	b25b      	sxtb	r3, r3
1a00190e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001912:	d00b      	beq.n	1a00192c <vQueueWaitForMessageRestricted+0x3c>
1a001914:	f001 f9b8 	bl	1a002c88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00191a:	b15b      	cbz	r3, 1a001934 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a00191c:	4620      	mov	r0, r4
1a00191e:	f7ff fc3c 	bl	1a00119a <prvUnlockQueue>
	}
1a001922:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001924:	2300      	movs	r3, #0
1a001926:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00192a:	e7ed      	b.n	1a001908 <vQueueWaitForMessageRestricted+0x18>
1a00192c:	2300      	movs	r3, #0
1a00192e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001932:	e7ef      	b.n	1a001914 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001934:	4632      	mov	r2, r6
1a001936:	4629      	mov	r1, r5
1a001938:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00193c:	f000 fcd2 	bl	1a0022e4 <vTaskPlaceOnEventListRestricted>
1a001940:	e7ec      	b.n	1a00191c <vQueueWaitForMessageRestricted+0x2c>

1a001942 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001942:	f100 0308 	add.w	r3, r0, #8
1a001946:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00194c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00194e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001950:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001952:	2300      	movs	r3, #0
1a001954:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001956:	4770      	bx	lr

1a001958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001958:	2300      	movs	r3, #0
1a00195a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a00195c:	4770      	bx	lr

1a00195e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a00195e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001960:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001962:	689a      	ldr	r2, [r3, #8]
1a001964:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001966:	689a      	ldr	r2, [r3, #8]
1a001968:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00196a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00196c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00196e:	6803      	ldr	r3, [r0, #0]
1a001970:	3301      	adds	r3, #1
1a001972:	6003      	str	r3, [r0, #0]
}
1a001974:	4770      	bx	lr

1a001976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001976:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001978:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00197a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00197e:	d002      	beq.n	1a001986 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001980:	f100 0208 	add.w	r2, r0, #8
1a001984:	e002      	b.n	1a00198c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001986:	6902      	ldr	r2, [r0, #16]
1a001988:	e004      	b.n	1a001994 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00198a:	461a      	mov	r2, r3
1a00198c:	6853      	ldr	r3, [r2, #4]
1a00198e:	681c      	ldr	r4, [r3, #0]
1a001990:	42ac      	cmp	r4, r5
1a001992:	d9fa      	bls.n	1a00198a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001994:	6853      	ldr	r3, [r2, #4]
1a001996:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001998:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00199a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a00199c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00199e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0019a0:	6803      	ldr	r3, [r0, #0]
1a0019a2:	3301      	adds	r3, #1
1a0019a4:	6003      	str	r3, [r0, #0]
}
1a0019a6:	bc30      	pop	{r4, r5}
1a0019a8:	4770      	bx	lr

1a0019aa <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0019aa:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0019ac:	6842      	ldr	r2, [r0, #4]
1a0019ae:	6881      	ldr	r1, [r0, #8]
1a0019b0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0019b2:	6882      	ldr	r2, [r0, #8]
1a0019b4:	6841      	ldr	r1, [r0, #4]
1a0019b6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0019b8:	685a      	ldr	r2, [r3, #4]
1a0019ba:	4282      	cmp	r2, r0
1a0019bc:	d006      	beq.n	1a0019cc <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0019be:	2200      	movs	r2, #0
1a0019c0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0019c2:	681a      	ldr	r2, [r3, #0]
1a0019c4:	3a01      	subs	r2, #1
1a0019c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0019c8:	6818      	ldr	r0, [r3, #0]
}
1a0019ca:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0019cc:	6882      	ldr	r2, [r0, #8]
1a0019ce:	605a      	str	r2, [r3, #4]
1a0019d0:	e7f5      	b.n	1a0019be <uxListRemove+0x14>
1a0019d2:	Address 0x000000001a0019d2 is out of bounds.


1a0019d4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0019d4:	4b03      	ldr	r3, [pc, #12]	; (1a0019e4 <vApplicationGetIdleTaskMemory+0x10>)
1a0019d6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0019d8:	4b03      	ldr	r3, [pc, #12]	; (1a0019e8 <vApplicationGetIdleTaskMemory+0x14>)
1a0019da:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0019dc:	235a      	movs	r3, #90	; 0x5a
1a0019de:	6013      	str	r3, [r2, #0]
}
1a0019e0:	4770      	bx	lr
1a0019e2:	bf00      	nop
1a0019e4:	1000282c 	.word	0x1000282c
1a0019e8:	10002124 	.word	0x10002124

1a0019ec <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0019ec:	4b03      	ldr	r3, [pc, #12]	; (1a0019fc <vApplicationGetTimerTaskMemory+0x10>)
1a0019ee:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0019f0:	4b03      	ldr	r3, [pc, #12]	; (1a001a00 <vApplicationGetTimerTaskMemory+0x14>)
1a0019f2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0019f4:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0019f8:	6013      	str	r3, [r2, #0]
1a0019fa:	4770      	bx	lr
1a0019fc:	1000288c 	.word	0x1000288c
1a001a00:	1000228c 	.word	0x1000228c

1a001a04 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a001a04:	e7fe      	b.n	1a001a04 <vApplicationStackOverflowHook>

1a001a06 <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a001a06:	e7fe      	b.n	1a001a06 <vApplicationMallocFailedHook>

1a001a08 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001a08:	4b08      	ldr	r3, [pc, #32]	; (1a001a2c <prvResetNextTaskUnblockTime+0x24>)
1a001a0a:	681b      	ldr	r3, [r3, #0]
1a001a0c:	681b      	ldr	r3, [r3, #0]
1a001a0e:	b13b      	cbz	r3, 1a001a20 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001a10:	4b06      	ldr	r3, [pc, #24]	; (1a001a2c <prvResetNextTaskUnblockTime+0x24>)
1a001a12:	681b      	ldr	r3, [r3, #0]
1a001a14:	68db      	ldr	r3, [r3, #12]
1a001a16:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001a18:	685a      	ldr	r2, [r3, #4]
1a001a1a:	4b05      	ldr	r3, [pc, #20]	; (1a001a30 <prvResetNextTaskUnblockTime+0x28>)
1a001a1c:	601a      	str	r2, [r3, #0]
	}
}
1a001a1e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001a20:	4b03      	ldr	r3, [pc, #12]	; (1a001a30 <prvResetNextTaskUnblockTime+0x28>)
1a001a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001a26:	601a      	str	r2, [r3, #0]
1a001a28:	4770      	bx	lr
1a001a2a:	bf00      	nop
1a001a2c:	100028f0 	.word	0x100028f0
1a001a30:	100029c4 	.word	0x100029c4

1a001a34 <prvInitialiseNewTask>:
{
1a001a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001a38:	4681      	mov	r9, r0
1a001a3a:	460d      	mov	r5, r1
1a001a3c:	4617      	mov	r7, r2
1a001a3e:	469a      	mov	sl, r3
1a001a40:	9e08      	ldr	r6, [sp, #32]
1a001a42:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001a46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001a48:	0092      	lsls	r2, r2, #2
1a001a4a:	21a5      	movs	r1, #165	; 0xa5
1a001a4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001a4e:	f003 f954 	bl	1a004cfa <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001a54:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001a58:	3a01      	subs	r2, #1
1a001a5a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001a5e:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001a62:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001a64:	2300      	movs	r3, #0
1a001a66:	2b0f      	cmp	r3, #15
1a001a68:	d807      	bhi.n	1a001a7a <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001a6a:	5ce9      	ldrb	r1, [r5, r3]
1a001a6c:	18e2      	adds	r2, r4, r3
1a001a6e:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001a72:	5cea      	ldrb	r2, [r5, r3]
1a001a74:	b10a      	cbz	r2, 1a001a7a <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001a76:	3301      	adds	r3, #1
1a001a78:	e7f5      	b.n	1a001a66 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001a7a:	2300      	movs	r3, #0
1a001a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001a80:	2e06      	cmp	r6, #6
1a001a82:	d900      	bls.n	1a001a86 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001a84:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001a86:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001a88:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001a8a:	2500      	movs	r5, #0
1a001a8c:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001a8e:	1d20      	adds	r0, r4, #4
1a001a90:	f7ff ff62 	bl	1a001958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001a94:	f104 0018 	add.w	r0, r4, #24
1a001a98:	f7ff ff5e 	bl	1a001958 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001a9c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a9e:	f1c6 0607 	rsb	r6, r6, #7
1a001aa2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001aa4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001aa6:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001aa8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001aac:	4652      	mov	r2, sl
1a001aae:	4649      	mov	r1, r9
1a001ab0:	4638      	mov	r0, r7
1a001ab2:	f001 f89b 	bl	1a002bec <pxPortInitialiseStack>
1a001ab6:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001ab8:	f1b8 0f00 	cmp.w	r8, #0
1a001abc:	d001      	beq.n	1a001ac2 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001abe:	f8c8 4000 	str.w	r4, [r8]
}
1a001ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ac6:	Address 0x000000001a001ac6 is out of bounds.


1a001ac8 <prvInitialiseTaskLists>:
{
1a001ac8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001aca:	2400      	movs	r4, #0
1a001acc:	e007      	b.n	1a001ade <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001ace:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001ad2:	0093      	lsls	r3, r2, #2
1a001ad4:	480e      	ldr	r0, [pc, #56]	; (1a001b10 <prvInitialiseTaskLists+0x48>)
1a001ad6:	4418      	add	r0, r3
1a001ad8:	f7ff ff33 	bl	1a001942 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001adc:	3401      	adds	r4, #1
1a001ade:	2c06      	cmp	r4, #6
1a001ae0:	d9f5      	bls.n	1a001ace <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001ae2:	4d0c      	ldr	r5, [pc, #48]	; (1a001b14 <prvInitialiseTaskLists+0x4c>)
1a001ae4:	4628      	mov	r0, r5
1a001ae6:	f7ff ff2c 	bl	1a001942 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001aea:	4c0b      	ldr	r4, [pc, #44]	; (1a001b18 <prvInitialiseTaskLists+0x50>)
1a001aec:	4620      	mov	r0, r4
1a001aee:	f7ff ff28 	bl	1a001942 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001af2:	480a      	ldr	r0, [pc, #40]	; (1a001b1c <prvInitialiseTaskLists+0x54>)
1a001af4:	f7ff ff25 	bl	1a001942 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001af8:	4809      	ldr	r0, [pc, #36]	; (1a001b20 <prvInitialiseTaskLists+0x58>)
1a001afa:	f7ff ff22 	bl	1a001942 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001afe:	4809      	ldr	r0, [pc, #36]	; (1a001b24 <prvInitialiseTaskLists+0x5c>)
1a001b00:	f7ff ff1f 	bl	1a001942 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001b04:	4b08      	ldr	r3, [pc, #32]	; (1a001b28 <prvInitialiseTaskLists+0x60>)
1a001b06:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001b08:	4b08      	ldr	r3, [pc, #32]	; (1a001b2c <prvInitialiseTaskLists+0x64>)
1a001b0a:	601c      	str	r4, [r3, #0]
}
1a001b0c:	bd38      	pop	{r3, r4, r5, pc}
1a001b0e:	bf00      	nop
1a001b10:	100028f8 	.word	0x100028f8
1a001b14:	1000299c 	.word	0x1000299c
1a001b18:	100029b0 	.word	0x100029b0
1a001b1c:	100029cc 	.word	0x100029cc
1a001b20:	100029f8 	.word	0x100029f8
1a001b24:	100029e4 	.word	0x100029e4
1a001b28:	100028f0 	.word	0x100028f0
1a001b2c:	100028f4 	.word	0x100028f4

1a001b30 <prvAddNewTaskToReadyList>:
{
1a001b30:	b510      	push	{r4, lr}
1a001b32:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001b34:	f001 f886 	bl	1a002c44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001b38:	4a21      	ldr	r2, [pc, #132]	; (1a001bc0 <prvAddNewTaskToReadyList+0x90>)
1a001b3a:	6813      	ldr	r3, [r2, #0]
1a001b3c:	3301      	adds	r3, #1
1a001b3e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001b40:	4b20      	ldr	r3, [pc, #128]	; (1a001bc4 <prvAddNewTaskToReadyList+0x94>)
1a001b42:	681b      	ldr	r3, [r3, #0]
1a001b44:	b15b      	cbz	r3, 1a001b5e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001b46:	4b20      	ldr	r3, [pc, #128]	; (1a001bc8 <prvAddNewTaskToReadyList+0x98>)
1a001b48:	681b      	ldr	r3, [r3, #0]
1a001b4a:	b96b      	cbnz	r3, 1a001b68 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001b4c:	4b1d      	ldr	r3, [pc, #116]	; (1a001bc4 <prvAddNewTaskToReadyList+0x94>)
1a001b4e:	681b      	ldr	r3, [r3, #0]
1a001b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001b52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b54:	429a      	cmp	r2, r3
1a001b56:	d807      	bhi.n	1a001b68 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001b58:	4b1a      	ldr	r3, [pc, #104]	; (1a001bc4 <prvAddNewTaskToReadyList+0x94>)
1a001b5a:	601c      	str	r4, [r3, #0]
1a001b5c:	e004      	b.n	1a001b68 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001b5e:	4b19      	ldr	r3, [pc, #100]	; (1a001bc4 <prvAddNewTaskToReadyList+0x94>)
1a001b60:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001b62:	6813      	ldr	r3, [r2, #0]
1a001b64:	2b01      	cmp	r3, #1
1a001b66:	d027      	beq.n	1a001bb8 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001b68:	4a18      	ldr	r2, [pc, #96]	; (1a001bcc <prvAddNewTaskToReadyList+0x9c>)
1a001b6a:	6813      	ldr	r3, [r2, #0]
1a001b6c:	3301      	adds	r3, #1
1a001b6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001b70:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001b72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b74:	2201      	movs	r2, #1
1a001b76:	409a      	lsls	r2, r3
1a001b78:	4915      	ldr	r1, [pc, #84]	; (1a001bd0 <prvAddNewTaskToReadyList+0xa0>)
1a001b7a:	6808      	ldr	r0, [r1, #0]
1a001b7c:	4302      	orrs	r2, r0
1a001b7e:	600a      	str	r2, [r1, #0]
1a001b80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b84:	009a      	lsls	r2, r3, #2
1a001b86:	1d21      	adds	r1, r4, #4
1a001b88:	4812      	ldr	r0, [pc, #72]	; (1a001bd4 <prvAddNewTaskToReadyList+0xa4>)
1a001b8a:	4410      	add	r0, r2
1a001b8c:	f7ff fee7 	bl	1a00195e <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001b90:	f001 f87a 	bl	1a002c88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001b94:	4b0c      	ldr	r3, [pc, #48]	; (1a001bc8 <prvAddNewTaskToReadyList+0x98>)
1a001b96:	681b      	ldr	r3, [r3, #0]
1a001b98:	b16b      	cbz	r3, 1a001bb6 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001b9a:	4b0a      	ldr	r3, [pc, #40]	; (1a001bc4 <prvAddNewTaskToReadyList+0x94>)
1a001b9c:	681b      	ldr	r3, [r3, #0]
1a001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ba0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001ba2:	429a      	cmp	r2, r3
1a001ba4:	d207      	bcs.n	1a001bb6 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001ba6:	4b0c      	ldr	r3, [pc, #48]	; (1a001bd8 <prvAddNewTaskToReadyList+0xa8>)
1a001ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001bac:	601a      	str	r2, [r3, #0]
1a001bae:	f3bf 8f4f 	dsb	sy
1a001bb2:	f3bf 8f6f 	isb	sy
}
1a001bb6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001bb8:	f7ff ff86 	bl	1a001ac8 <prvInitialiseTaskLists>
1a001bbc:	e7d4      	b.n	1a001b68 <prvAddNewTaskToReadyList+0x38>
1a001bbe:	bf00      	nop
1a001bc0:	10002984 	.word	0x10002984
1a001bc4:	100028ec 	.word	0x100028ec
1a001bc8:	100029e0 	.word	0x100029e0
1a001bcc:	10002994 	.word	0x10002994
1a001bd0:	10002998 	.word	0x10002998
1a001bd4:	100028f8 	.word	0x100028f8
1a001bd8:	e000ed04 	.word	0xe000ed04

1a001bdc <prvDeleteTCB>:
	{
1a001bdc:	b510      	push	{r4, lr}
1a001bde:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001be0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001be4:	b933      	cbnz	r3, 1a001bf4 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001be6:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001be8:	f7ff fa5a 	bl	1a0010a0 <vPortFree>
				vPortFree( pxTCB );
1a001bec:	4620      	mov	r0, r4
1a001bee:	f7ff fa57 	bl	1a0010a0 <vPortFree>
	}
1a001bf2:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001bf4:	2b01      	cmp	r3, #1
1a001bf6:	d00a      	beq.n	1a001c0e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001bf8:	2b02      	cmp	r3, #2
1a001bfa:	d0fa      	beq.n	1a001bf2 <prvDeleteTCB+0x16>
1a001bfc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c00:	f383 8811 	msr	BASEPRI, r3
1a001c04:	f3bf 8f6f 	isb	sy
1a001c08:	f3bf 8f4f 	dsb	sy
1a001c0c:	e7fe      	b.n	1a001c0c <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001c0e:	f7ff fa47 	bl	1a0010a0 <vPortFree>
1a001c12:	e7ee      	b.n	1a001bf2 <prvDeleteTCB+0x16>

1a001c14 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001c14:	4b0f      	ldr	r3, [pc, #60]	; (1a001c54 <prvCheckTasksWaitingTermination+0x40>)
1a001c16:	681b      	ldr	r3, [r3, #0]
1a001c18:	b1d3      	cbz	r3, 1a001c50 <prvCheckTasksWaitingTermination+0x3c>
{
1a001c1a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001c1c:	f001 f812 	bl	1a002c44 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001c20:	4b0d      	ldr	r3, [pc, #52]	; (1a001c58 <prvCheckTasksWaitingTermination+0x44>)
1a001c22:	68db      	ldr	r3, [r3, #12]
1a001c24:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001c26:	1d20      	adds	r0, r4, #4
1a001c28:	f7ff febf 	bl	1a0019aa <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001c2c:	4a0b      	ldr	r2, [pc, #44]	; (1a001c5c <prvCheckTasksWaitingTermination+0x48>)
1a001c2e:	6813      	ldr	r3, [r2, #0]
1a001c30:	3b01      	subs	r3, #1
1a001c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001c34:	4a07      	ldr	r2, [pc, #28]	; (1a001c54 <prvCheckTasksWaitingTermination+0x40>)
1a001c36:	6813      	ldr	r3, [r2, #0]
1a001c38:	3b01      	subs	r3, #1
1a001c3a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001c3c:	f001 f824 	bl	1a002c88 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001c40:	4620      	mov	r0, r4
1a001c42:	f7ff ffcb 	bl	1a001bdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001c46:	4b03      	ldr	r3, [pc, #12]	; (1a001c54 <prvCheckTasksWaitingTermination+0x40>)
1a001c48:	681b      	ldr	r3, [r3, #0]
1a001c4a:	2b00      	cmp	r3, #0
1a001c4c:	d1e6      	bne.n	1a001c1c <prvCheckTasksWaitingTermination+0x8>
}
1a001c4e:	bd10      	pop	{r4, pc}
1a001c50:	4770      	bx	lr
1a001c52:	bf00      	nop
1a001c54:	10002988 	.word	0x10002988
1a001c58:	100029f8 	.word	0x100029f8
1a001c5c:	10002984 	.word	0x10002984

1a001c60 <prvIdleTask>:
{
1a001c60:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001c62:	f7ff ffd7 	bl	1a001c14 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001c66:	4b06      	ldr	r3, [pc, #24]	; (1a001c80 <prvIdleTask+0x20>)
1a001c68:	681b      	ldr	r3, [r3, #0]
1a001c6a:	2b01      	cmp	r3, #1
1a001c6c:	d9f9      	bls.n	1a001c62 <prvIdleTask+0x2>
				taskYIELD();
1a001c6e:	4b05      	ldr	r3, [pc, #20]	; (1a001c84 <prvIdleTask+0x24>)
1a001c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c74:	601a      	str	r2, [r3, #0]
1a001c76:	f3bf 8f4f 	dsb	sy
1a001c7a:	f3bf 8f6f 	isb	sy
1a001c7e:	e7f0      	b.n	1a001c62 <prvIdleTask+0x2>
1a001c80:	100028f8 	.word	0x100028f8
1a001c84:	e000ed04 	.word	0xe000ed04

1a001c88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001c88:	b570      	push	{r4, r5, r6, lr}
1a001c8a:	4604      	mov	r4, r0
1a001c8c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001c8e:	4b1d      	ldr	r3, [pc, #116]	; (1a001d04 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001c90:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001c92:	4b1d      	ldr	r3, [pc, #116]	; (1a001d08 <prvAddCurrentTaskToDelayedList+0x80>)
1a001c94:	6818      	ldr	r0, [r3, #0]
1a001c96:	3004      	adds	r0, #4
1a001c98:	f7ff fe87 	bl	1a0019aa <uxListRemove>
1a001c9c:	b950      	cbnz	r0, 1a001cb4 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001c9e:	4b1a      	ldr	r3, [pc, #104]	; (1a001d08 <prvAddCurrentTaskToDelayedList+0x80>)
1a001ca0:	681b      	ldr	r3, [r3, #0]
1a001ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ca4:	2301      	movs	r3, #1
1a001ca6:	fa03 f202 	lsl.w	r2, r3, r2
1a001caa:	4918      	ldr	r1, [pc, #96]	; (1a001d0c <prvAddCurrentTaskToDelayedList+0x84>)
1a001cac:	680b      	ldr	r3, [r1, #0]
1a001cae:	ea23 0302 	bic.w	r3, r3, r2
1a001cb2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001cb4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001cb8:	d013      	beq.n	1a001ce2 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001cba:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001cbc:	4b12      	ldr	r3, [pc, #72]	; (1a001d08 <prvAddCurrentTaskToDelayedList+0x80>)
1a001cbe:	681b      	ldr	r3, [r3, #0]
1a001cc0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001cc2:	42a5      	cmp	r5, r4
1a001cc4:	d816      	bhi.n	1a001cf4 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001cc6:	4b12      	ldr	r3, [pc, #72]	; (1a001d10 <prvAddCurrentTaskToDelayedList+0x88>)
1a001cc8:	6818      	ldr	r0, [r3, #0]
1a001cca:	4b0f      	ldr	r3, [pc, #60]	; (1a001d08 <prvAddCurrentTaskToDelayedList+0x80>)
1a001ccc:	6819      	ldr	r1, [r3, #0]
1a001cce:	3104      	adds	r1, #4
1a001cd0:	f7ff fe51 	bl	1a001976 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001cd4:	4b0f      	ldr	r3, [pc, #60]	; (1a001d14 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001cd6:	681b      	ldr	r3, [r3, #0]
1a001cd8:	42a3      	cmp	r3, r4
1a001cda:	d912      	bls.n	1a001d02 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001cdc:	4b0d      	ldr	r3, [pc, #52]	; (1a001d14 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001cde:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001ce0:	e00f      	b.n	1a001d02 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001ce2:	2e00      	cmp	r6, #0
1a001ce4:	d0e9      	beq.n	1a001cba <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001ce6:	4b08      	ldr	r3, [pc, #32]	; (1a001d08 <prvAddCurrentTaskToDelayedList+0x80>)
1a001ce8:	6819      	ldr	r1, [r3, #0]
1a001cea:	3104      	adds	r1, #4
1a001cec:	480a      	ldr	r0, [pc, #40]	; (1a001d18 <prvAddCurrentTaskToDelayedList+0x90>)
1a001cee:	f7ff fe36 	bl	1a00195e <vListInsertEnd>
1a001cf2:	e006      	b.n	1a001d02 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001cf4:	4b09      	ldr	r3, [pc, #36]	; (1a001d1c <prvAddCurrentTaskToDelayedList+0x94>)
1a001cf6:	6818      	ldr	r0, [r3, #0]
1a001cf8:	4b03      	ldr	r3, [pc, #12]	; (1a001d08 <prvAddCurrentTaskToDelayedList+0x80>)
1a001cfa:	6819      	ldr	r1, [r3, #0]
1a001cfc:	3104      	adds	r1, #4
1a001cfe:	f7ff fe3a 	bl	1a001976 <vListInsert>
}
1a001d02:	bd70      	pop	{r4, r5, r6, pc}
1a001d04:	10002a0c 	.word	0x10002a0c
1a001d08:	100028ec 	.word	0x100028ec
1a001d0c:	10002998 	.word	0x10002998
1a001d10:	100028f0 	.word	0x100028f0
1a001d14:	100029c4 	.word	0x100029c4
1a001d18:	100029e4 	.word	0x100029e4
1a001d1c:	100028f4 	.word	0x100028f4

1a001d20 <xTaskCreateStatic>:
	{
1a001d20:	b570      	push	{r4, r5, r6, lr}
1a001d22:	b086      	sub	sp, #24
1a001d24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001d26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001d28:	b945      	cbnz	r5, 1a001d3c <xTaskCreateStatic+0x1c>
1a001d2a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d2e:	f383 8811 	msr	BASEPRI, r3
1a001d32:	f3bf 8f6f 	isb	sy
1a001d36:	f3bf 8f4f 	dsb	sy
1a001d3a:	e7fe      	b.n	1a001d3a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001d3c:	b944      	cbnz	r4, 1a001d50 <xTaskCreateStatic+0x30>
1a001d3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d42:	f383 8811 	msr	BASEPRI, r3
1a001d46:	f3bf 8f6f 	isb	sy
1a001d4a:	f3bf 8f4f 	dsb	sy
1a001d4e:	e7fe      	b.n	1a001d4e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001d50:	2660      	movs	r6, #96	; 0x60
1a001d52:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001d54:	9e04      	ldr	r6, [sp, #16]
1a001d56:	2e60      	cmp	r6, #96	; 0x60
1a001d58:	d008      	beq.n	1a001d6c <xTaskCreateStatic+0x4c>
1a001d5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d5e:	f383 8811 	msr	BASEPRI, r3
1a001d62:	f3bf 8f6f 	isb	sy
1a001d66:	f3bf 8f4f 	dsb	sy
1a001d6a:	e7fe      	b.n	1a001d6a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001d6c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001d6e:	2502      	movs	r5, #2
1a001d70:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001d74:	2500      	movs	r5, #0
1a001d76:	9503      	str	r5, [sp, #12]
1a001d78:	9402      	str	r4, [sp, #8]
1a001d7a:	ad05      	add	r5, sp, #20
1a001d7c:	9501      	str	r5, [sp, #4]
1a001d7e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001d80:	9500      	str	r5, [sp, #0]
1a001d82:	f7ff fe57 	bl	1a001a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001d86:	4620      	mov	r0, r4
1a001d88:	f7ff fed2 	bl	1a001b30 <prvAddNewTaskToReadyList>
	}
1a001d8c:	9805      	ldr	r0, [sp, #20]
1a001d8e:	b006      	add	sp, #24
1a001d90:	bd70      	pop	{r4, r5, r6, pc}

1a001d92 <xTaskCreate>:
	{
1a001d92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001d96:	b085      	sub	sp, #20
1a001d98:	4607      	mov	r7, r0
1a001d9a:	4688      	mov	r8, r1
1a001d9c:	4615      	mov	r5, r2
1a001d9e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001da0:	0090      	lsls	r0, r2, #2
1a001da2:	f7ff f945 	bl	1a001030 <pvPortMalloc>
			if( pxStack != NULL )
1a001da6:	b308      	cbz	r0, 1a001dec <xTaskCreate+0x5a>
1a001da8:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001daa:	2060      	movs	r0, #96	; 0x60
1a001dac:	f7ff f940 	bl	1a001030 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001db0:	4604      	mov	r4, r0
1a001db2:	b1b8      	cbz	r0, 1a001de4 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001db4:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001db6:	b1e4      	cbz	r4, 1a001df2 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001db8:	2300      	movs	r3, #0
1a001dba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001dbe:	9303      	str	r3, [sp, #12]
1a001dc0:	9402      	str	r4, [sp, #8]
1a001dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001dc4:	9301      	str	r3, [sp, #4]
1a001dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001dc8:	9300      	str	r3, [sp, #0]
1a001dca:	464b      	mov	r3, r9
1a001dcc:	462a      	mov	r2, r5
1a001dce:	4641      	mov	r1, r8
1a001dd0:	4638      	mov	r0, r7
1a001dd2:	f7ff fe2f 	bl	1a001a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001dd6:	4620      	mov	r0, r4
1a001dd8:	f7ff feaa 	bl	1a001b30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001ddc:	2001      	movs	r0, #1
	}
1a001dde:	b005      	add	sp, #20
1a001de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001de4:	4630      	mov	r0, r6
1a001de6:	f7ff f95b 	bl	1a0010a0 <vPortFree>
1a001dea:	e7e4      	b.n	1a001db6 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001df0:	e7f5      	b.n	1a001dde <xTaskCreate+0x4c>
1a001df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001df6:	e7f2      	b.n	1a001dde <xTaskCreate+0x4c>

1a001df8 <vTaskStartScheduler>:
{
1a001df8:	b510      	push	{r4, lr}
1a001dfa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001dfc:	2400      	movs	r4, #0
1a001dfe:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001e00:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001e02:	aa07      	add	r2, sp, #28
1a001e04:	a906      	add	r1, sp, #24
1a001e06:	a805      	add	r0, sp, #20
1a001e08:	f7ff fde4 	bl	1a0019d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001e0c:	9b05      	ldr	r3, [sp, #20]
1a001e0e:	9302      	str	r3, [sp, #8]
1a001e10:	9b06      	ldr	r3, [sp, #24]
1a001e12:	9301      	str	r3, [sp, #4]
1a001e14:	9400      	str	r4, [sp, #0]
1a001e16:	4623      	mov	r3, r4
1a001e18:	9a07      	ldr	r2, [sp, #28]
1a001e1a:	4917      	ldr	r1, [pc, #92]	; (1a001e78 <vTaskStartScheduler+0x80>)
1a001e1c:	4817      	ldr	r0, [pc, #92]	; (1a001e7c <vTaskStartScheduler+0x84>)
1a001e1e:	f7ff ff7f 	bl	1a001d20 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001e22:	b140      	cbz	r0, 1a001e36 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001e24:	f000 fcd0 	bl	1a0027c8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001e28:	2801      	cmp	r0, #1
1a001e2a:	d006      	beq.n	1a001e3a <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001e2c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001e30:	d018      	beq.n	1a001e64 <vTaskStartScheduler+0x6c>
}
1a001e32:	b008      	add	sp, #32
1a001e34:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001e36:	2000      	movs	r0, #0
1a001e38:	e7f6      	b.n	1a001e28 <vTaskStartScheduler+0x30>
1a001e3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e3e:	f383 8811 	msr	BASEPRI, r3
1a001e42:	f3bf 8f6f 	isb	sy
1a001e46:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001e4a:	4b0d      	ldr	r3, [pc, #52]	; (1a001e80 <vTaskStartScheduler+0x88>)
1a001e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001e50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001e52:	4b0c      	ldr	r3, [pc, #48]	; (1a001e84 <vTaskStartScheduler+0x8c>)
1a001e54:	2201      	movs	r2, #1
1a001e56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001e58:	4b0b      	ldr	r3, [pc, #44]	; (1a001e88 <vTaskStartScheduler+0x90>)
1a001e5a:	2200      	movs	r2, #0
1a001e5c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001e5e:	f000 ff93 	bl	1a002d88 <xPortStartScheduler>
1a001e62:	e7e6      	b.n	1a001e32 <vTaskStartScheduler+0x3a>
1a001e64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e68:	f383 8811 	msr	BASEPRI, r3
1a001e6c:	f3bf 8f6f 	isb	sy
1a001e70:	f3bf 8f4f 	dsb	sy
1a001e74:	e7fe      	b.n	1a001e74 <vTaskStartScheduler+0x7c>
1a001e76:	bf00      	nop
1a001e78:	1a0052e8 	.word	0x1a0052e8
1a001e7c:	1a001c61 	.word	0x1a001c61
1a001e80:	100029c4 	.word	0x100029c4
1a001e84:	100029e0 	.word	0x100029e0
1a001e88:	10002a0c 	.word	0x10002a0c

1a001e8c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001e8c:	4a02      	ldr	r2, [pc, #8]	; (1a001e98 <vTaskSuspendAll+0xc>)
1a001e8e:	6813      	ldr	r3, [r2, #0]
1a001e90:	3301      	adds	r3, #1
1a001e92:	6013      	str	r3, [r2, #0]
}
1a001e94:	4770      	bx	lr
1a001e96:	bf00      	nop
1a001e98:	10002990 	.word	0x10002990

1a001e9c <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001e9c:	4b01      	ldr	r3, [pc, #4]	; (1a001ea4 <xTaskGetTickCount+0x8>)
1a001e9e:	6818      	ldr	r0, [r3, #0]
}
1a001ea0:	4770      	bx	lr
1a001ea2:	bf00      	nop
1a001ea4:	10002a0c 	.word	0x10002a0c

1a001ea8 <xTaskIncrementTick>:
{
1a001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001eaa:	4b3a      	ldr	r3, [pc, #232]	; (1a001f94 <xTaskIncrementTick+0xec>)
1a001eac:	681b      	ldr	r3, [r3, #0]
1a001eae:	2b00      	cmp	r3, #0
1a001eb0:	d164      	bne.n	1a001f7c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001eb2:	4b39      	ldr	r3, [pc, #228]	; (1a001f98 <xTaskIncrementTick+0xf0>)
1a001eb4:	681d      	ldr	r5, [r3, #0]
1a001eb6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001eb8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001eba:	b9c5      	cbnz	r5, 1a001eee <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001ebc:	4b37      	ldr	r3, [pc, #220]	; (1a001f9c <xTaskIncrementTick+0xf4>)
1a001ebe:	681b      	ldr	r3, [r3, #0]
1a001ec0:	681b      	ldr	r3, [r3, #0]
1a001ec2:	b143      	cbz	r3, 1a001ed6 <xTaskIncrementTick+0x2e>
1a001ec4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ec8:	f383 8811 	msr	BASEPRI, r3
1a001ecc:	f3bf 8f6f 	isb	sy
1a001ed0:	f3bf 8f4f 	dsb	sy
1a001ed4:	e7fe      	b.n	1a001ed4 <xTaskIncrementTick+0x2c>
1a001ed6:	4a31      	ldr	r2, [pc, #196]	; (1a001f9c <xTaskIncrementTick+0xf4>)
1a001ed8:	6811      	ldr	r1, [r2, #0]
1a001eda:	4b31      	ldr	r3, [pc, #196]	; (1a001fa0 <xTaskIncrementTick+0xf8>)
1a001edc:	6818      	ldr	r0, [r3, #0]
1a001ede:	6010      	str	r0, [r2, #0]
1a001ee0:	6019      	str	r1, [r3, #0]
1a001ee2:	4a30      	ldr	r2, [pc, #192]	; (1a001fa4 <xTaskIncrementTick+0xfc>)
1a001ee4:	6813      	ldr	r3, [r2, #0]
1a001ee6:	3301      	adds	r3, #1
1a001ee8:	6013      	str	r3, [r2, #0]
1a001eea:	f7ff fd8d 	bl	1a001a08 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001eee:	4b2e      	ldr	r3, [pc, #184]	; (1a001fa8 <xTaskIncrementTick+0x100>)
1a001ef0:	681b      	ldr	r3, [r3, #0]
1a001ef2:	42ab      	cmp	r3, r5
1a001ef4:	d938      	bls.n	1a001f68 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001ef6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001ef8:	4b2c      	ldr	r3, [pc, #176]	; (1a001fac <xTaskIncrementTick+0x104>)
1a001efa:	681b      	ldr	r3, [r3, #0]
1a001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001efe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f02:	009a      	lsls	r2, r3, #2
1a001f04:	4b2a      	ldr	r3, [pc, #168]	; (1a001fb0 <xTaskIncrementTick+0x108>)
1a001f06:	589b      	ldr	r3, [r3, r2]
1a001f08:	2b01      	cmp	r3, #1
1a001f0a:	d93c      	bls.n	1a001f86 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001f0c:	2401      	movs	r4, #1
1a001f0e:	e03a      	b.n	1a001f86 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001f10:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001f12:	4b22      	ldr	r3, [pc, #136]	; (1a001f9c <xTaskIncrementTick+0xf4>)
1a001f14:	681b      	ldr	r3, [r3, #0]
1a001f16:	681b      	ldr	r3, [r3, #0]
1a001f18:	b343      	cbz	r3, 1a001f6c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001f1a:	4b20      	ldr	r3, [pc, #128]	; (1a001f9c <xTaskIncrementTick+0xf4>)
1a001f1c:	681b      	ldr	r3, [r3, #0]
1a001f1e:	68db      	ldr	r3, [r3, #12]
1a001f20:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001f22:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001f24:	429d      	cmp	r5, r3
1a001f26:	d326      	bcc.n	1a001f76 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001f28:	1d37      	adds	r7, r6, #4
1a001f2a:	4638      	mov	r0, r7
1a001f2c:	f7ff fd3d 	bl	1a0019aa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001f30:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001f32:	b11b      	cbz	r3, 1a001f3c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001f34:	f106 0018 	add.w	r0, r6, #24
1a001f38:	f7ff fd37 	bl	1a0019aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001f3c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001f3e:	2201      	movs	r2, #1
1a001f40:	409a      	lsls	r2, r3
1a001f42:	491c      	ldr	r1, [pc, #112]	; (1a001fb4 <xTaskIncrementTick+0x10c>)
1a001f44:	6808      	ldr	r0, [r1, #0]
1a001f46:	4302      	orrs	r2, r0
1a001f48:	600a      	str	r2, [r1, #0]
1a001f4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f4e:	009a      	lsls	r2, r3, #2
1a001f50:	4639      	mov	r1, r7
1a001f52:	4817      	ldr	r0, [pc, #92]	; (1a001fb0 <xTaskIncrementTick+0x108>)
1a001f54:	4410      	add	r0, r2
1a001f56:	f7ff fd02 	bl	1a00195e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001f5a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001f5c:	4b13      	ldr	r3, [pc, #76]	; (1a001fac <xTaskIncrementTick+0x104>)
1a001f5e:	681b      	ldr	r3, [r3, #0]
1a001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f62:	429a      	cmp	r2, r3
1a001f64:	d2d4      	bcs.n	1a001f10 <xTaskIncrementTick+0x68>
1a001f66:	e7d4      	b.n	1a001f12 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001f68:	2400      	movs	r4, #0
1a001f6a:	e7d2      	b.n	1a001f12 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f6c:	4b0e      	ldr	r3, [pc, #56]	; (1a001fa8 <xTaskIncrementTick+0x100>)
1a001f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001f72:	601a      	str	r2, [r3, #0]
					break;
1a001f74:	e7c0      	b.n	1a001ef8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001f76:	4a0c      	ldr	r2, [pc, #48]	; (1a001fa8 <xTaskIncrementTick+0x100>)
1a001f78:	6013      	str	r3, [r2, #0]
						break;
1a001f7a:	e7bd      	b.n	1a001ef8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001f7c:	4a0e      	ldr	r2, [pc, #56]	; (1a001fb8 <xTaskIncrementTick+0x110>)
1a001f7e:	6813      	ldr	r3, [r2, #0]
1a001f80:	3301      	adds	r3, #1
1a001f82:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001f84:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001f86:	4b0d      	ldr	r3, [pc, #52]	; (1a001fbc <xTaskIncrementTick+0x114>)
1a001f88:	681b      	ldr	r3, [r3, #0]
1a001f8a:	b103      	cbz	r3, 1a001f8e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001f8c:	2401      	movs	r4, #1
}
1a001f8e:	4620      	mov	r0, r4
1a001f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001f92:	bf00      	nop
1a001f94:	10002990 	.word	0x10002990
1a001f98:	10002a0c 	.word	0x10002a0c
1a001f9c:	100028f0 	.word	0x100028f0
1a001fa0:	100028f4 	.word	0x100028f4
1a001fa4:	100029c8 	.word	0x100029c8
1a001fa8:	100029c4 	.word	0x100029c4
1a001fac:	100028ec 	.word	0x100028ec
1a001fb0:	100028f8 	.word	0x100028f8
1a001fb4:	10002998 	.word	0x10002998
1a001fb8:	1000298c 	.word	0x1000298c
1a001fbc:	10002a10 	.word	0x10002a10

1a001fc0 <xTaskResumeAll>:
{
1a001fc0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001fc2:	4b33      	ldr	r3, [pc, #204]	; (1a002090 <xTaskResumeAll+0xd0>)
1a001fc4:	681b      	ldr	r3, [r3, #0]
1a001fc6:	b943      	cbnz	r3, 1a001fda <xTaskResumeAll+0x1a>
1a001fc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fcc:	f383 8811 	msr	BASEPRI, r3
1a001fd0:	f3bf 8f6f 	isb	sy
1a001fd4:	f3bf 8f4f 	dsb	sy
1a001fd8:	e7fe      	b.n	1a001fd8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001fda:	f000 fe33 	bl	1a002c44 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001fde:	4b2c      	ldr	r3, [pc, #176]	; (1a002090 <xTaskResumeAll+0xd0>)
1a001fe0:	681a      	ldr	r2, [r3, #0]
1a001fe2:	3a01      	subs	r2, #1
1a001fe4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001fe6:	681b      	ldr	r3, [r3, #0]
1a001fe8:	2b00      	cmp	r3, #0
1a001fea:	d14d      	bne.n	1a002088 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001fec:	4b29      	ldr	r3, [pc, #164]	; (1a002094 <xTaskResumeAll+0xd4>)
1a001fee:	681b      	ldr	r3, [r3, #0]
1a001ff0:	b923      	cbnz	r3, 1a001ffc <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001ff2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001ff4:	f000 fe48 	bl	1a002c88 <vPortExitCritical>
}
1a001ff8:	4620      	mov	r0, r4
1a001ffa:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001ffc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001ffe:	4b26      	ldr	r3, [pc, #152]	; (1a002098 <xTaskResumeAll+0xd8>)
1a002000:	681b      	ldr	r3, [r3, #0]
1a002002:	b31b      	cbz	r3, 1a00204c <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a002004:	4b24      	ldr	r3, [pc, #144]	; (1a002098 <xTaskResumeAll+0xd8>)
1a002006:	68db      	ldr	r3, [r3, #12]
1a002008:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00200a:	f104 0018 	add.w	r0, r4, #24
1a00200e:	f7ff fccc 	bl	1a0019aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002012:	1d25      	adds	r5, r4, #4
1a002014:	4628      	mov	r0, r5
1a002016:	f7ff fcc8 	bl	1a0019aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00201a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00201c:	2201      	movs	r2, #1
1a00201e:	409a      	lsls	r2, r3
1a002020:	491e      	ldr	r1, [pc, #120]	; (1a00209c <xTaskResumeAll+0xdc>)
1a002022:	6808      	ldr	r0, [r1, #0]
1a002024:	4302      	orrs	r2, r0
1a002026:	600a      	str	r2, [r1, #0]
1a002028:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00202c:	009a      	lsls	r2, r3, #2
1a00202e:	4629      	mov	r1, r5
1a002030:	481b      	ldr	r0, [pc, #108]	; (1a0020a0 <xTaskResumeAll+0xe0>)
1a002032:	4410      	add	r0, r2
1a002034:	f7ff fc93 	bl	1a00195e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002038:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00203a:	4b1a      	ldr	r3, [pc, #104]	; (1a0020a4 <xTaskResumeAll+0xe4>)
1a00203c:	681b      	ldr	r3, [r3, #0]
1a00203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002040:	429a      	cmp	r2, r3
1a002042:	d3dc      	bcc.n	1a001ffe <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a002044:	4b18      	ldr	r3, [pc, #96]	; (1a0020a8 <xTaskResumeAll+0xe8>)
1a002046:	2201      	movs	r2, #1
1a002048:	601a      	str	r2, [r3, #0]
1a00204a:	e7d8      	b.n	1a001ffe <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a00204c:	b10c      	cbz	r4, 1a002052 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a00204e:	f7ff fcdb 	bl	1a001a08 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a002052:	4b16      	ldr	r3, [pc, #88]	; (1a0020ac <xTaskResumeAll+0xec>)
1a002054:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a002056:	b154      	cbz	r4, 1a00206e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a002058:	f7ff ff26 	bl	1a001ea8 <xTaskIncrementTick>
1a00205c:	b110      	cbz	r0, 1a002064 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a00205e:	4b12      	ldr	r3, [pc, #72]	; (1a0020a8 <xTaskResumeAll+0xe8>)
1a002060:	2201      	movs	r2, #1
1a002062:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a002064:	3c01      	subs	r4, #1
1a002066:	d1f7      	bne.n	1a002058 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a002068:	4b10      	ldr	r3, [pc, #64]	; (1a0020ac <xTaskResumeAll+0xec>)
1a00206a:	2200      	movs	r2, #0
1a00206c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a00206e:	4b0e      	ldr	r3, [pc, #56]	; (1a0020a8 <xTaskResumeAll+0xe8>)
1a002070:	681b      	ldr	r3, [r3, #0]
1a002072:	b15b      	cbz	r3, 1a00208c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a002074:	4b0e      	ldr	r3, [pc, #56]	; (1a0020b0 <xTaskResumeAll+0xf0>)
1a002076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00207a:	601a      	str	r2, [r3, #0]
1a00207c:	f3bf 8f4f 	dsb	sy
1a002080:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a002084:	2401      	movs	r4, #1
1a002086:	e7b5      	b.n	1a001ff4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a002088:	2400      	movs	r4, #0
1a00208a:	e7b3      	b.n	1a001ff4 <xTaskResumeAll+0x34>
1a00208c:	2400      	movs	r4, #0
1a00208e:	e7b1      	b.n	1a001ff4 <xTaskResumeAll+0x34>
1a002090:	10002990 	.word	0x10002990
1a002094:	10002984 	.word	0x10002984
1a002098:	100029cc 	.word	0x100029cc
1a00209c:	10002998 	.word	0x10002998
1a0020a0:	100028f8 	.word	0x100028f8
1a0020a4:	100028ec 	.word	0x100028ec
1a0020a8:	10002a10 	.word	0x10002a10
1a0020ac:	1000298c 	.word	0x1000298c
1a0020b0:	e000ed04 	.word	0xe000ed04

1a0020b4 <vTaskDelay>:
	{
1a0020b4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0020b6:	b1a8      	cbz	r0, 1a0020e4 <vTaskDelay+0x30>
1a0020b8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0020ba:	4b0f      	ldr	r3, [pc, #60]	; (1a0020f8 <vTaskDelay+0x44>)
1a0020bc:	681b      	ldr	r3, [r3, #0]
1a0020be:	b143      	cbz	r3, 1a0020d2 <vTaskDelay+0x1e>
1a0020c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020c4:	f383 8811 	msr	BASEPRI, r3
1a0020c8:	f3bf 8f6f 	isb	sy
1a0020cc:	f3bf 8f4f 	dsb	sy
1a0020d0:	e7fe      	b.n	1a0020d0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0020d2:	f7ff fedb 	bl	1a001e8c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0020d6:	2100      	movs	r1, #0
1a0020d8:	4620      	mov	r0, r4
1a0020da:	f7ff fdd5 	bl	1a001c88 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0020de:	f7ff ff6f 	bl	1a001fc0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0020e2:	b938      	cbnz	r0, 1a0020f4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0020e4:	4b05      	ldr	r3, [pc, #20]	; (1a0020fc <vTaskDelay+0x48>)
1a0020e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0020ea:	601a      	str	r2, [r3, #0]
1a0020ec:	f3bf 8f4f 	dsb	sy
1a0020f0:	f3bf 8f6f 	isb	sy
	}
1a0020f4:	bd10      	pop	{r4, pc}
1a0020f6:	bf00      	nop
1a0020f8:	10002990 	.word	0x10002990
1a0020fc:	e000ed04 	.word	0xe000ed04

1a002100 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a002100:	4b2c      	ldr	r3, [pc, #176]	; (1a0021b4 <vTaskSwitchContext+0xb4>)
1a002102:	681b      	ldr	r3, [r3, #0]
1a002104:	b11b      	cbz	r3, 1a00210e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a002106:	4b2c      	ldr	r3, [pc, #176]	; (1a0021b8 <vTaskSwitchContext+0xb8>)
1a002108:	2201      	movs	r2, #1
1a00210a:	601a      	str	r2, [r3, #0]
1a00210c:	4770      	bx	lr
{
1a00210e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a002110:	4b29      	ldr	r3, [pc, #164]	; (1a0021b8 <vTaskSwitchContext+0xb8>)
1a002112:	2200      	movs	r2, #0
1a002114:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a002116:	4b29      	ldr	r3, [pc, #164]	; (1a0021bc <vTaskSwitchContext+0xbc>)
1a002118:	681b      	ldr	r3, [r3, #0]
1a00211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00211c:	681a      	ldr	r2, [r3, #0]
1a00211e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002122:	d103      	bne.n	1a00212c <vTaskSwitchContext+0x2c>
1a002124:	685a      	ldr	r2, [r3, #4]
1a002126:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00212a:	d01b      	beq.n	1a002164 <vTaskSwitchContext+0x64>
1a00212c:	4b23      	ldr	r3, [pc, #140]	; (1a0021bc <vTaskSwitchContext+0xbc>)
1a00212e:	6818      	ldr	r0, [r3, #0]
1a002130:	6819      	ldr	r1, [r3, #0]
1a002132:	3134      	adds	r1, #52	; 0x34
1a002134:	f7ff fc66 	bl	1a001a04 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002138:	4b21      	ldr	r3, [pc, #132]	; (1a0021c0 <vTaskSwitchContext+0xc0>)
1a00213a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a00213c:	fab3 f383 	clz	r3, r3
1a002140:	b2db      	uxtb	r3, r3
1a002142:	f1c3 031f 	rsb	r3, r3, #31
1a002146:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a00214a:	008a      	lsls	r2, r1, #2
1a00214c:	491d      	ldr	r1, [pc, #116]	; (1a0021c4 <vTaskSwitchContext+0xc4>)
1a00214e:	588a      	ldr	r2, [r1, r2]
1a002150:	b98a      	cbnz	r2, 1a002176 <vTaskSwitchContext+0x76>
	__asm volatile
1a002152:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002156:	f383 8811 	msr	BASEPRI, r3
1a00215a:	f3bf 8f6f 	isb	sy
1a00215e:	f3bf 8f4f 	dsb	sy
1a002162:	e7fe      	b.n	1a002162 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a002164:	689a      	ldr	r2, [r3, #8]
1a002166:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00216a:	d1df      	bne.n	1a00212c <vTaskSwitchContext+0x2c>
1a00216c:	68db      	ldr	r3, [r3, #12]
1a00216e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a002172:	d1db      	bne.n	1a00212c <vTaskSwitchContext+0x2c>
1a002174:	e7e0      	b.n	1a002138 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002176:	4813      	ldr	r0, [pc, #76]	; (1a0021c4 <vTaskSwitchContext+0xc4>)
1a002178:	009a      	lsls	r2, r3, #2
1a00217a:	18d4      	adds	r4, r2, r3
1a00217c:	00a1      	lsls	r1, r4, #2
1a00217e:	4401      	add	r1, r0
1a002180:	684c      	ldr	r4, [r1, #4]
1a002182:	6864      	ldr	r4, [r4, #4]
1a002184:	604c      	str	r4, [r1, #4]
1a002186:	441a      	add	r2, r3
1a002188:	0091      	lsls	r1, r2, #2
1a00218a:	3108      	adds	r1, #8
1a00218c:	4408      	add	r0, r1
1a00218e:	4284      	cmp	r4, r0
1a002190:	d009      	beq.n	1a0021a6 <vTaskSwitchContext+0xa6>
1a002192:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002196:	009a      	lsls	r2, r3, #2
1a002198:	4b0a      	ldr	r3, [pc, #40]	; (1a0021c4 <vTaskSwitchContext+0xc4>)
1a00219a:	4413      	add	r3, r2
1a00219c:	685b      	ldr	r3, [r3, #4]
1a00219e:	68da      	ldr	r2, [r3, #12]
1a0021a0:	4b06      	ldr	r3, [pc, #24]	; (1a0021bc <vTaskSwitchContext+0xbc>)
1a0021a2:	601a      	str	r2, [r3, #0]
}
1a0021a4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0021a6:	6861      	ldr	r1, [r4, #4]
1a0021a8:	4806      	ldr	r0, [pc, #24]	; (1a0021c4 <vTaskSwitchContext+0xc4>)
1a0021aa:	2214      	movs	r2, #20
1a0021ac:	fb02 0203 	mla	r2, r2, r3, r0
1a0021b0:	6051      	str	r1, [r2, #4]
1a0021b2:	e7ee      	b.n	1a002192 <vTaskSwitchContext+0x92>
1a0021b4:	10002990 	.word	0x10002990
1a0021b8:	10002a10 	.word	0x10002a10
1a0021bc:	100028ec 	.word	0x100028ec
1a0021c0:	10002998 	.word	0x10002998
1a0021c4:	100028f8 	.word	0x100028f8

1a0021c8 <vTaskSuspend>:
	{
1a0021c8:	b538      	push	{r3, r4, r5, lr}
1a0021ca:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
1a0021cc:	f000 fd3a 	bl	1a002c44 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1a0021d0:	b364      	cbz	r4, 1a00222c <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0021d2:	1d25      	adds	r5, r4, #4
1a0021d4:	4628      	mov	r0, r5
1a0021d6:	f7ff fbe8 	bl	1a0019aa <uxListRemove>
1a0021da:	b970      	cbnz	r0, 1a0021fa <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0021dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0021de:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0021e2:	008b      	lsls	r3, r1, #2
1a0021e4:	492b      	ldr	r1, [pc, #172]	; (1a002294 <vTaskSuspend+0xcc>)
1a0021e6:	58cb      	ldr	r3, [r1, r3]
1a0021e8:	b93b      	cbnz	r3, 1a0021fa <vTaskSuspend+0x32>
1a0021ea:	2301      	movs	r3, #1
1a0021ec:	fa03 f202 	lsl.w	r2, r3, r2
1a0021f0:	4929      	ldr	r1, [pc, #164]	; (1a002298 <vTaskSuspend+0xd0>)
1a0021f2:	680b      	ldr	r3, [r1, #0]
1a0021f4:	ea23 0302 	bic.w	r3, r3, r2
1a0021f8:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0021fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a0021fc:	b11b      	cbz	r3, 1a002206 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0021fe:	f104 0018 	add.w	r0, r4, #24
1a002202:	f7ff fbd2 	bl	1a0019aa <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1a002206:	4629      	mov	r1, r5
1a002208:	4824      	ldr	r0, [pc, #144]	; (1a00229c <vTaskSuspend+0xd4>)
1a00220a:	f7ff fba8 	bl	1a00195e <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1a00220e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
1a002212:	b2db      	uxtb	r3, r3
1a002214:	2b01      	cmp	r3, #1
1a002216:	d00c      	beq.n	1a002232 <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
1a002218:	f000 fd36 	bl	1a002c88 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
1a00221c:	4b20      	ldr	r3, [pc, #128]	; (1a0022a0 <vTaskSuspend+0xd8>)
1a00221e:	681b      	ldr	r3, [r3, #0]
1a002220:	b95b      	cbnz	r3, 1a00223a <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
1a002222:	4b20      	ldr	r3, [pc, #128]	; (1a0022a4 <vTaskSuspend+0xdc>)
1a002224:	681b      	ldr	r3, [r3, #0]
1a002226:	42a3      	cmp	r3, r4
1a002228:	d00e      	beq.n	1a002248 <vTaskSuspend+0x80>
	}
1a00222a:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1a00222c:	4b1d      	ldr	r3, [pc, #116]	; (1a0022a4 <vTaskSuspend+0xdc>)
1a00222e:	681c      	ldr	r4, [r3, #0]
1a002230:	e7cf      	b.n	1a0021d2 <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a002232:	2300      	movs	r3, #0
1a002234:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
1a002238:	e7ee      	b.n	1a002218 <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
1a00223a:	f000 fd03 	bl	1a002c44 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
1a00223e:	f7ff fbe3 	bl	1a001a08 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
1a002242:	f000 fd21 	bl	1a002c88 <vPortExitCritical>
1a002246:	e7ec      	b.n	1a002222 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
1a002248:	4b15      	ldr	r3, [pc, #84]	; (1a0022a0 <vTaskSuspend+0xd8>)
1a00224a:	681b      	ldr	r3, [r3, #0]
1a00224c:	b1a3      	cbz	r3, 1a002278 <vTaskSuspend+0xb0>
				configASSERT( uxSchedulerSuspended == 0 );
1a00224e:	4b16      	ldr	r3, [pc, #88]	; (1a0022a8 <vTaskSuspend+0xe0>)
1a002250:	681b      	ldr	r3, [r3, #0]
1a002252:	b143      	cbz	r3, 1a002266 <vTaskSuspend+0x9e>
1a002254:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002258:	f383 8811 	msr	BASEPRI, r3
1a00225c:	f3bf 8f6f 	isb	sy
1a002260:	f3bf 8f4f 	dsb	sy
1a002264:	e7fe      	b.n	1a002264 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
1a002266:	4b11      	ldr	r3, [pc, #68]	; (1a0022ac <vTaskSuspend+0xe4>)
1a002268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00226c:	601a      	str	r2, [r3, #0]
1a00226e:	f3bf 8f4f 	dsb	sy
1a002272:	f3bf 8f6f 	isb	sy
1a002276:	e7d8      	b.n	1a00222a <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1a002278:	4b08      	ldr	r3, [pc, #32]	; (1a00229c <vTaskSuspend+0xd4>)
1a00227a:	681a      	ldr	r2, [r3, #0]
1a00227c:	4b0c      	ldr	r3, [pc, #48]	; (1a0022b0 <vTaskSuspend+0xe8>)
1a00227e:	681b      	ldr	r3, [r3, #0]
1a002280:	429a      	cmp	r2, r3
1a002282:	d103      	bne.n	1a00228c <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
1a002284:	4b07      	ldr	r3, [pc, #28]	; (1a0022a4 <vTaskSuspend+0xdc>)
1a002286:	2200      	movs	r2, #0
1a002288:	601a      	str	r2, [r3, #0]
1a00228a:	e7ce      	b.n	1a00222a <vTaskSuspend+0x62>
					vTaskSwitchContext();
1a00228c:	f7ff ff38 	bl	1a002100 <vTaskSwitchContext>
	}
1a002290:	e7cb      	b.n	1a00222a <vTaskSuspend+0x62>
1a002292:	bf00      	nop
1a002294:	100028f8 	.word	0x100028f8
1a002298:	10002998 	.word	0x10002998
1a00229c:	100029e4 	.word	0x100029e4
1a0022a0:	100029e0 	.word	0x100029e0
1a0022a4:	100028ec 	.word	0x100028ec
1a0022a8:	10002990 	.word	0x10002990
1a0022ac:	e000ed04 	.word	0xe000ed04
1a0022b0:	10002984 	.word	0x10002984

1a0022b4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0022b4:	b940      	cbnz	r0, 1a0022c8 <vTaskPlaceOnEventList+0x14>
1a0022b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022ba:	f383 8811 	msr	BASEPRI, r3
1a0022be:	f3bf 8f6f 	isb	sy
1a0022c2:	f3bf 8f4f 	dsb	sy
1a0022c6:	e7fe      	b.n	1a0022c6 <vTaskPlaceOnEventList+0x12>
{
1a0022c8:	b510      	push	{r4, lr}
1a0022ca:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0022cc:	4b04      	ldr	r3, [pc, #16]	; (1a0022e0 <vTaskPlaceOnEventList+0x2c>)
1a0022ce:	6819      	ldr	r1, [r3, #0]
1a0022d0:	3118      	adds	r1, #24
1a0022d2:	f7ff fb50 	bl	1a001976 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0022d6:	2101      	movs	r1, #1
1a0022d8:	4620      	mov	r0, r4
1a0022da:	f7ff fcd5 	bl	1a001c88 <prvAddCurrentTaskToDelayedList>
}
1a0022de:	bd10      	pop	{r4, pc}
1a0022e0:	100028ec 	.word	0x100028ec

1a0022e4 <vTaskPlaceOnEventListRestricted>:
	{
1a0022e4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0022e6:	b940      	cbnz	r0, 1a0022fa <vTaskPlaceOnEventListRestricted+0x16>
1a0022e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022ec:	f383 8811 	msr	BASEPRI, r3
1a0022f0:	f3bf 8f6f 	isb	sy
1a0022f4:	f3bf 8f4f 	dsb	sy
1a0022f8:	e7fe      	b.n	1a0022f8 <vTaskPlaceOnEventListRestricted+0x14>
1a0022fa:	460c      	mov	r4, r1
1a0022fc:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0022fe:	4a06      	ldr	r2, [pc, #24]	; (1a002318 <vTaskPlaceOnEventListRestricted+0x34>)
1a002300:	6811      	ldr	r1, [r2, #0]
1a002302:	3118      	adds	r1, #24
1a002304:	f7ff fb2b 	bl	1a00195e <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a002308:	b10d      	cbz	r5, 1a00230e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a00230a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a00230e:	4629      	mov	r1, r5
1a002310:	4620      	mov	r0, r4
1a002312:	f7ff fcb9 	bl	1a001c88 <prvAddCurrentTaskToDelayedList>
	}
1a002316:	bd38      	pop	{r3, r4, r5, pc}
1a002318:	100028ec 	.word	0x100028ec

1a00231c <xTaskRemoveFromEventList>:
{
1a00231c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00231e:	68c3      	ldr	r3, [r0, #12]
1a002320:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002322:	b944      	cbnz	r4, 1a002336 <xTaskRemoveFromEventList+0x1a>
1a002324:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002328:	f383 8811 	msr	BASEPRI, r3
1a00232c:	f3bf 8f6f 	isb	sy
1a002330:	f3bf 8f4f 	dsb	sy
1a002334:	e7fe      	b.n	1a002334 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002336:	f104 0518 	add.w	r5, r4, #24
1a00233a:	4628      	mov	r0, r5
1a00233c:	f7ff fb35 	bl	1a0019aa <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002340:	4b13      	ldr	r3, [pc, #76]	; (1a002390 <xTaskRemoveFromEventList+0x74>)
1a002342:	681b      	ldr	r3, [r3, #0]
1a002344:	b9e3      	cbnz	r3, 1a002380 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002346:	1d25      	adds	r5, r4, #4
1a002348:	4628      	mov	r0, r5
1a00234a:	f7ff fb2e 	bl	1a0019aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00234e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002350:	2201      	movs	r2, #1
1a002352:	409a      	lsls	r2, r3
1a002354:	490f      	ldr	r1, [pc, #60]	; (1a002394 <xTaskRemoveFromEventList+0x78>)
1a002356:	6808      	ldr	r0, [r1, #0]
1a002358:	4302      	orrs	r2, r0
1a00235a:	600a      	str	r2, [r1, #0]
1a00235c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002360:	009a      	lsls	r2, r3, #2
1a002362:	4629      	mov	r1, r5
1a002364:	480c      	ldr	r0, [pc, #48]	; (1a002398 <xTaskRemoveFromEventList+0x7c>)
1a002366:	4410      	add	r0, r2
1a002368:	f7ff faf9 	bl	1a00195e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00236c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00236e:	4b0b      	ldr	r3, [pc, #44]	; (1a00239c <xTaskRemoveFromEventList+0x80>)
1a002370:	681b      	ldr	r3, [r3, #0]
1a002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002374:	429a      	cmp	r2, r3
1a002376:	d908      	bls.n	1a00238a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002378:	2001      	movs	r0, #1
1a00237a:	4b09      	ldr	r3, [pc, #36]	; (1a0023a0 <xTaskRemoveFromEventList+0x84>)
1a00237c:	6018      	str	r0, [r3, #0]
}
1a00237e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a002380:	4629      	mov	r1, r5
1a002382:	4808      	ldr	r0, [pc, #32]	; (1a0023a4 <xTaskRemoveFromEventList+0x88>)
1a002384:	f7ff faeb 	bl	1a00195e <vListInsertEnd>
1a002388:	e7f0      	b.n	1a00236c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a00238a:	2000      	movs	r0, #0
	return xReturn;
1a00238c:	e7f7      	b.n	1a00237e <xTaskRemoveFromEventList+0x62>
1a00238e:	bf00      	nop
1a002390:	10002990 	.word	0x10002990
1a002394:	10002998 	.word	0x10002998
1a002398:	100028f8 	.word	0x100028f8
1a00239c:	100028ec 	.word	0x100028ec
1a0023a0:	10002a10 	.word	0x10002a10
1a0023a4:	100029cc 	.word	0x100029cc

1a0023a8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0023a8:	4b03      	ldr	r3, [pc, #12]	; (1a0023b8 <vTaskInternalSetTimeOutState+0x10>)
1a0023aa:	681b      	ldr	r3, [r3, #0]
1a0023ac:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0023ae:	4b03      	ldr	r3, [pc, #12]	; (1a0023bc <vTaskInternalSetTimeOutState+0x14>)
1a0023b0:	681b      	ldr	r3, [r3, #0]
1a0023b2:	6043      	str	r3, [r0, #4]
}
1a0023b4:	4770      	bx	lr
1a0023b6:	bf00      	nop
1a0023b8:	100029c8 	.word	0x100029c8
1a0023bc:	10002a0c 	.word	0x10002a0c

1a0023c0 <xTaskCheckForTimeOut>:
{
1a0023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0023c2:	b150      	cbz	r0, 1a0023da <xTaskCheckForTimeOut+0x1a>
1a0023c4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0023c6:	b989      	cbnz	r1, 1a0023ec <xTaskCheckForTimeOut+0x2c>
1a0023c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023cc:	f383 8811 	msr	BASEPRI, r3
1a0023d0:	f3bf 8f6f 	isb	sy
1a0023d4:	f3bf 8f4f 	dsb	sy
1a0023d8:	e7fe      	b.n	1a0023d8 <xTaskCheckForTimeOut+0x18>
1a0023da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023de:	f383 8811 	msr	BASEPRI, r3
1a0023e2:	f3bf 8f6f 	isb	sy
1a0023e6:	f3bf 8f4f 	dsb	sy
1a0023ea:	e7fe      	b.n	1a0023ea <xTaskCheckForTimeOut+0x2a>
1a0023ec:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0023ee:	f000 fc29 	bl	1a002c44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0023f2:	4b11      	ldr	r3, [pc, #68]	; (1a002438 <xTaskCheckForTimeOut+0x78>)
1a0023f4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0023f6:	6868      	ldr	r0, [r5, #4]
1a0023f8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0023fa:	6823      	ldr	r3, [r4, #0]
1a0023fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002400:	d016      	beq.n	1a002430 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002402:	682f      	ldr	r7, [r5, #0]
1a002404:	4e0d      	ldr	r6, [pc, #52]	; (1a00243c <xTaskCheckForTimeOut+0x7c>)
1a002406:	6836      	ldr	r6, [r6, #0]
1a002408:	42b7      	cmp	r7, r6
1a00240a:	d001      	beq.n	1a002410 <xTaskCheckForTimeOut+0x50>
1a00240c:	4288      	cmp	r0, r1
1a00240e:	d911      	bls.n	1a002434 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002410:	4293      	cmp	r3, r2
1a002412:	d803      	bhi.n	1a00241c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002414:	2300      	movs	r3, #0
1a002416:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002418:	2401      	movs	r4, #1
1a00241a:	e005      	b.n	1a002428 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a00241c:	1a9b      	subs	r3, r3, r2
1a00241e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002420:	4628      	mov	r0, r5
1a002422:	f7ff ffc1 	bl	1a0023a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a002426:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002428:	f000 fc2e 	bl	1a002c88 <vPortExitCritical>
}
1a00242c:	4620      	mov	r0, r4
1a00242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a002430:	2400      	movs	r4, #0
1a002432:	e7f9      	b.n	1a002428 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002434:	2401      	movs	r4, #1
1a002436:	e7f7      	b.n	1a002428 <xTaskCheckForTimeOut+0x68>
1a002438:	10002a0c 	.word	0x10002a0c
1a00243c:	100029c8 	.word	0x100029c8

1a002440 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002440:	4b01      	ldr	r3, [pc, #4]	; (1a002448 <vTaskMissedYield+0x8>)
1a002442:	2201      	movs	r2, #1
1a002444:	601a      	str	r2, [r3, #0]
}
1a002446:	4770      	bx	lr
1a002448:	10002a10 	.word	0x10002a10

1a00244c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a00244c:	4b05      	ldr	r3, [pc, #20]	; (1a002464 <xTaskGetSchedulerState+0x18>)
1a00244e:	681b      	ldr	r3, [r3, #0]
1a002450:	b133      	cbz	r3, 1a002460 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002452:	4b05      	ldr	r3, [pc, #20]	; (1a002468 <xTaskGetSchedulerState+0x1c>)
1a002454:	681b      	ldr	r3, [r3, #0]
1a002456:	b10b      	cbz	r3, 1a00245c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002458:	2000      	movs	r0, #0
	}
1a00245a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00245c:	2002      	movs	r0, #2
1a00245e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a002460:	2001      	movs	r0, #1
1a002462:	4770      	bx	lr
1a002464:	100029e0 	.word	0x100029e0
1a002468:	10002990 	.word	0x10002990

1a00246c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a00246c:	2800      	cmp	r0, #0
1a00246e:	d050      	beq.n	1a002512 <xTaskPriorityInherit+0xa6>
	{
1a002470:	b538      	push	{r3, r4, r5, lr}
1a002472:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a002474:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a002476:	4928      	ldr	r1, [pc, #160]	; (1a002518 <xTaskPriorityInherit+0xac>)
1a002478:	6809      	ldr	r1, [r1, #0]
1a00247a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a00247c:	428a      	cmp	r2, r1
1a00247e:	d23e      	bcs.n	1a0024fe <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002480:	6981      	ldr	r1, [r0, #24]
1a002482:	2900      	cmp	r1, #0
1a002484:	db05      	blt.n	1a002492 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002486:	4924      	ldr	r1, [pc, #144]	; (1a002518 <xTaskPriorityInherit+0xac>)
1a002488:	6809      	ldr	r1, [r1, #0]
1a00248a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a00248c:	f1c1 0107 	rsb	r1, r1, #7
1a002490:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a002492:	6960      	ldr	r0, [r4, #20]
1a002494:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a002498:	0091      	lsls	r1, r2, #2
1a00249a:	4a20      	ldr	r2, [pc, #128]	; (1a00251c <xTaskPriorityInherit+0xb0>)
1a00249c:	440a      	add	r2, r1
1a00249e:	4290      	cmp	r0, r2
1a0024a0:	d005      	beq.n	1a0024ae <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a0024a2:	4a1d      	ldr	r2, [pc, #116]	; (1a002518 <xTaskPriorityInherit+0xac>)
1a0024a4:	6812      	ldr	r2, [r2, #0]
1a0024a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a0024a8:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a0024aa:	2001      	movs	r0, #1
	}
1a0024ac:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0024ae:	1d25      	adds	r5, r4, #4
1a0024b0:	4628      	mov	r0, r5
1a0024b2:	f7ff fa7a 	bl	1a0019aa <uxListRemove>
1a0024b6:	b968      	cbnz	r0, 1a0024d4 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a0024b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0024ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0024be:	008a      	lsls	r2, r1, #2
1a0024c0:	4916      	ldr	r1, [pc, #88]	; (1a00251c <xTaskPriorityInherit+0xb0>)
1a0024c2:	588a      	ldr	r2, [r1, r2]
1a0024c4:	b932      	cbnz	r2, 1a0024d4 <xTaskPriorityInherit+0x68>
1a0024c6:	2201      	movs	r2, #1
1a0024c8:	409a      	lsls	r2, r3
1a0024ca:	4915      	ldr	r1, [pc, #84]	; (1a002520 <xTaskPriorityInherit+0xb4>)
1a0024cc:	680b      	ldr	r3, [r1, #0]
1a0024ce:	ea23 0302 	bic.w	r3, r3, r2
1a0024d2:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a0024d4:	4b10      	ldr	r3, [pc, #64]	; (1a002518 <xTaskPriorityInherit+0xac>)
1a0024d6:	681b      	ldr	r3, [r3, #0]
1a0024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0024da:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a0024dc:	2401      	movs	r4, #1
1a0024de:	fa04 f203 	lsl.w	r2, r4, r3
1a0024e2:	490f      	ldr	r1, [pc, #60]	; (1a002520 <xTaskPriorityInherit+0xb4>)
1a0024e4:	6808      	ldr	r0, [r1, #0]
1a0024e6:	4302      	orrs	r2, r0
1a0024e8:	600a      	str	r2, [r1, #0]
1a0024ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0024ee:	009a      	lsls	r2, r3, #2
1a0024f0:	4629      	mov	r1, r5
1a0024f2:	480a      	ldr	r0, [pc, #40]	; (1a00251c <xTaskPriorityInherit+0xb0>)
1a0024f4:	4410      	add	r0, r2
1a0024f6:	f7ff fa32 	bl	1a00195e <vListInsertEnd>
				xReturn = pdTRUE;
1a0024fa:	4620      	mov	r0, r4
1a0024fc:	e7d6      	b.n	1a0024ac <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a0024fe:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a002500:	4b05      	ldr	r3, [pc, #20]	; (1a002518 <xTaskPriorityInherit+0xac>)
1a002502:	681b      	ldr	r3, [r3, #0]
1a002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002506:	429a      	cmp	r2, r3
1a002508:	d201      	bcs.n	1a00250e <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a00250a:	2001      	movs	r0, #1
		return xReturn;
1a00250c:	e7ce      	b.n	1a0024ac <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a00250e:	2000      	movs	r0, #0
1a002510:	e7cc      	b.n	1a0024ac <xTaskPriorityInherit+0x40>
1a002512:	2000      	movs	r0, #0
	}
1a002514:	4770      	bx	lr
1a002516:	bf00      	nop
1a002518:	100028ec 	.word	0x100028ec
1a00251c:	100028f8 	.word	0x100028f8
1a002520:	10002998 	.word	0x10002998

1a002524 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002524:	2800      	cmp	r0, #0
1a002526:	d049      	beq.n	1a0025bc <xTaskPriorityDisinherit+0x98>
	{
1a002528:	b538      	push	{r3, r4, r5, lr}
1a00252a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a00252c:	4a26      	ldr	r2, [pc, #152]	; (1a0025c8 <xTaskPriorityDisinherit+0xa4>)
1a00252e:	6812      	ldr	r2, [r2, #0]
1a002530:	4282      	cmp	r2, r0
1a002532:	d008      	beq.n	1a002546 <xTaskPriorityDisinherit+0x22>
1a002534:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002538:	f383 8811 	msr	BASEPRI, r3
1a00253c:	f3bf 8f6f 	isb	sy
1a002540:	f3bf 8f4f 	dsb	sy
1a002544:	e7fe      	b.n	1a002544 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a002546:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a002548:	b942      	cbnz	r2, 1a00255c <xTaskPriorityDisinherit+0x38>
1a00254a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00254e:	f383 8811 	msr	BASEPRI, r3
1a002552:	f3bf 8f6f 	isb	sy
1a002556:	f3bf 8f4f 	dsb	sy
1a00255a:	e7fe      	b.n	1a00255a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a00255c:	3a01      	subs	r2, #1
1a00255e:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002560:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a002562:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a002564:	4288      	cmp	r0, r1
1a002566:	d02b      	beq.n	1a0025c0 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002568:	bb62      	cbnz	r2, 1a0025c4 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00256a:	1d25      	adds	r5, r4, #4
1a00256c:	4628      	mov	r0, r5
1a00256e:	f7ff fa1c 	bl	1a0019aa <uxListRemove>
1a002572:	b970      	cbnz	r0, 1a002592 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002574:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002576:	2314      	movs	r3, #20
1a002578:	fb03 f302 	mul.w	r3, r3, r2
1a00257c:	4913      	ldr	r1, [pc, #76]	; (1a0025cc <xTaskPriorityDisinherit+0xa8>)
1a00257e:	58cb      	ldr	r3, [r1, r3]
1a002580:	b93b      	cbnz	r3, 1a002592 <xTaskPriorityDisinherit+0x6e>
1a002582:	2301      	movs	r3, #1
1a002584:	fa03 f202 	lsl.w	r2, r3, r2
1a002588:	4911      	ldr	r1, [pc, #68]	; (1a0025d0 <xTaskPriorityDisinherit+0xac>)
1a00258a:	680b      	ldr	r3, [r1, #0]
1a00258c:	ea23 0302 	bic.w	r3, r3, r2
1a002590:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002592:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002594:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002596:	f1c3 0207 	rsb	r2, r3, #7
1a00259a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a00259c:	2401      	movs	r4, #1
1a00259e:	fa04 f203 	lsl.w	r2, r4, r3
1a0025a2:	490b      	ldr	r1, [pc, #44]	; (1a0025d0 <xTaskPriorityDisinherit+0xac>)
1a0025a4:	6808      	ldr	r0, [r1, #0]
1a0025a6:	4302      	orrs	r2, r0
1a0025a8:	600a      	str	r2, [r1, #0]
1a0025aa:	4629      	mov	r1, r5
1a0025ac:	4a07      	ldr	r2, [pc, #28]	; (1a0025cc <xTaskPriorityDisinherit+0xa8>)
1a0025ae:	2014      	movs	r0, #20
1a0025b0:	fb00 2003 	mla	r0, r0, r3, r2
1a0025b4:	f7ff f9d3 	bl	1a00195e <vListInsertEnd>
					xReturn = pdTRUE;
1a0025b8:	4620      	mov	r0, r4
	}
1a0025ba:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0025bc:	2000      	movs	r0, #0
	}
1a0025be:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0025c0:	2000      	movs	r0, #0
1a0025c2:	e7fa      	b.n	1a0025ba <xTaskPriorityDisinherit+0x96>
1a0025c4:	2000      	movs	r0, #0
		return xReturn;
1a0025c6:	e7f8      	b.n	1a0025ba <xTaskPriorityDisinherit+0x96>
1a0025c8:	100028ec 	.word	0x100028ec
1a0025cc:	100028f8 	.word	0x100028f8
1a0025d0:	10002998 	.word	0x10002998

1a0025d4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a0025d4:	2800      	cmp	r0, #0
1a0025d6:	d055      	beq.n	1a002684 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a0025d8:	b538      	push	{r3, r4, r5, lr}
1a0025da:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a0025dc:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a0025de:	b940      	cbnz	r0, 1a0025f2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a0025e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025e4:	f383 8811 	msr	BASEPRI, r3
1a0025e8:	f3bf 8f6f 	isb	sy
1a0025ec:	f3bf 8f4f 	dsb	sy
1a0025f0:	e7fe      	b.n	1a0025f0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a0025f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a0025f4:	428a      	cmp	r2, r1
1a0025f6:	d200      	bcs.n	1a0025fa <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a0025f8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a0025fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a0025fc:	4291      	cmp	r1, r2
1a0025fe:	d001      	beq.n	1a002604 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002600:	2801      	cmp	r0, #1
1a002602:	d000      	beq.n	1a002606 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a002604:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a002606:	4820      	ldr	r0, [pc, #128]	; (1a002688 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a002608:	6800      	ldr	r0, [r0, #0]
1a00260a:	4298      	cmp	r0, r3
1a00260c:	d108      	bne.n	1a002620 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a00260e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002612:	f383 8811 	msr	BASEPRI, r3
1a002616:	f3bf 8f6f 	isb	sy
1a00261a:	f3bf 8f4f 	dsb	sy
1a00261e:	e7fe      	b.n	1a00261e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a002620:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002622:	6998      	ldr	r0, [r3, #24]
1a002624:	2800      	cmp	r0, #0
1a002626:	db02      	blt.n	1a00262e <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002628:	f1c2 0207 	rsb	r2, r2, #7
1a00262c:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a00262e:	695a      	ldr	r2, [r3, #20]
1a002630:	4816      	ldr	r0, [pc, #88]	; (1a00268c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002632:	2414      	movs	r4, #20
1a002634:	fb04 0101 	mla	r1, r4, r1, r0
1a002638:	428a      	cmp	r2, r1
1a00263a:	d1e3      	bne.n	1a002604 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a00263c:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00263e:	1d1d      	adds	r5, r3, #4
1a002640:	4628      	mov	r0, r5
1a002642:	f7ff f9b2 	bl	1a0019aa <uxListRemove>
1a002646:	b970      	cbnz	r0, 1a002666 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002648:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00264a:	2314      	movs	r3, #20
1a00264c:	fb03 f302 	mul.w	r3, r3, r2
1a002650:	490e      	ldr	r1, [pc, #56]	; (1a00268c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002652:	58cb      	ldr	r3, [r1, r3]
1a002654:	b93b      	cbnz	r3, 1a002666 <vTaskPriorityDisinheritAfterTimeout+0x92>
1a002656:	2301      	movs	r3, #1
1a002658:	fa03 f202 	lsl.w	r2, r3, r2
1a00265c:	490c      	ldr	r1, [pc, #48]	; (1a002690 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a00265e:	680b      	ldr	r3, [r1, #0]
1a002660:	ea23 0302 	bic.w	r3, r3, r2
1a002664:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a002666:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002668:	2301      	movs	r3, #1
1a00266a:	4093      	lsls	r3, r2
1a00266c:	4908      	ldr	r1, [pc, #32]	; (1a002690 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a00266e:	6808      	ldr	r0, [r1, #0]
1a002670:	4303      	orrs	r3, r0
1a002672:	600b      	str	r3, [r1, #0]
1a002674:	4629      	mov	r1, r5
1a002676:	4b05      	ldr	r3, [pc, #20]	; (1a00268c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002678:	2014      	movs	r0, #20
1a00267a:	fb00 3002 	mla	r0, r0, r2, r3
1a00267e:	f7ff f96e 	bl	1a00195e <vListInsertEnd>
	}
1a002682:	e7bf      	b.n	1a002604 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a002684:	4770      	bx	lr
1a002686:	bf00      	nop
1a002688:	100028ec 	.word	0x100028ec
1a00268c:	100028f8 	.word	0x100028f8
1a002690:	10002998 	.word	0x10002998

1a002694 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a002694:	4b05      	ldr	r3, [pc, #20]	; (1a0026ac <pvTaskIncrementMutexHeldCount+0x18>)
1a002696:	681b      	ldr	r3, [r3, #0]
1a002698:	b123      	cbz	r3, 1a0026a4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a00269a:	4b04      	ldr	r3, [pc, #16]	; (1a0026ac <pvTaskIncrementMutexHeldCount+0x18>)
1a00269c:	681a      	ldr	r2, [r3, #0]
1a00269e:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a0026a0:	3301      	adds	r3, #1
1a0026a2:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a0026a4:	4b01      	ldr	r3, [pc, #4]	; (1a0026ac <pvTaskIncrementMutexHeldCount+0x18>)
1a0026a6:	6818      	ldr	r0, [r3, #0]
	}
1a0026a8:	4770      	bx	lr
1a0026aa:	bf00      	nop
1a0026ac:	100028ec 	.word	0x100028ec

1a0026b0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0026b0:	4b06      	ldr	r3, [pc, #24]	; (1a0026cc <prvGetNextExpireTime+0x1c>)
1a0026b2:	681a      	ldr	r2, [r3, #0]
1a0026b4:	6813      	ldr	r3, [r2, #0]
1a0026b6:	fab3 f383 	clz	r3, r3
1a0026ba:	095b      	lsrs	r3, r3, #5
1a0026bc:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0026be:	b913      	cbnz	r3, 1a0026c6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0026c0:	68d3      	ldr	r3, [r2, #12]
1a0026c2:	6818      	ldr	r0, [r3, #0]
1a0026c4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0026c6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0026c8:	4770      	bx	lr
1a0026ca:	bf00      	nop
1a0026cc:	10002a14 	.word	0x10002a14

1a0026d0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0026d0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0026d2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0026d4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0026d6:	4291      	cmp	r1, r2
1a0026d8:	d80c      	bhi.n	1a0026f4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0026da:	1ad2      	subs	r2, r2, r3
1a0026dc:	6983      	ldr	r3, [r0, #24]
1a0026de:	429a      	cmp	r2, r3
1a0026e0:	d301      	bcc.n	1a0026e6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a0026e2:	2001      	movs	r0, #1
1a0026e4:	e010      	b.n	1a002708 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a0026e6:	1d01      	adds	r1, r0, #4
1a0026e8:	4b09      	ldr	r3, [pc, #36]	; (1a002710 <prvInsertTimerInActiveList+0x40>)
1a0026ea:	6818      	ldr	r0, [r3, #0]
1a0026ec:	f7ff f943 	bl	1a001976 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0026f0:	2000      	movs	r0, #0
1a0026f2:	e009      	b.n	1a002708 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0026f4:	429a      	cmp	r2, r3
1a0026f6:	d201      	bcs.n	1a0026fc <prvInsertTimerInActiveList+0x2c>
1a0026f8:	4299      	cmp	r1, r3
1a0026fa:	d206      	bcs.n	1a00270a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0026fc:	1d01      	adds	r1, r0, #4
1a0026fe:	4b05      	ldr	r3, [pc, #20]	; (1a002714 <prvInsertTimerInActiveList+0x44>)
1a002700:	6818      	ldr	r0, [r3, #0]
1a002702:	f7ff f938 	bl	1a001976 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002706:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002708:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a00270a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a00270c:	e7fc      	b.n	1a002708 <prvInsertTimerInActiveList+0x38>
1a00270e:	bf00      	nop
1a002710:	10002a18 	.word	0x10002a18
1a002714:	10002a14 	.word	0x10002a14

1a002718 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002718:	b530      	push	{r4, r5, lr}
1a00271a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a00271c:	f000 fa92 	bl	1a002c44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002720:	4b11      	ldr	r3, [pc, #68]	; (1a002768 <prvCheckForValidListAndQueue+0x50>)
1a002722:	681b      	ldr	r3, [r3, #0]
1a002724:	b11b      	cbz	r3, 1a00272e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002726:	f000 faaf 	bl	1a002c88 <vPortExitCritical>
}
1a00272a:	b003      	add	sp, #12
1a00272c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a00272e:	4d0f      	ldr	r5, [pc, #60]	; (1a00276c <prvCheckForValidListAndQueue+0x54>)
1a002730:	4628      	mov	r0, r5
1a002732:	f7ff f906 	bl	1a001942 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002736:	4c0e      	ldr	r4, [pc, #56]	; (1a002770 <prvCheckForValidListAndQueue+0x58>)
1a002738:	4620      	mov	r0, r4
1a00273a:	f7ff f902 	bl	1a001942 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00273e:	4b0d      	ldr	r3, [pc, #52]	; (1a002774 <prvCheckForValidListAndQueue+0x5c>)
1a002740:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002742:	4b0d      	ldr	r3, [pc, #52]	; (1a002778 <prvCheckForValidListAndQueue+0x60>)
1a002744:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002746:	2300      	movs	r3, #0
1a002748:	9300      	str	r3, [sp, #0]
1a00274a:	4b0c      	ldr	r3, [pc, #48]	; (1a00277c <prvCheckForValidListAndQueue+0x64>)
1a00274c:	4a0c      	ldr	r2, [pc, #48]	; (1a002780 <prvCheckForValidListAndQueue+0x68>)
1a00274e:	2110      	movs	r1, #16
1a002750:	200a      	movs	r0, #10
1a002752:	f7fe fdac 	bl	1a0012ae <xQueueGenericCreateStatic>
1a002756:	4b04      	ldr	r3, [pc, #16]	; (1a002768 <prvCheckForValidListAndQueue+0x50>)
1a002758:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a00275a:	2800      	cmp	r0, #0
1a00275c:	d0e3      	beq.n	1a002726 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00275e:	4909      	ldr	r1, [pc, #36]	; (1a002784 <prvCheckForValidListAndQueue+0x6c>)
1a002760:	f7ff f8b2 	bl	1a0018c8 <vQueueAddToRegistry>
1a002764:	e7df      	b.n	1a002726 <prvCheckForValidListAndQueue+0xe>
1a002766:	bf00      	nop
1a002768:	10002b38 	.word	0x10002b38
1a00276c:	10002abc 	.word	0x10002abc
1a002770:	10002ad0 	.word	0x10002ad0
1a002774:	10002a14 	.word	0x10002a14
1a002778:	10002a18 	.word	0x10002a18
1a00277c:	10002ae8 	.word	0x10002ae8
1a002780:	10002a1c 	.word	0x10002a1c
1a002784:	1a0052f0 	.word	0x1a0052f0

1a002788 <prvInitialiseNewTimer>:
{
1a002788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00278c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a00278e:	b941      	cbnz	r1, 1a0027a2 <prvInitialiseNewTimer+0x1a>
1a002790:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002794:	f383 8811 	msr	BASEPRI, r3
1a002798:	f3bf 8f6f 	isb	sy
1a00279c:	f3bf 8f4f 	dsb	sy
1a0027a0:	e7fe      	b.n	1a0027a0 <prvInitialiseNewTimer+0x18>
1a0027a2:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a0027a4:	b174      	cbz	r4, 1a0027c4 <prvInitialiseNewTimer+0x3c>
1a0027a6:	461d      	mov	r5, r3
1a0027a8:	4616      	mov	r6, r2
1a0027aa:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a0027ac:	f7ff ffb4 	bl	1a002718 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a0027b0:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0027b4:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0027b6:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0027b8:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0027ba:	9b06      	ldr	r3, [sp, #24]
1a0027bc:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0027be:	1d20      	adds	r0, r4, #4
1a0027c0:	f7ff f8ca 	bl	1a001958 <vListInitialiseItem>
}
1a0027c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0027c8 <xTimerCreateTimerTask>:
{
1a0027c8:	b510      	push	{r4, lr}
1a0027ca:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0027cc:	f7ff ffa4 	bl	1a002718 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0027d0:	4b12      	ldr	r3, [pc, #72]	; (1a00281c <xTimerCreateTimerTask+0x54>)
1a0027d2:	681b      	ldr	r3, [r3, #0]
1a0027d4:	b1cb      	cbz	r3, 1a00280a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0027d6:	2400      	movs	r4, #0
1a0027d8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0027da:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a0027dc:	aa07      	add	r2, sp, #28
1a0027de:	a906      	add	r1, sp, #24
1a0027e0:	a805      	add	r0, sp, #20
1a0027e2:	f7ff f903 	bl	1a0019ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a0027e6:	9b05      	ldr	r3, [sp, #20]
1a0027e8:	9302      	str	r3, [sp, #8]
1a0027ea:	9b06      	ldr	r3, [sp, #24]
1a0027ec:	9301      	str	r3, [sp, #4]
1a0027ee:	2304      	movs	r3, #4
1a0027f0:	9300      	str	r3, [sp, #0]
1a0027f2:	4623      	mov	r3, r4
1a0027f4:	9a07      	ldr	r2, [sp, #28]
1a0027f6:	490a      	ldr	r1, [pc, #40]	; (1a002820 <xTimerCreateTimerTask+0x58>)
1a0027f8:	480a      	ldr	r0, [pc, #40]	; (1a002824 <xTimerCreateTimerTask+0x5c>)
1a0027fa:	f7ff fa91 	bl	1a001d20 <xTaskCreateStatic>
1a0027fe:	4b0a      	ldr	r3, [pc, #40]	; (1a002828 <xTimerCreateTimerTask+0x60>)
1a002800:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002802:	b110      	cbz	r0, 1a00280a <xTimerCreateTimerTask+0x42>
}
1a002804:	2001      	movs	r0, #1
1a002806:	b008      	add	sp, #32
1a002808:	bd10      	pop	{r4, pc}
1a00280a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00280e:	f383 8811 	msr	BASEPRI, r3
1a002812:	f3bf 8f6f 	isb	sy
1a002816:	f3bf 8f4f 	dsb	sy
1a00281a:	e7fe      	b.n	1a00281a <xTimerCreateTimerTask+0x52>
1a00281c:	10002b38 	.word	0x10002b38
1a002820:	1a0052f8 	.word	0x1a0052f8
1a002824:	1a002b59 	.word	0x1a002b59
1a002828:	10002b3c 	.word	0x10002b3c

1a00282c <xTimerCreateStatic>:
	{
1a00282c:	b530      	push	{r4, r5, lr}
1a00282e:	b085      	sub	sp, #20
1a002830:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002832:	2530      	movs	r5, #48	; 0x30
1a002834:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a002836:	9d03      	ldr	r5, [sp, #12]
1a002838:	2d30      	cmp	r5, #48	; 0x30
1a00283a:	d008      	beq.n	1a00284e <xTimerCreateStatic+0x22>
1a00283c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002840:	f383 8811 	msr	BASEPRI, r3
1a002844:	f3bf 8f6f 	isb	sy
1a002848:	f3bf 8f4f 	dsb	sy
1a00284c:	e7fe      	b.n	1a00284c <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a00284e:	b944      	cbnz	r4, 1a002862 <xTimerCreateStatic+0x36>
1a002850:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002854:	f383 8811 	msr	BASEPRI, r3
1a002858:	f3bf 8f6f 	isb	sy
1a00285c:	f3bf 8f4f 	dsb	sy
1a002860:	e7fe      	b.n	1a002860 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002862:	9401      	str	r4, [sp, #4]
1a002864:	9d08      	ldr	r5, [sp, #32]
1a002866:	9500      	str	r5, [sp, #0]
1a002868:	f7ff ff8e 	bl	1a002788 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a00286c:	2301      	movs	r3, #1
1a00286e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002872:	4620      	mov	r0, r4
1a002874:	b005      	add	sp, #20
1a002876:	bd30      	pop	{r4, r5, pc}

1a002878 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002878:	b1c8      	cbz	r0, 1a0028ae <xTimerGenericCommand+0x36>
{
1a00287a:	b530      	push	{r4, r5, lr}
1a00287c:	b085      	sub	sp, #20
1a00287e:	4615      	mov	r5, r2
1a002880:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002882:	4a17      	ldr	r2, [pc, #92]	; (1a0028e0 <xTimerGenericCommand+0x68>)
1a002884:	6810      	ldr	r0, [r2, #0]
1a002886:	b340      	cbz	r0, 1a0028da <xTimerGenericCommand+0x62>
1a002888:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a00288a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a00288c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00288e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002890:	2905      	cmp	r1, #5
1a002892:	dc1d      	bgt.n	1a0028d0 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002894:	f7ff fdda 	bl	1a00244c <xTaskGetSchedulerState>
1a002898:	2802      	cmp	r0, #2
1a00289a:	d011      	beq.n	1a0028c0 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a00289c:	2300      	movs	r3, #0
1a00289e:	461a      	mov	r2, r3
1a0028a0:	4669      	mov	r1, sp
1a0028a2:	480f      	ldr	r0, [pc, #60]	; (1a0028e0 <xTimerGenericCommand+0x68>)
1a0028a4:	6800      	ldr	r0, [r0, #0]
1a0028a6:	f7fe fd71 	bl	1a00138c <xQueueGenericSend>
}
1a0028aa:	b005      	add	sp, #20
1a0028ac:	bd30      	pop	{r4, r5, pc}
1a0028ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028b2:	f383 8811 	msr	BASEPRI, r3
1a0028b6:	f3bf 8f6f 	isb	sy
1a0028ba:	f3bf 8f4f 	dsb	sy
1a0028be:	e7fe      	b.n	1a0028be <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0028c0:	2300      	movs	r3, #0
1a0028c2:	9a08      	ldr	r2, [sp, #32]
1a0028c4:	4669      	mov	r1, sp
1a0028c6:	4806      	ldr	r0, [pc, #24]	; (1a0028e0 <xTimerGenericCommand+0x68>)
1a0028c8:	6800      	ldr	r0, [r0, #0]
1a0028ca:	f7fe fd5f 	bl	1a00138c <xQueueGenericSend>
1a0028ce:	e7ec      	b.n	1a0028aa <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0028d0:	2300      	movs	r3, #0
1a0028d2:	4669      	mov	r1, sp
1a0028d4:	f7fe fe18 	bl	1a001508 <xQueueGenericSendFromISR>
1a0028d8:	e7e7      	b.n	1a0028aa <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0028da:	2000      	movs	r0, #0
	return xReturn;
1a0028dc:	e7e5      	b.n	1a0028aa <xTimerGenericCommand+0x32>
1a0028de:	bf00      	nop
1a0028e0:	10002b38 	.word	0x10002b38

1a0028e4 <prvSwitchTimerLists>:
{
1a0028e4:	b570      	push	{r4, r5, r6, lr}
1a0028e6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0028e8:	4b1a      	ldr	r3, [pc, #104]	; (1a002954 <prvSwitchTimerLists+0x70>)
1a0028ea:	681b      	ldr	r3, [r3, #0]
1a0028ec:	681a      	ldr	r2, [r3, #0]
1a0028ee:	b352      	cbz	r2, 1a002946 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0028f0:	68db      	ldr	r3, [r3, #12]
1a0028f2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0028f4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0028f6:	1d25      	adds	r5, r4, #4
1a0028f8:	4628      	mov	r0, r5
1a0028fa:	f7ff f856 	bl	1a0019aa <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0028fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002900:	4620      	mov	r0, r4
1a002902:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002904:	69e3      	ldr	r3, [r4, #28]
1a002906:	2b01      	cmp	r3, #1
1a002908:	d1ee      	bne.n	1a0028e8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00290a:	69a3      	ldr	r3, [r4, #24]
1a00290c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00290e:	429e      	cmp	r6, r3
1a002910:	d207      	bcs.n	1a002922 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002912:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002914:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002916:	4629      	mov	r1, r5
1a002918:	4b0e      	ldr	r3, [pc, #56]	; (1a002954 <prvSwitchTimerLists+0x70>)
1a00291a:	6818      	ldr	r0, [r3, #0]
1a00291c:	f7ff f82b 	bl	1a001976 <vListInsert>
1a002920:	e7e2      	b.n	1a0028e8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002922:	2100      	movs	r1, #0
1a002924:	9100      	str	r1, [sp, #0]
1a002926:	460b      	mov	r3, r1
1a002928:	4632      	mov	r2, r6
1a00292a:	4620      	mov	r0, r4
1a00292c:	f7ff ffa4 	bl	1a002878 <xTimerGenericCommand>
				configASSERT( xResult );
1a002930:	2800      	cmp	r0, #0
1a002932:	d1d9      	bne.n	1a0028e8 <prvSwitchTimerLists+0x4>
1a002934:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002938:	f383 8811 	msr	BASEPRI, r3
1a00293c:	f3bf 8f6f 	isb	sy
1a002940:	f3bf 8f4f 	dsb	sy
1a002944:	e7fe      	b.n	1a002944 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002946:	4a04      	ldr	r2, [pc, #16]	; (1a002958 <prvSwitchTimerLists+0x74>)
1a002948:	6810      	ldr	r0, [r2, #0]
1a00294a:	4902      	ldr	r1, [pc, #8]	; (1a002954 <prvSwitchTimerLists+0x70>)
1a00294c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00294e:	6013      	str	r3, [r2, #0]
}
1a002950:	b002      	add	sp, #8
1a002952:	bd70      	pop	{r4, r5, r6, pc}
1a002954:	10002a14 	.word	0x10002a14
1a002958:	10002a18 	.word	0x10002a18

1a00295c <prvSampleTimeNow>:
{
1a00295c:	b538      	push	{r3, r4, r5, lr}
1a00295e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002960:	f7ff fa9c 	bl	1a001e9c <xTaskGetTickCount>
1a002964:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002966:	4b07      	ldr	r3, [pc, #28]	; (1a002984 <prvSampleTimeNow+0x28>)
1a002968:	681b      	ldr	r3, [r3, #0]
1a00296a:	4283      	cmp	r3, r0
1a00296c:	d805      	bhi.n	1a00297a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00296e:	2300      	movs	r3, #0
1a002970:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002972:	4b04      	ldr	r3, [pc, #16]	; (1a002984 <prvSampleTimeNow+0x28>)
1a002974:	601c      	str	r4, [r3, #0]
}
1a002976:	4620      	mov	r0, r4
1a002978:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a00297a:	f7ff ffb3 	bl	1a0028e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00297e:	2301      	movs	r3, #1
1a002980:	602b      	str	r3, [r5, #0]
1a002982:	e7f6      	b.n	1a002972 <prvSampleTimeNow+0x16>
1a002984:	10002ae4 	.word	0x10002ae4

1a002988 <prvProcessExpiredTimer>:
{
1a002988:	b570      	push	{r4, r5, r6, lr}
1a00298a:	b082      	sub	sp, #8
1a00298c:	4605      	mov	r5, r0
1a00298e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002990:	4b14      	ldr	r3, [pc, #80]	; (1a0029e4 <prvProcessExpiredTimer+0x5c>)
1a002992:	681b      	ldr	r3, [r3, #0]
1a002994:	68db      	ldr	r3, [r3, #12]
1a002996:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002998:	1d20      	adds	r0, r4, #4
1a00299a:	f7ff f806 	bl	1a0019aa <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00299e:	69e3      	ldr	r3, [r4, #28]
1a0029a0:	2b01      	cmp	r3, #1
1a0029a2:	d004      	beq.n	1a0029ae <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0029a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0029a6:	4620      	mov	r0, r4
1a0029a8:	4798      	blx	r3
}
1a0029aa:	b002      	add	sp, #8
1a0029ac:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0029ae:	69a1      	ldr	r1, [r4, #24]
1a0029b0:	462b      	mov	r3, r5
1a0029b2:	4632      	mov	r2, r6
1a0029b4:	4429      	add	r1, r5
1a0029b6:	4620      	mov	r0, r4
1a0029b8:	f7ff fe8a 	bl	1a0026d0 <prvInsertTimerInActiveList>
1a0029bc:	2800      	cmp	r0, #0
1a0029be:	d0f1      	beq.n	1a0029a4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0029c0:	2100      	movs	r1, #0
1a0029c2:	9100      	str	r1, [sp, #0]
1a0029c4:	460b      	mov	r3, r1
1a0029c6:	462a      	mov	r2, r5
1a0029c8:	4620      	mov	r0, r4
1a0029ca:	f7ff ff55 	bl	1a002878 <xTimerGenericCommand>
			configASSERT( xResult );
1a0029ce:	2800      	cmp	r0, #0
1a0029d0:	d1e8      	bne.n	1a0029a4 <prvProcessExpiredTimer+0x1c>
1a0029d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029d6:	f383 8811 	msr	BASEPRI, r3
1a0029da:	f3bf 8f6f 	isb	sy
1a0029de:	f3bf 8f4f 	dsb	sy
1a0029e2:	e7fe      	b.n	1a0029e2 <prvProcessExpiredTimer+0x5a>
1a0029e4:	10002a14 	.word	0x10002a14

1a0029e8 <prvProcessTimerOrBlockTask>:
{
1a0029e8:	b570      	push	{r4, r5, r6, lr}
1a0029ea:	b082      	sub	sp, #8
1a0029ec:	4606      	mov	r6, r0
1a0029ee:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a0029f0:	f7ff fa4c 	bl	1a001e8c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0029f4:	a801      	add	r0, sp, #4
1a0029f6:	f7ff ffb1 	bl	1a00295c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0029fa:	9b01      	ldr	r3, [sp, #4]
1a0029fc:	bb1b      	cbnz	r3, 1a002a46 <prvProcessTimerOrBlockTask+0x5e>
1a0029fe:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002a00:	b90c      	cbnz	r4, 1a002a06 <prvProcessTimerOrBlockTask+0x1e>
1a002a02:	42b0      	cmp	r0, r6
1a002a04:	d218      	bcs.n	1a002a38 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002a06:	b12c      	cbz	r4, 1a002a14 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002a08:	4b11      	ldr	r3, [pc, #68]	; (1a002a50 <prvProcessTimerOrBlockTask+0x68>)
1a002a0a:	681b      	ldr	r3, [r3, #0]
1a002a0c:	681c      	ldr	r4, [r3, #0]
1a002a0e:	fab4 f484 	clz	r4, r4
1a002a12:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002a14:	4622      	mov	r2, r4
1a002a16:	1b71      	subs	r1, r6, r5
1a002a18:	4b0e      	ldr	r3, [pc, #56]	; (1a002a54 <prvProcessTimerOrBlockTask+0x6c>)
1a002a1a:	6818      	ldr	r0, [r3, #0]
1a002a1c:	f7fe ff68 	bl	1a0018f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002a20:	f7ff face 	bl	1a001fc0 <xTaskResumeAll>
1a002a24:	b988      	cbnz	r0, 1a002a4a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002a26:	4b0c      	ldr	r3, [pc, #48]	; (1a002a58 <prvProcessTimerOrBlockTask+0x70>)
1a002a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002a2c:	601a      	str	r2, [r3, #0]
1a002a2e:	f3bf 8f4f 	dsb	sy
1a002a32:	f3bf 8f6f 	isb	sy
1a002a36:	e008      	b.n	1a002a4a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002a38:	f7ff fac2 	bl	1a001fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002a3c:	4629      	mov	r1, r5
1a002a3e:	4630      	mov	r0, r6
1a002a40:	f7ff ffa2 	bl	1a002988 <prvProcessExpiredTimer>
1a002a44:	e001      	b.n	1a002a4a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002a46:	f7ff fabb 	bl	1a001fc0 <xTaskResumeAll>
}
1a002a4a:	b002      	add	sp, #8
1a002a4c:	bd70      	pop	{r4, r5, r6, pc}
1a002a4e:	bf00      	nop
1a002a50:	10002a18 	.word	0x10002a18
1a002a54:	10002b38 	.word	0x10002b38
1a002a58:	e000ed04 	.word	0xe000ed04

1a002a5c <prvProcessReceivedCommands>:
{
1a002a5c:	b530      	push	{r4, r5, lr}
1a002a5e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002a60:	e002      	b.n	1a002a68 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002a62:	9b04      	ldr	r3, [sp, #16]
1a002a64:	2b00      	cmp	r3, #0
1a002a66:	da0f      	bge.n	1a002a88 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002a68:	2200      	movs	r2, #0
1a002a6a:	a904      	add	r1, sp, #16
1a002a6c:	4b39      	ldr	r3, [pc, #228]	; (1a002b54 <prvProcessReceivedCommands+0xf8>)
1a002a6e:	6818      	ldr	r0, [r3, #0]
1a002a70:	f7fe fdb0 	bl	1a0015d4 <xQueueReceive>
1a002a74:	2800      	cmp	r0, #0
1a002a76:	d06a      	beq.n	1a002b4e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002a78:	9b04      	ldr	r3, [sp, #16]
1a002a7a:	2b00      	cmp	r3, #0
1a002a7c:	daf1      	bge.n	1a002a62 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002a7e:	9907      	ldr	r1, [sp, #28]
1a002a80:	9806      	ldr	r0, [sp, #24]
1a002a82:	9b05      	ldr	r3, [sp, #20]
1a002a84:	4798      	blx	r3
1a002a86:	e7ec      	b.n	1a002a62 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002a88:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002a8a:	6963      	ldr	r3, [r4, #20]
1a002a8c:	b113      	cbz	r3, 1a002a94 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002a8e:	1d20      	adds	r0, r4, #4
1a002a90:	f7fe ff8b 	bl	1a0019aa <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002a94:	a803      	add	r0, sp, #12
1a002a96:	f7ff ff61 	bl	1a00295c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002a9a:	9b04      	ldr	r3, [sp, #16]
1a002a9c:	2b09      	cmp	r3, #9
1a002a9e:	d8e3      	bhi.n	1a002a68 <prvProcessReceivedCommands+0xc>
1a002aa0:	a201      	add	r2, pc, #4	; (adr r2, 1a002aa8 <prvProcessReceivedCommands+0x4c>)
1a002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002aa6:	bf00      	nop
1a002aa8:	1a002ad1 	.word	0x1a002ad1
1a002aac:	1a002ad1 	.word	0x1a002ad1
1a002ab0:	1a002ad1 	.word	0x1a002ad1
1a002ab4:	1a002a69 	.word	0x1a002a69
1a002ab8:	1a002b19 	.word	0x1a002b19
1a002abc:	1a002b3f 	.word	0x1a002b3f
1a002ac0:	1a002ad1 	.word	0x1a002ad1
1a002ac4:	1a002ad1 	.word	0x1a002ad1
1a002ac8:	1a002a69 	.word	0x1a002a69
1a002acc:	1a002b19 	.word	0x1a002b19
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002ad0:	9905      	ldr	r1, [sp, #20]
1a002ad2:	69a5      	ldr	r5, [r4, #24]
1a002ad4:	460b      	mov	r3, r1
1a002ad6:	4602      	mov	r2, r0
1a002ad8:	4429      	add	r1, r5
1a002ada:	4620      	mov	r0, r4
1a002adc:	f7ff fdf8 	bl	1a0026d0 <prvInsertTimerInActiveList>
1a002ae0:	2800      	cmp	r0, #0
1a002ae2:	d0c1      	beq.n	1a002a68 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002ae6:	4620      	mov	r0, r4
1a002ae8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002aea:	69e3      	ldr	r3, [r4, #28]
1a002aec:	2b01      	cmp	r3, #1
1a002aee:	d1bb      	bne.n	1a002a68 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002af0:	69a2      	ldr	r2, [r4, #24]
1a002af2:	2100      	movs	r1, #0
1a002af4:	9100      	str	r1, [sp, #0]
1a002af6:	460b      	mov	r3, r1
1a002af8:	9805      	ldr	r0, [sp, #20]
1a002afa:	4402      	add	r2, r0
1a002afc:	4620      	mov	r0, r4
1a002afe:	f7ff febb 	bl	1a002878 <xTimerGenericCommand>
							configASSERT( xResult );
1a002b02:	2800      	cmp	r0, #0
1a002b04:	d1b0      	bne.n	1a002a68 <prvProcessReceivedCommands+0xc>
1a002b06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b0a:	f383 8811 	msr	BASEPRI, r3
1a002b0e:	f3bf 8f6f 	isb	sy
1a002b12:	f3bf 8f4f 	dsb	sy
1a002b16:	e7fe      	b.n	1a002b16 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002b18:	9905      	ldr	r1, [sp, #20]
1a002b1a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002b1c:	b131      	cbz	r1, 1a002b2c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002b1e:	4603      	mov	r3, r0
1a002b20:	4602      	mov	r2, r0
1a002b22:	4401      	add	r1, r0
1a002b24:	4620      	mov	r0, r4
1a002b26:	f7ff fdd3 	bl	1a0026d0 <prvInsertTimerInActiveList>
					break;
1a002b2a:	e79d      	b.n	1a002a68 <prvProcessReceivedCommands+0xc>
1a002b2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b30:	f383 8811 	msr	BASEPRI, r3
1a002b34:	f3bf 8f6f 	isb	sy
1a002b38:	f3bf 8f4f 	dsb	sy
1a002b3c:	e7fe      	b.n	1a002b3c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002b3e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002b42:	2b00      	cmp	r3, #0
1a002b44:	d190      	bne.n	1a002a68 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002b46:	4620      	mov	r0, r4
1a002b48:	f7fe faaa 	bl	1a0010a0 <vPortFree>
1a002b4c:	e78c      	b.n	1a002a68 <prvProcessReceivedCommands+0xc>
}
1a002b4e:	b009      	add	sp, #36	; 0x24
1a002b50:	bd30      	pop	{r4, r5, pc}
1a002b52:	bf00      	nop
1a002b54:	10002b38 	.word	0x10002b38

1a002b58 <prvTimerTask>:
{
1a002b58:	b500      	push	{lr}
1a002b5a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002b5c:	a801      	add	r0, sp, #4
1a002b5e:	f7ff fda7 	bl	1a0026b0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002b62:	9901      	ldr	r1, [sp, #4]
1a002b64:	f7ff ff40 	bl	1a0029e8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002b68:	f7ff ff78 	bl	1a002a5c <prvProcessReceivedCommands>
1a002b6c:	e7f6      	b.n	1a002b5c <prvTimerTask+0x4>
1a002b6e:	Address 0x000000001a002b6e is out of bounds.


1a002b70 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002b70:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002b72:	2300      	movs	r3, #0
1a002b74:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002b76:	4b0d      	ldr	r3, [pc, #52]	; (1a002bac <prvTaskExitError+0x3c>)
1a002b78:	681b      	ldr	r3, [r3, #0]
1a002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002b7e:	d008      	beq.n	1a002b92 <prvTaskExitError+0x22>
1a002b80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b84:	f383 8811 	msr	BASEPRI, r3
1a002b88:	f3bf 8f6f 	isb	sy
1a002b8c:	f3bf 8f4f 	dsb	sy
1a002b90:	e7fe      	b.n	1a002b90 <prvTaskExitError+0x20>
1a002b92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b96:	f383 8811 	msr	BASEPRI, r3
1a002b9a:	f3bf 8f6f 	isb	sy
1a002b9e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002ba2:	9b01      	ldr	r3, [sp, #4]
1a002ba4:	2b00      	cmp	r3, #0
1a002ba6:	d0fc      	beq.n	1a002ba2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002ba8:	b002      	add	sp, #8
1a002baa:	4770      	bx	lr
1a002bac:	10000018 	.word	0x10000018

1a002bb0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002bb0:	4808      	ldr	r0, [pc, #32]	; (1a002bd4 <prvPortStartFirstTask+0x24>)
1a002bb2:	6800      	ldr	r0, [r0, #0]
1a002bb4:	6800      	ldr	r0, [r0, #0]
1a002bb6:	f380 8808 	msr	MSP, r0
1a002bba:	f04f 0000 	mov.w	r0, #0
1a002bbe:	f380 8814 	msr	CONTROL, r0
1a002bc2:	b662      	cpsie	i
1a002bc4:	b661      	cpsie	f
1a002bc6:	f3bf 8f4f 	dsb	sy
1a002bca:	f3bf 8f6f 	isb	sy
1a002bce:	df00      	svc	0
1a002bd0:	bf00      	nop
1a002bd2:	0000      	.short	0x0000
1a002bd4:	e000ed08 	.word	0xe000ed08

1a002bd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002bd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002be8 <vPortEnableVFP+0x10>
1a002bdc:	6801      	ldr	r1, [r0, #0]
1a002bde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002be2:	6001      	str	r1, [r0, #0]
1a002be4:	4770      	bx	lr
1a002be6:	0000      	.short	0x0000
1a002be8:	e000ed88 	.word	0xe000ed88

1a002bec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002bf0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002bf4:	f021 0101 	bic.w	r1, r1, #1
1a002bf8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002bfc:	4b05      	ldr	r3, [pc, #20]	; (1a002c14 <pxPortInitialiseStack+0x28>)
1a002bfe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002c02:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002c06:	f06f 0302 	mvn.w	r3, #2
1a002c0a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002c0e:	3844      	subs	r0, #68	; 0x44
1a002c10:	4770      	bx	lr
1a002c12:	bf00      	nop
1a002c14:	1a002b71 	.word	0x1a002b71
1a002c18:	ffffffff 	.word	0xffffffff
1a002c1c:	ffffffff 	.word	0xffffffff

1a002c20 <SVC_Handler>:
	__asm volatile (
1a002c20:	4b07      	ldr	r3, [pc, #28]	; (1a002c40 <pxCurrentTCBConst2>)
1a002c22:	6819      	ldr	r1, [r3, #0]
1a002c24:	6808      	ldr	r0, [r1, #0]
1a002c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002c2a:	f380 8809 	msr	PSP, r0
1a002c2e:	f3bf 8f6f 	isb	sy
1a002c32:	f04f 0000 	mov.w	r0, #0
1a002c36:	f380 8811 	msr	BASEPRI, r0
1a002c3a:	4770      	bx	lr
1a002c3c:	f3af 8000 	nop.w

1a002c40 <pxCurrentTCBConst2>:
1a002c40:	100028ec 	.word	0x100028ec

1a002c44 <vPortEnterCritical>:
1a002c44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c48:	f383 8811 	msr	BASEPRI, r3
1a002c4c:	f3bf 8f6f 	isb	sy
1a002c50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002c54:	4a0a      	ldr	r2, [pc, #40]	; (1a002c80 <vPortEnterCritical+0x3c>)
1a002c56:	6813      	ldr	r3, [r2, #0]
1a002c58:	3301      	adds	r3, #1
1a002c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002c5c:	2b01      	cmp	r3, #1
1a002c5e:	d000      	beq.n	1a002c62 <vPortEnterCritical+0x1e>
}
1a002c60:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002c62:	4b08      	ldr	r3, [pc, #32]	; (1a002c84 <vPortEnterCritical+0x40>)
1a002c64:	681b      	ldr	r3, [r3, #0]
1a002c66:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002c6a:	d0f9      	beq.n	1a002c60 <vPortEnterCritical+0x1c>
1a002c6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c70:	f383 8811 	msr	BASEPRI, r3
1a002c74:	f3bf 8f6f 	isb	sy
1a002c78:	f3bf 8f4f 	dsb	sy
1a002c7c:	e7fe      	b.n	1a002c7c <vPortEnterCritical+0x38>
1a002c7e:	bf00      	nop
1a002c80:	10000018 	.word	0x10000018
1a002c84:	e000ed04 	.word	0xe000ed04

1a002c88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002c88:	4b09      	ldr	r3, [pc, #36]	; (1a002cb0 <vPortExitCritical+0x28>)
1a002c8a:	681b      	ldr	r3, [r3, #0]
1a002c8c:	b943      	cbnz	r3, 1a002ca0 <vPortExitCritical+0x18>
1a002c8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c92:	f383 8811 	msr	BASEPRI, r3
1a002c96:	f3bf 8f6f 	isb	sy
1a002c9a:	f3bf 8f4f 	dsb	sy
1a002c9e:	e7fe      	b.n	1a002c9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002ca0:	3b01      	subs	r3, #1
1a002ca2:	4a03      	ldr	r2, [pc, #12]	; (1a002cb0 <vPortExitCritical+0x28>)
1a002ca4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002ca6:	b90b      	cbnz	r3, 1a002cac <vPortExitCritical+0x24>
	__asm volatile
1a002ca8:	f383 8811 	msr	BASEPRI, r3
}
1a002cac:	4770      	bx	lr
1a002cae:	bf00      	nop
1a002cb0:	10000018 	.word	0x10000018
1a002cb4:	ffffffff 	.word	0xffffffff
1a002cb8:	ffffffff 	.word	0xffffffff
1a002cbc:	ffffffff 	.word	0xffffffff

1a002cc0 <PendSV_Handler>:
	__asm volatile
1a002cc0:	f3ef 8009 	mrs	r0, PSP
1a002cc4:	f3bf 8f6f 	isb	sy
1a002cc8:	4b15      	ldr	r3, [pc, #84]	; (1a002d20 <pxCurrentTCBConst>)
1a002cca:	681a      	ldr	r2, [r3, #0]
1a002ccc:	f01e 0f10 	tst.w	lr, #16
1a002cd0:	bf08      	it	eq
1a002cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002cda:	6010      	str	r0, [r2, #0]
1a002cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002ce0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002ce4:	f380 8811 	msr	BASEPRI, r0
1a002ce8:	f3bf 8f4f 	dsb	sy
1a002cec:	f3bf 8f6f 	isb	sy
1a002cf0:	f7ff fa06 	bl	1a002100 <vTaskSwitchContext>
1a002cf4:	f04f 0000 	mov.w	r0, #0
1a002cf8:	f380 8811 	msr	BASEPRI, r0
1a002cfc:	bc09      	pop	{r0, r3}
1a002cfe:	6819      	ldr	r1, [r3, #0]
1a002d00:	6808      	ldr	r0, [r1, #0]
1a002d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002d06:	f01e 0f10 	tst.w	lr, #16
1a002d0a:	bf08      	it	eq
1a002d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002d10:	f380 8809 	msr	PSP, r0
1a002d14:	f3bf 8f6f 	isb	sy
1a002d18:	4770      	bx	lr
1a002d1a:	bf00      	nop
1a002d1c:	f3af 8000 	nop.w

1a002d20 <pxCurrentTCBConst>:
1a002d20:	100028ec 	.word	0x100028ec

1a002d24 <SysTick_Handler>:
{
1a002d24:	b508      	push	{r3, lr}
	__asm volatile
1a002d26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d2a:	f383 8811 	msr	BASEPRI, r3
1a002d2e:	f3bf 8f6f 	isb	sy
1a002d32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002d36:	f7ff f8b7 	bl	1a001ea8 <xTaskIncrementTick>
1a002d3a:	b118      	cbz	r0, 1a002d44 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002d3c:	4b03      	ldr	r3, [pc, #12]	; (1a002d4c <SysTick_Handler+0x28>)
1a002d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002d42:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002d44:	2300      	movs	r3, #0
1a002d46:	f383 8811 	msr	BASEPRI, r3
}
1a002d4a:	bd08      	pop	{r3, pc}
1a002d4c:	e000ed04 	.word	0xe000ed04

1a002d50 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002d50:	4a08      	ldr	r2, [pc, #32]	; (1a002d74 <vPortSetupTimerInterrupt+0x24>)
1a002d52:	2300      	movs	r3, #0
1a002d54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002d56:	4908      	ldr	r1, [pc, #32]	; (1a002d78 <vPortSetupTimerInterrupt+0x28>)
1a002d58:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002d5a:	4b08      	ldr	r3, [pc, #32]	; (1a002d7c <vPortSetupTimerInterrupt+0x2c>)
1a002d5c:	681b      	ldr	r3, [r3, #0]
1a002d5e:	4908      	ldr	r1, [pc, #32]	; (1a002d80 <vPortSetupTimerInterrupt+0x30>)
1a002d60:	fba1 1303 	umull	r1, r3, r1, r3
1a002d64:	099b      	lsrs	r3, r3, #6
1a002d66:	3b01      	subs	r3, #1
1a002d68:	4906      	ldr	r1, [pc, #24]	; (1a002d84 <vPortSetupTimerInterrupt+0x34>)
1a002d6a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002d6c:	2307      	movs	r3, #7
1a002d6e:	6013      	str	r3, [r2, #0]
}
1a002d70:	4770      	bx	lr
1a002d72:	bf00      	nop
1a002d74:	e000e010 	.word	0xe000e010
1a002d78:	e000e018 	.word	0xe000e018
1a002d7c:	10002d58 	.word	0x10002d58
1a002d80:	10624dd3 	.word	0x10624dd3
1a002d84:	e000e014 	.word	0xe000e014

1a002d88 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002d88:	4b3a      	ldr	r3, [pc, #232]	; (1a002e74 <xPortStartScheduler+0xec>)
1a002d8a:	681a      	ldr	r2, [r3, #0]
1a002d8c:	4b3a      	ldr	r3, [pc, #232]	; (1a002e78 <xPortStartScheduler+0xf0>)
1a002d8e:	429a      	cmp	r2, r3
1a002d90:	d00d      	beq.n	1a002dae <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002d92:	4b38      	ldr	r3, [pc, #224]	; (1a002e74 <xPortStartScheduler+0xec>)
1a002d94:	681a      	ldr	r2, [r3, #0]
1a002d96:	4b39      	ldr	r3, [pc, #228]	; (1a002e7c <xPortStartScheduler+0xf4>)
1a002d98:	429a      	cmp	r2, r3
1a002d9a:	d111      	bne.n	1a002dc0 <xPortStartScheduler+0x38>
	__asm volatile
1a002d9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002da0:	f383 8811 	msr	BASEPRI, r3
1a002da4:	f3bf 8f6f 	isb	sy
1a002da8:	f3bf 8f4f 	dsb	sy
1a002dac:	e7fe      	b.n	1a002dac <xPortStartScheduler+0x24>
1a002dae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002db2:	f383 8811 	msr	BASEPRI, r3
1a002db6:	f3bf 8f6f 	isb	sy
1a002dba:	f3bf 8f4f 	dsb	sy
1a002dbe:	e7fe      	b.n	1a002dbe <xPortStartScheduler+0x36>
{
1a002dc0:	b510      	push	{r4, lr}
1a002dc2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002dc4:	4b2e      	ldr	r3, [pc, #184]	; (1a002e80 <xPortStartScheduler+0xf8>)
1a002dc6:	781a      	ldrb	r2, [r3, #0]
1a002dc8:	b2d2      	uxtb	r2, r2
1a002dca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002dcc:	22ff      	movs	r2, #255	; 0xff
1a002dce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002dd0:	781b      	ldrb	r3, [r3, #0]
1a002dd2:	b2db      	uxtb	r3, r3
1a002dd4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002dd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002ddc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002de0:	4a28      	ldr	r2, [pc, #160]	; (1a002e84 <xPortStartScheduler+0xfc>)
1a002de2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002de4:	4b28      	ldr	r3, [pc, #160]	; (1a002e88 <xPortStartScheduler+0x100>)
1a002de6:	2207      	movs	r2, #7
1a002de8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002dea:	e009      	b.n	1a002e00 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a002dec:	4a26      	ldr	r2, [pc, #152]	; (1a002e88 <xPortStartScheduler+0x100>)
1a002dee:	6813      	ldr	r3, [r2, #0]
1a002df0:	3b01      	subs	r3, #1
1a002df2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002df4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002df8:	005b      	lsls	r3, r3, #1
1a002dfa:	b2db      	uxtb	r3, r3
1a002dfc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002e00:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002e04:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002e08:	d1f0      	bne.n	1a002dec <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002e0a:	4b1f      	ldr	r3, [pc, #124]	; (1a002e88 <xPortStartScheduler+0x100>)
1a002e0c:	681b      	ldr	r3, [r3, #0]
1a002e0e:	2b04      	cmp	r3, #4
1a002e10:	d008      	beq.n	1a002e24 <xPortStartScheduler+0x9c>
1a002e12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e16:	f383 8811 	msr	BASEPRI, r3
1a002e1a:	f3bf 8f6f 	isb	sy
1a002e1e:	f3bf 8f4f 	dsb	sy
1a002e22:	e7fe      	b.n	1a002e22 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002e24:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002e26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002e2a:	4a17      	ldr	r2, [pc, #92]	; (1a002e88 <xPortStartScheduler+0x100>)
1a002e2c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002e2e:	9b01      	ldr	r3, [sp, #4]
1a002e30:	b2db      	uxtb	r3, r3
1a002e32:	4a13      	ldr	r2, [pc, #76]	; (1a002e80 <xPortStartScheduler+0xf8>)
1a002e34:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002e36:	4b15      	ldr	r3, [pc, #84]	; (1a002e8c <xPortStartScheduler+0x104>)
1a002e38:	681a      	ldr	r2, [r3, #0]
1a002e3a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002e3e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002e40:	681a      	ldr	r2, [r3, #0]
1a002e42:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002e46:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002e48:	f7ff ff82 	bl	1a002d50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002e4c:	2400      	movs	r4, #0
1a002e4e:	4b10      	ldr	r3, [pc, #64]	; (1a002e90 <xPortStartScheduler+0x108>)
1a002e50:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002e52:	f7ff fec1 	bl	1a002bd8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002e56:	4a0f      	ldr	r2, [pc, #60]	; (1a002e94 <xPortStartScheduler+0x10c>)
1a002e58:	6813      	ldr	r3, [r2, #0]
1a002e5a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002e5e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002e60:	f7ff fea6 	bl	1a002bb0 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002e64:	f7ff f94c 	bl	1a002100 <vTaskSwitchContext>
	prvTaskExitError();
1a002e68:	f7ff fe82 	bl	1a002b70 <prvTaskExitError>
}
1a002e6c:	4620      	mov	r0, r4
1a002e6e:	b002      	add	sp, #8
1a002e70:	bd10      	pop	{r4, pc}
1a002e72:	bf00      	nop
1a002e74:	e000ed00 	.word	0xe000ed00
1a002e78:	410fc271 	.word	0x410fc271
1a002e7c:	410fc270 	.word	0x410fc270
1a002e80:	e000e400 	.word	0xe000e400
1a002e84:	10002b40 	.word	0x10002b40
1a002e88:	10002b44 	.word	0x10002b44
1a002e8c:	e000ed20 	.word	0xe000ed20
1a002e90:	10000018 	.word	0x10000018
1a002e94:	e000ef34 	.word	0xe000ef34

1a002e98 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002e98:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002e9c:	2b0f      	cmp	r3, #15
1a002e9e:	d90f      	bls.n	1a002ec0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002ea0:	4a10      	ldr	r2, [pc, #64]	; (1a002ee4 <vPortValidateInterruptPriority+0x4c>)
1a002ea2:	5c9b      	ldrb	r3, [r3, r2]
1a002ea4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002ea6:	4a10      	ldr	r2, [pc, #64]	; (1a002ee8 <vPortValidateInterruptPriority+0x50>)
1a002ea8:	7812      	ldrb	r2, [r2, #0]
1a002eaa:	429a      	cmp	r2, r3
1a002eac:	d908      	bls.n	1a002ec0 <vPortValidateInterruptPriority+0x28>
1a002eae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002eb2:	f383 8811 	msr	BASEPRI, r3
1a002eb6:	f3bf 8f6f 	isb	sy
1a002eba:	f3bf 8f4f 	dsb	sy
1a002ebe:	e7fe      	b.n	1a002ebe <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002ec0:	4b0a      	ldr	r3, [pc, #40]	; (1a002eec <vPortValidateInterruptPriority+0x54>)
1a002ec2:	681b      	ldr	r3, [r3, #0]
1a002ec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002ec8:	4a09      	ldr	r2, [pc, #36]	; (1a002ef0 <vPortValidateInterruptPriority+0x58>)
1a002eca:	6812      	ldr	r2, [r2, #0]
1a002ecc:	4293      	cmp	r3, r2
1a002ece:	d908      	bls.n	1a002ee2 <vPortValidateInterruptPriority+0x4a>
1a002ed0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ed4:	f383 8811 	msr	BASEPRI, r3
1a002ed8:	f3bf 8f6f 	isb	sy
1a002edc:	f3bf 8f4f 	dsb	sy
1a002ee0:	e7fe      	b.n	1a002ee0 <vPortValidateInterruptPriority+0x48>
	}
1a002ee2:	4770      	bx	lr
1a002ee4:	e000e3f0 	.word	0xe000e3f0
1a002ee8:	10002b40 	.word	0x10002b40
1a002eec:	e000ed0c 	.word	0xe000ed0c
1a002ef0:	10002b44 	.word	0x10002b44

1a002ef4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002ef4:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002ef6:	4b05      	ldr	r3, [pc, #20]	; (1a002f0c <DAC_IRQHandler+0x18>)
1a002ef8:	2201      	movs	r2, #1
1a002efa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a002efe:	4b04      	ldr	r3, [pc, #16]	; (1a002f10 <DAC_IRQHandler+0x1c>)
1a002f00:	681b      	ldr	r3, [r3, #0]
1a002f02:	b113      	cbz	r3, 1a002f0a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002f04:	4b02      	ldr	r3, [pc, #8]	; (1a002f10 <DAC_IRQHandler+0x1c>)
1a002f06:	681b      	ldr	r3, [r3, #0]
1a002f08:	4798      	blx	r3
   }
}
1a002f0a:	bd08      	pop	{r3, pc}
1a002f0c:	e000e100 	.word	0xe000e100
1a002f10:	10002b48 	.word	0x10002b48

1a002f14 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002f14:	2200      	movs	r2, #0
1a002f16:	2a05      	cmp	r2, #5
1a002f18:	d819      	bhi.n	1a002f4e <Board_LED_Init+0x3a>
{
1a002f1a:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002f1c:	490c      	ldr	r1, [pc, #48]	; (1a002f50 <Board_LED_Init+0x3c>)
1a002f1e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002f22:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002f26:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002f28:	4b0a      	ldr	r3, [pc, #40]	; (1a002f54 <Board_LED_Init+0x40>)
1a002f2a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002f2e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002f32:	2001      	movs	r0, #1
1a002f34:	40a0      	lsls	r0, r4
1a002f36:	4301      	orrs	r1, r0
1a002f38:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002f3c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002f40:	2100      	movs	r1, #0
1a002f42:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002f44:	3201      	adds	r2, #1
1a002f46:	2a05      	cmp	r2, #5
1a002f48:	d9e8      	bls.n	1a002f1c <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002f4a:	bc70      	pop	{r4, r5, r6}
1a002f4c:	4770      	bx	lr
1a002f4e:	4770      	bx	lr
1a002f50:	1a00530c 	.word	0x1a00530c
1a002f54:	400f4000 	.word	0x400f4000

1a002f58 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002f58:	2300      	movs	r3, #0
1a002f5a:	2b03      	cmp	r3, #3
1a002f5c:	d816      	bhi.n	1a002f8c <Board_TEC_Init+0x34>
{
1a002f5e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002f60:	490b      	ldr	r1, [pc, #44]	; (1a002f90 <Board_TEC_Init+0x38>)
1a002f62:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002f66:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002f6a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002f6c:	4c09      	ldr	r4, [pc, #36]	; (1a002f94 <Board_TEC_Init+0x3c>)
1a002f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002f72:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002f76:	2001      	movs	r0, #1
1a002f78:	40a8      	lsls	r0, r5
1a002f7a:	ea21 0100 	bic.w	r1, r1, r0
1a002f7e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002f82:	3301      	adds	r3, #1
1a002f84:	2b03      	cmp	r3, #3
1a002f86:	d9eb      	bls.n	1a002f60 <Board_TEC_Init+0x8>
    }
}
1a002f88:	bc30      	pop	{r4, r5}
1a002f8a:	4770      	bx	lr
1a002f8c:	4770      	bx	lr
1a002f8e:	bf00      	nop
1a002f90:	1a005304 	.word	0x1a005304
1a002f94:	400f4000 	.word	0x400f4000

1a002f98 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002f98:	2300      	movs	r3, #0
1a002f9a:	2b08      	cmp	r3, #8
1a002f9c:	d816      	bhi.n	1a002fcc <Board_GPIO_Init+0x34>
{
1a002f9e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002fa0:	490b      	ldr	r1, [pc, #44]	; (1a002fd0 <Board_GPIO_Init+0x38>)
1a002fa2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002fa6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002faa:	784d      	ldrb	r5, [r1, #1]
1a002fac:	4c09      	ldr	r4, [pc, #36]	; (1a002fd4 <Board_GPIO_Init+0x3c>)
1a002fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002fb2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002fb6:	2001      	movs	r0, #1
1a002fb8:	40a8      	lsls	r0, r5
1a002fba:	ea21 0100 	bic.w	r1, r1, r0
1a002fbe:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002fc2:	3301      	adds	r3, #1
1a002fc4:	2b08      	cmp	r3, #8
1a002fc6:	d9eb      	bls.n	1a002fa0 <Board_GPIO_Init+0x8>
    }
}
1a002fc8:	bc30      	pop	{r4, r5}
1a002fca:	4770      	bx	lr
1a002fcc:	4770      	bx	lr
1a002fce:	bf00      	nop
1a002fd0:	1a005318 	.word	0x1a005318
1a002fd4:	400f4000 	.word	0x400f4000

1a002fd8 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002fd8:	b510      	push	{r4, lr}
1a002fda:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002fdc:	4c08      	ldr	r4, [pc, #32]	; (1a003000 <Board_ADC_Init+0x28>)
1a002fde:	4669      	mov	r1, sp
1a002fe0:	4620      	mov	r0, r4
1a002fe2:	f000 f9bd 	bl	1a003360 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002fe6:	4a07      	ldr	r2, [pc, #28]	; (1a003004 <Board_ADC_Init+0x2c>)
1a002fe8:	4669      	mov	r1, sp
1a002fea:	4620      	mov	r0, r4
1a002fec:	f000 f9d8 	bl	1a0033a0 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002ff0:	2200      	movs	r2, #0
1a002ff2:	4669      	mov	r1, sp
1a002ff4:	4620      	mov	r0, r4
1a002ff6:	f000 f9ec 	bl	1a0033d2 <Chip_ADC_SetResolution>
}
1a002ffa:	b002      	add	sp, #8
1a002ffc:	bd10      	pop	{r4, pc}
1a002ffe:	bf00      	nop
1a003000:	400e3000 	.word	0x400e3000
1a003004:	00061a80 	.word	0x00061a80

1a003008 <Board_SPI_Init>:
{
1a003008:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00300a:	4c0b      	ldr	r4, [pc, #44]	; (1a003038 <Board_SPI_Init+0x30>)
1a00300c:	4620      	mov	r0, r4
1a00300e:	f000 fe39 	bl	1a003c84 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003012:	6863      	ldr	r3, [r4, #4]
1a003014:	f023 0304 	bic.w	r3, r3, #4
1a003018:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00301a:	6823      	ldr	r3, [r4, #0]
1a00301c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003020:	f043 0307 	orr.w	r3, r3, #7
1a003024:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003026:	4905      	ldr	r1, [pc, #20]	; (1a00303c <Board_SPI_Init+0x34>)
1a003028:	4620      	mov	r0, r4
1a00302a:	f000 fe0c 	bl	1a003c46 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00302e:	6863      	ldr	r3, [r4, #4]
1a003030:	f043 0302 	orr.w	r3, r3, #2
1a003034:	6063      	str	r3, [r4, #4]
}
1a003036:	bd10      	pop	{r4, pc}
1a003038:	400c5000 	.word	0x400c5000
1a00303c:	000186a0 	.word	0x000186a0

1a003040 <Board_I2C_Init>:
{
1a003040:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a003042:	2000      	movs	r0, #0
1a003044:	f000 feda 	bl	1a003dfc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003048:	4b04      	ldr	r3, [pc, #16]	; (1a00305c <Board_I2C_Init+0x1c>)
1a00304a:	f640 0208 	movw	r2, #2056	; 0x808
1a00304e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003052:	4903      	ldr	r1, [pc, #12]	; (1a003060 <Board_I2C_Init+0x20>)
1a003054:	2000      	movs	r0, #0
1a003056:	f000 fee3 	bl	1a003e20 <Chip_I2C_SetClockRate>
}
1a00305a:	bd08      	pop	{r3, pc}
1a00305c:	40086000 	.word	0x40086000
1a003060:	000f4240 	.word	0x000f4240

1a003064 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003064:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a003066:	4c07      	ldr	r4, [pc, #28]	; (1a003084 <Board_Debug_Init+0x20>)
1a003068:	4620      	mov	r0, r4
1a00306a:	f000 f8b7 	bl	1a0031dc <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00306e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003072:	4620      	mov	r0, r4
1a003074:	f000 f8dc 	bl	1a003230 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a003078:	2303      	movs	r3, #3
1a00307a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00307c:	2301      	movs	r3, #1
1a00307e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a003080:	bd10      	pop	{r4, pc}
1a003082:	bf00      	nop
1a003084:	400c1000 	.word	0x400c1000

1a003088 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a003088:	4b03      	ldr	r3, [pc, #12]	; (1a003098 <Board_UARTPutChar+0x10>)
1a00308a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00308c:	f013 0f20 	tst.w	r3, #32
1a003090:	d0fa      	beq.n	1a003088 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a003092:	4b01      	ldr	r3, [pc, #4]	; (1a003098 <Board_UARTPutChar+0x10>)
1a003094:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a003096:	4770      	bx	lr
1a003098:	400c1000 	.word	0x400c1000

1a00309c <Board_UARTGetChar>:
	return pUART->LSR;
1a00309c:	4b05      	ldr	r3, [pc, #20]	; (1a0030b4 <Board_UARTGetChar+0x18>)
1a00309e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0030a0:	f013 0f01 	tst.w	r3, #1
1a0030a4:	d003      	beq.n	1a0030ae <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0030a6:	4b03      	ldr	r3, [pc, #12]	; (1a0030b4 <Board_UARTGetChar+0x18>)
1a0030a8:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0030aa:	b2c0      	uxtb	r0, r0
1a0030ac:	4770      	bx	lr
    }
    return EOF;
1a0030ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0030b2:	4770      	bx	lr
1a0030b4:	400c1000 	.word	0x400c1000

1a0030b8 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0030b8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0030ba:	f7ff ffd3 	bl	1a003064 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0030be:	4808      	ldr	r0, [pc, #32]	; (1a0030e0 <Board_Init+0x28>)
1a0030c0:	f000 fda1 	bl	1a003c06 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a0030c4:	f7ff ff68 	bl	1a002f98 <Board_GPIO_Init>
   Board_ADC_Init();
1a0030c8:	f7ff ff86 	bl	1a002fd8 <Board_ADC_Init>
   Board_SPI_Init();
1a0030cc:	f7ff ff9c 	bl	1a003008 <Board_SPI_Init>
   Board_I2C_Init();
1a0030d0:	f7ff ffb6 	bl	1a003040 <Board_I2C_Init>

   Board_LED_Init();
1a0030d4:	f7ff ff1e 	bl	1a002f14 <Board_LED_Init>
   Board_TEC_Init();
1a0030d8:	f7ff ff3e 	bl	1a002f58 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a0030dc:	bd08      	pop	{r3, pc}
1a0030de:	bf00      	nop
1a0030e0:	400f4000 	.word	0x400f4000

1a0030e4 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a0030e4:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0030e6:	b2c0      	uxtb	r0, r0
1a0030e8:	f7ff ffce 	bl	1a003088 <Board_UARTPutChar>
}
1a0030ec:	bd08      	pop	{r3, pc}

1a0030ee <__stdio_getchar>:

int __stdio_getchar() {
1a0030ee:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0030f0:	f7ff ffd4 	bl	1a00309c <Board_UARTGetChar>
}
1a0030f4:	bd08      	pop	{r3, pc}

1a0030f6 <__stdio_init>:

void __stdio_init() {
1a0030f6:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0030f8:	f7ff ffb4 	bl	1a003064 <Board_Debug_Init>
1a0030fc:	bd08      	pop	{r3, pc}
1a0030fe:	Address 0x000000001a0030fe is out of bounds.


1a003100 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003100:	2300      	movs	r3, #0
1a003102:	2b1c      	cmp	r3, #28
1a003104:	d812      	bhi.n	1a00312c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a003106:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a003108:	4a09      	ldr	r2, [pc, #36]	; (1a003130 <Board_SetupMuxing+0x30>)
1a00310a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00310e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003112:	784a      	ldrb	r2, [r1, #1]
1a003114:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003116:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00311a:	4906      	ldr	r1, [pc, #24]	; (1a003134 <Board_SetupMuxing+0x34>)
1a00311c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003120:	3301      	adds	r3, #1
1a003122:	2b1c      	cmp	r3, #28
1a003124:	d9f0      	bls.n	1a003108 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a003126:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00312a:	4770      	bx	lr
1a00312c:	4770      	bx	lr
1a00312e:	bf00      	nop
1a003130:	1a005334 	.word	0x1a005334
1a003134:	40086000 	.word	0x40086000

1a003138 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a003138:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00313a:	4a17      	ldr	r2, [pc, #92]	; (1a003198 <Board_SetupClocking+0x60>)
1a00313c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003144:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003148:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00314c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003154:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003158:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00315c:	2201      	movs	r2, #1
1a00315e:	490f      	ldr	r1, [pc, #60]	; (1a00319c <Board_SetupClocking+0x64>)
1a003160:	2006      	movs	r0, #6
1a003162:	f000 fc0f 	bl	1a003984 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003166:	2400      	movs	r4, #0
1a003168:	b14c      	cbz	r4, 1a00317e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00316a:	4b0b      	ldr	r3, [pc, #44]	; (1a003198 <Board_SetupClocking+0x60>)
1a00316c:	685a      	ldr	r2, [r3, #4]
1a00316e:	f022 020c 	bic.w	r2, r2, #12
1a003172:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003174:	685a      	ldr	r2, [r3, #4]
1a003176:	f042 0203 	orr.w	r2, r2, #3
1a00317a:	605a      	str	r2, [r3, #4]
}
1a00317c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00317e:	4808      	ldr	r0, [pc, #32]	; (1a0031a0 <Board_SetupClocking+0x68>)
1a003180:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003184:	2301      	movs	r3, #1
1a003186:	788a      	ldrb	r2, [r1, #2]
1a003188:	7849      	ldrb	r1, [r1, #1]
1a00318a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00318e:	f000 fb55 	bl	1a00383c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003192:	3401      	adds	r4, #1
1a003194:	e7e8      	b.n	1a003168 <Board_SetupClocking+0x30>
1a003196:	bf00      	nop
1a003198:	40043000 	.word	0x40043000
1a00319c:	0c28cb00 	.word	0x0c28cb00
1a0031a0:	1a005330 	.word	0x1a005330

1a0031a4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0031a4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0031a6:	f7ff ffab 	bl	1a003100 <Board_SetupMuxing>
    Board_SetupClocking();
1a0031aa:	f7ff ffc5 	bl	1a003138 <Board_SetupClocking>
}
1a0031ae:	bd08      	pop	{r3, pc}

1a0031b0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0031b0:	4b09      	ldr	r3, [pc, #36]	; (1a0031d8 <Chip_UART_GetIndex+0x28>)
1a0031b2:	4298      	cmp	r0, r3
1a0031b4:	d009      	beq.n	1a0031ca <Chip_UART_GetIndex+0x1a>
1a0031b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0031ba:	4298      	cmp	r0, r3
1a0031bc:	d007      	beq.n	1a0031ce <Chip_UART_GetIndex+0x1e>
1a0031be:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0031c2:	4298      	cmp	r0, r3
1a0031c4:	d005      	beq.n	1a0031d2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0031c6:	2000      	movs	r0, #0
1a0031c8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0031ca:	2002      	movs	r0, #2
1a0031cc:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0031ce:	2003      	movs	r0, #3
1a0031d0:	4770      	bx	lr
			return 1;
1a0031d2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0031d4:	4770      	bx	lr
1a0031d6:	bf00      	nop
1a0031d8:	400c1000 	.word	0x400c1000

1a0031dc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0031dc:	b530      	push	{r4, r5, lr}
1a0031de:	b083      	sub	sp, #12
1a0031e0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0031e2:	f7ff ffe5 	bl	1a0031b0 <Chip_UART_GetIndex>
1a0031e6:	2301      	movs	r3, #1
1a0031e8:	461a      	mov	r2, r3
1a0031ea:	4619      	mov	r1, r3
1a0031ec:	4d0e      	ldr	r5, [pc, #56]	; (1a003228 <Chip_UART_Init+0x4c>)
1a0031ee:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0031f2:	f000 fb69 	bl	1a0038c8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0031f6:	2307      	movs	r3, #7
1a0031f8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0031fa:	2300      	movs	r3, #0
1a0031fc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0031fe:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003200:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003202:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003204:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003206:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003208:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00320a:	4b08      	ldr	r3, [pc, #32]	; (1a00322c <Chip_UART_Init+0x50>)
1a00320c:	429c      	cmp	r4, r3
1a00320e:	d006      	beq.n	1a00321e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003210:	2303      	movs	r3, #3
1a003212:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003214:	2310      	movs	r3, #16
1a003216:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003218:	9b01      	ldr	r3, [sp, #4]
}
1a00321a:	b003      	add	sp, #12
1a00321c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00321e:	2300      	movs	r3, #0
1a003220:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003222:	69a3      	ldr	r3, [r4, #24]
1a003224:	9301      	str	r3, [sp, #4]
1a003226:	e7f3      	b.n	1a003210 <Chip_UART_Init+0x34>
1a003228:	1a0053b0 	.word	0x1a0053b0
1a00322c:	40082000 	.word	0x40082000

1a003230 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003234:	b083      	sub	sp, #12
1a003236:	4683      	mov	fp, r0
1a003238:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00323a:	f7ff ffb9 	bl	1a0031b0 <Chip_UART_GetIndex>
1a00323e:	4b35      	ldr	r3, [pc, #212]	; (1a003314 <Chip_UART_SetBaudFDR+0xe4>)
1a003240:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003244:	f000 fb78 	bl	1a003938 <Chip_Clock_GetRate>
1a003248:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00324a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00324e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003250:	2300      	movs	r3, #0
1a003252:	9301      	str	r3, [sp, #4]
1a003254:	46a2      	mov	sl, r4
1a003256:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003258:	e02a      	b.n	1a0032b0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00325a:	4242      	negs	r2, r0
				div ++;
1a00325c:	1c4b      	adds	r3, r1, #1
1a00325e:	e017      	b.n	1a003290 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003260:	b30a      	cbz	r2, 1a0032a6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003262:	4617      	mov	r7, r2
			sd = d;
1a003264:	9501      	str	r5, [sp, #4]
			sm = m;
1a003266:	46a2      	mov	sl, r4
			sdiv = div;
1a003268:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00326a:	3501      	adds	r5, #1
1a00326c:	42ac      	cmp	r4, r5
1a00326e:	d91e      	bls.n	1a0032ae <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003270:	0933      	lsrs	r3, r6, #4
1a003272:	0730      	lsls	r0, r6, #28
1a003274:	fba4 0100 	umull	r0, r1, r4, r0
1a003278:	fb04 1103 	mla	r1, r4, r3, r1
1a00327c:	1962      	adds	r2, r4, r5
1a00327e:	fb08 f202 	mul.w	r2, r8, r2
1a003282:	2300      	movs	r3, #0
1a003284:	f001 fa10 	bl	1a0046a8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003288:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00328a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00328c:	2800      	cmp	r0, #0
1a00328e:	dbe4      	blt.n	1a00325a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003290:	4297      	cmp	r7, r2
1a003292:	d3ea      	bcc.n	1a00326a <Chip_UART_SetBaudFDR+0x3a>
1a003294:	2b00      	cmp	r3, #0
1a003296:	d0e8      	beq.n	1a00326a <Chip_UART_SetBaudFDR+0x3a>
1a003298:	0c19      	lsrs	r1, r3, #16
1a00329a:	d1e6      	bne.n	1a00326a <Chip_UART_SetBaudFDR+0x3a>
1a00329c:	2b02      	cmp	r3, #2
1a00329e:	d8df      	bhi.n	1a003260 <Chip_UART_SetBaudFDR+0x30>
1a0032a0:	2d00      	cmp	r5, #0
1a0032a2:	d0dd      	beq.n	1a003260 <Chip_UART_SetBaudFDR+0x30>
1a0032a4:	e7e1      	b.n	1a00326a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0032a6:	4617      	mov	r7, r2
			sd = d;
1a0032a8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0032aa:	46a2      	mov	sl, r4
			sdiv = div;
1a0032ac:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0032ae:	3401      	adds	r4, #1
1a0032b0:	b11f      	cbz	r7, 1a0032ba <Chip_UART_SetBaudFDR+0x8a>
1a0032b2:	2c0f      	cmp	r4, #15
1a0032b4:	d801      	bhi.n	1a0032ba <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0032b6:	2500      	movs	r5, #0
1a0032b8:	e7d8      	b.n	1a00326c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0032ba:	f1b9 0f00 	cmp.w	r9, #0
1a0032be:	d024      	beq.n	1a00330a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0032c0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0032c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0032c8:	f8cb 300c 	str.w	r3, [fp, #12]
1a0032cc:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0032d0:	f8cb 3000 	str.w	r3, [fp]
1a0032d4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0032d8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0032dc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0032e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0032e4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0032e8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0032ec:	b2db      	uxtb	r3, r3
1a0032ee:	9901      	ldr	r1, [sp, #4]
1a0032f0:	f001 020f 	and.w	r2, r1, #15
1a0032f4:	4313      	orrs	r3, r2
1a0032f6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0032fa:	0933      	lsrs	r3, r6, #4
1a0032fc:	fb0a f303 	mul.w	r3, sl, r3
1a003300:	448a      	add	sl, r1
1a003302:	fb09 f90a 	mul.w	r9, r9, sl
1a003306:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00330a:	4648      	mov	r0, r9
1a00330c:	b003      	add	sp, #12
1a00330e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003312:	bf00      	nop
1a003314:	1a0053a8 	.word	0x1a0053a8

1a003318 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003318:	4b03      	ldr	r3, [pc, #12]	; (1a003328 <Chip_ADC_GetClockIndex+0x10>)
1a00331a:	4298      	cmp	r0, r3
1a00331c:	d001      	beq.n	1a003322 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00331e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003320:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003322:	2004      	movs	r0, #4
1a003324:	4770      	bx	lr
1a003326:	bf00      	nop
1a003328:	400e4000 	.word	0x400e4000

1a00332c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00332c:	b570      	push	{r4, r5, r6, lr}
1a00332e:	460d      	mov	r5, r1
1a003330:	4614      	mov	r4, r2
1a003332:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003334:	f7ff fff0 	bl	1a003318 <Chip_ADC_GetClockIndex>
1a003338:	f000 fafe 	bl	1a003938 <Chip_Clock_GetRate>
	if (burstMode) {
1a00333c:	b965      	cbnz	r5, 1a003358 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00333e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003342:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003346:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00334a:	0064      	lsls	r4, r4, #1
1a00334c:	fbb0 f0f4 	udiv	r0, r0, r4
1a003350:	b2c0      	uxtb	r0, r0
1a003352:	3801      	subs	r0, #1
	return div;
}
1a003354:	b2c0      	uxtb	r0, r0
1a003356:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003358:	fb04 f406 	mul.w	r4, r4, r6
1a00335c:	e7f3      	b.n	1a003346 <getClkDiv+0x1a>
1a00335e:	Address 0x000000001a00335e is out of bounds.


1a003360 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003360:	b538      	push	{r3, r4, r5, lr}
1a003362:	4605      	mov	r5, r0
1a003364:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003366:	f7ff ffd7 	bl	1a003318 <Chip_ADC_GetClockIndex>
1a00336a:	2301      	movs	r3, #1
1a00336c:	461a      	mov	r2, r3
1a00336e:	4619      	mov	r1, r3
1a003370:	f000 faaa 	bl	1a0038c8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003374:	2100      	movs	r1, #0
1a003376:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003378:	4a08      	ldr	r2, [pc, #32]	; (1a00339c <Chip_ADC_Init+0x3c>)
1a00337a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00337c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00337e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003380:	230b      	movs	r3, #11
1a003382:	4628      	mov	r0, r5
1a003384:	f7ff ffd2 	bl	1a00332c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003388:	0200      	lsls	r0, r0, #8
1a00338a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00338e:	7920      	ldrb	r0, [r4, #4]
1a003390:	0440      	lsls	r0, r0, #17
1a003392:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003396:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003398:	6028      	str	r0, [r5, #0]
}
1a00339a:	bd38      	pop	{r3, r4, r5, pc}
1a00339c:	00061a80 	.word	0x00061a80

1a0033a0 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0033a0:	b570      	push	{r4, r5, r6, lr}
1a0033a2:	4605      	mov	r5, r0
1a0033a4:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0033a6:	6804      	ldr	r4, [r0, #0]
1a0033a8:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0033ac:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0033b0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0033b2:	790b      	ldrb	r3, [r1, #4]
1a0033b4:	f1c3 030b 	rsb	r3, r3, #11
1a0033b8:	b2db      	uxtb	r3, r3
1a0033ba:	7949      	ldrb	r1, [r1, #5]
1a0033bc:	f7ff ffb6 	bl	1a00332c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0033c0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0033c4:	7930      	ldrb	r0, [r6, #4]
1a0033c6:	0440      	lsls	r0, r0, #17
1a0033c8:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0033cc:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0033ce:	6028      	str	r0, [r5, #0]
}
1a0033d0:	bd70      	pop	{r4, r5, r6, pc}

1a0033d2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0033d2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0033d4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0033d6:	680a      	ldr	r2, [r1, #0]
1a0033d8:	f7ff ffe2 	bl	1a0033a0 <Chip_ADC_SetSampleRate>
}
1a0033dc:	bd08      	pop	{r3, pc}
1a0033de:	Address 0x000000001a0033de is out of bounds.


1a0033e0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0033e0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0033e2:	2069      	movs	r0, #105	; 0x69
1a0033e4:	f000 faa8 	bl	1a003938 <Chip_Clock_GetRate>
1a0033e8:	4b01      	ldr	r3, [pc, #4]	; (1a0033f0 <SystemCoreClockUpdate+0x10>)
1a0033ea:	6018      	str	r0, [r3, #0]
}
1a0033ec:	bd08      	pop	{r3, pc}
1a0033ee:	bf00      	nop
1a0033f0:	10002d58 	.word	0x10002d58

1a0033f4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0033f4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0033f6:	680b      	ldr	r3, [r1, #0]
1a0033f8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0033fc:	d002      	beq.n	1a003404 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0033fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003402:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003404:	4607      	mov	r7, r0
1a003406:	2501      	movs	r5, #1
1a003408:	e03b      	b.n	1a003482 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00340a:	694b      	ldr	r3, [r1, #20]
1a00340c:	fb03 f302 	mul.w	r3, r3, r2
1a003410:	fbb3 f3f5 	udiv	r3, r3, r5
1a003414:	e014      	b.n	1a003440 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003416:	461c      	mov	r4, r3
1a003418:	e020      	b.n	1a00345c <pll_calc_divs+0x68>
		return -val;
1a00341a:	f1cc 0c00 	rsb	ip, ip, #0
1a00341e:	e020      	b.n	1a003462 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a003420:	3201      	adds	r2, #1
1a003422:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a003426:	dc26      	bgt.n	1a003476 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a003428:	680c      	ldr	r4, [r1, #0]
1a00342a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00342e:	d0ec      	beq.n	1a00340a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003430:	1c73      	adds	r3, r6, #1
1a003432:	fa02 fc03 	lsl.w	ip, r2, r3
1a003436:	694b      	ldr	r3, [r1, #20]
1a003438:	fb03 f30c 	mul.w	r3, r3, ip
1a00343c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003440:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a003490 <pll_calc_divs+0x9c>
1a003444:	4563      	cmp	r3, ip
1a003446:	d9eb      	bls.n	1a003420 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003448:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003494 <pll_calc_divs+0xa0>
1a00344c:	4563      	cmp	r3, ip
1a00344e:	d812      	bhi.n	1a003476 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a003450:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003454:	d1df      	bne.n	1a003416 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a003456:	1c74      	adds	r4, r6, #1
1a003458:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a00345c:	ebb0 0c04 	subs.w	ip, r0, r4
1a003460:	d4db      	bmi.n	1a00341a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a003462:	4567      	cmp	r7, ip
1a003464:	d9dc      	bls.n	1a003420 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a003466:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003468:	1c77      	adds	r7, r6, #1
1a00346a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00346c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00346e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a003470:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a003472:	4667      	mov	r7, ip
1a003474:	e7d4      	b.n	1a003420 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a003476:	3601      	adds	r6, #1
1a003478:	2e03      	cmp	r6, #3
1a00347a:	dc01      	bgt.n	1a003480 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a00347c:	2201      	movs	r2, #1
1a00347e:	e7d0      	b.n	1a003422 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a003480:	3501      	adds	r5, #1
1a003482:	2d04      	cmp	r5, #4
1a003484:	dc01      	bgt.n	1a00348a <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a003486:	2600      	movs	r6, #0
1a003488:	e7f6      	b.n	1a003478 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a00348a:	bcf0      	pop	{r4, r5, r6, r7}
1a00348c:	4770      	bx	lr
1a00348e:	bf00      	nop
1a003490:	094c5eff 	.word	0x094c5eff
1a003494:	1312d000 	.word	0x1312d000

1a003498 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003498:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00349a:	b099      	sub	sp, #100	; 0x64
1a00349c:	4605      	mov	r5, r0
1a00349e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0034a0:	225c      	movs	r2, #92	; 0x5c
1a0034a2:	2100      	movs	r1, #0
1a0034a4:	a801      	add	r0, sp, #4
1a0034a6:	f001 fc28 	bl	1a004cfa <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0034aa:	2380      	movs	r3, #128	; 0x80
1a0034ac:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0034ae:	6963      	ldr	r3, [r4, #20]
1a0034b0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0034b2:	7923      	ldrb	r3, [r4, #4]
1a0034b4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0034b8:	4669      	mov	r1, sp
1a0034ba:	4628      	mov	r0, r5
1a0034bc:	f7ff ff9a 	bl	1a0033f4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0034c0:	9b06      	ldr	r3, [sp, #24]
1a0034c2:	42ab      	cmp	r3, r5
1a0034c4:	d027      	beq.n	1a003516 <pll_get_frac+0x7e>
	if (val < 0)
1a0034c6:	1aeb      	subs	r3, r5, r3
1a0034c8:	d42e      	bmi.n	1a003528 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0034ca:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0034cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0034ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0034d2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0034d4:	6963      	ldr	r3, [r4, #20]
1a0034d6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0034d8:	7923      	ldrb	r3, [r4, #4]
1a0034da:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0034de:	a910      	add	r1, sp, #64	; 0x40
1a0034e0:	4628      	mov	r0, r5
1a0034e2:	f7ff ff87 	bl	1a0033f4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0034e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0034e8:	42ab      	cmp	r3, r5
1a0034ea:	d01f      	beq.n	1a00352c <pll_get_frac+0x94>
	if (val < 0)
1a0034ec:	1aeb      	subs	r3, r5, r3
1a0034ee:	d425      	bmi.n	1a00353c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0034f0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0034f2:	4b2b      	ldr	r3, [pc, #172]	; (1a0035a0 <pll_get_frac+0x108>)
1a0034f4:	429d      	cmp	r5, r3
1a0034f6:	d923      	bls.n	1a003540 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0034f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0034fa:	1aed      	subs	r5, r5, r3
1a0034fc:	d433      	bmi.n	1a003566 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0034fe:	42ae      	cmp	r6, r5
1a003500:	dc3b      	bgt.n	1a00357a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003502:	42be      	cmp	r6, r7
1a003504:	dc31      	bgt.n	1a00356a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003506:	466d      	mov	r5, sp
1a003508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00350a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00350c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003514:	e006      	b.n	1a003524 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003516:	466d      	mov	r5, sp
1a003518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00351a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00351c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003524:	b019      	add	sp, #100	; 0x64
1a003526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003528:	425b      	negs	r3, r3
1a00352a:	e7ce      	b.n	1a0034ca <pll_get_frac+0x32>
		*ppll = pll[2];
1a00352c:	ad10      	add	r5, sp, #64	; 0x40
1a00352e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003532:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003536:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00353a:	e7f3      	b.n	1a003524 <pll_get_frac+0x8c>
		return -val;
1a00353c:	425b      	negs	r3, r3
1a00353e:	e7d7      	b.n	1a0034f0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003540:	2340      	movs	r3, #64	; 0x40
1a003542:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003544:	6963      	ldr	r3, [r4, #20]
1a003546:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003548:	a908      	add	r1, sp, #32
1a00354a:	4628      	mov	r0, r5
1a00354c:	f7ff ff52 	bl	1a0033f4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003552:	42ab      	cmp	r3, r5
1a003554:	d1d0      	bne.n	1a0034f8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003556:	ad08      	add	r5, sp, #32
1a003558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00355a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00355c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003564:	e7de      	b.n	1a003524 <pll_get_frac+0x8c>
		return -val;
1a003566:	426d      	negs	r5, r5
1a003568:	e7c9      	b.n	1a0034fe <pll_get_frac+0x66>
			*ppll = pll[2];
1a00356a:	ad10      	add	r5, sp, #64	; 0x40
1a00356c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00356e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003570:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003578:	e7d4      	b.n	1a003524 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00357a:	42af      	cmp	r7, r5
1a00357c:	db07      	blt.n	1a00358e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00357e:	ad08      	add	r5, sp, #32
1a003580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00358c:	e7ca      	b.n	1a003524 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00358e:	ad10      	add	r5, sp, #64	; 0x40
1a003590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003594:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00359c:	e7c2      	b.n	1a003524 <pll_get_frac+0x8c>
1a00359e:	bf00      	nop
1a0035a0:	068e7780 	.word	0x068e7780

1a0035a4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0035a4:	b430      	push	{r4, r5}
1a0035a6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0035a8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0035aa:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0035ac:	e000      	b.n	1a0035b0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0035ae:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0035b0:	281c      	cmp	r0, #28
1a0035b2:	d118      	bne.n	1a0035e6 <Chip_Clock_FindBaseClock+0x42>
1a0035b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0035b8:	0051      	lsls	r1, r2, #1
1a0035ba:	4a0c      	ldr	r2, [pc, #48]	; (1a0035ec <Chip_Clock_FindBaseClock+0x48>)
1a0035bc:	440a      	add	r2, r1
1a0035be:	7914      	ldrb	r4, [r2, #4]
1a0035c0:	4284      	cmp	r4, r0
1a0035c2:	d010      	beq.n	1a0035e6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0035c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0035c8:	004a      	lsls	r2, r1, #1
1a0035ca:	4908      	ldr	r1, [pc, #32]	; (1a0035ec <Chip_Clock_FindBaseClock+0x48>)
1a0035cc:	5a8a      	ldrh	r2, [r1, r2]
1a0035ce:	42aa      	cmp	r2, r5
1a0035d0:	d8ed      	bhi.n	1a0035ae <Chip_Clock_FindBaseClock+0xa>
1a0035d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0035d6:	0051      	lsls	r1, r2, #1
1a0035d8:	4a04      	ldr	r2, [pc, #16]	; (1a0035ec <Chip_Clock_FindBaseClock+0x48>)
1a0035da:	440a      	add	r2, r1
1a0035dc:	8852      	ldrh	r2, [r2, #2]
1a0035de:	42aa      	cmp	r2, r5
1a0035e0:	d3e5      	bcc.n	1a0035ae <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0035e2:	4620      	mov	r0, r4
1a0035e4:	e7e4      	b.n	1a0035b0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0035e6:	bc30      	pop	{r4, r5}
1a0035e8:	4770      	bx	lr
1a0035ea:	bf00      	nop
1a0035ec:	1a0053c4 	.word	0x1a0053c4

1a0035f0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0035f0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0035f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0035f6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0035f8:	4a0d      	ldr	r2, [pc, #52]	; (1a003630 <Chip_Clock_EnableCrystal+0x40>)
1a0035fa:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0035fc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003600:	6992      	ldr	r2, [r2, #24]
1a003602:	428a      	cmp	r2, r1
1a003604:	d001      	beq.n	1a00360a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003606:	4a0a      	ldr	r2, [pc, #40]	; (1a003630 <Chip_Clock_EnableCrystal+0x40>)
1a003608:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00360a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00360e:	4a09      	ldr	r2, [pc, #36]	; (1a003634 <Chip_Clock_EnableCrystal+0x44>)
1a003610:	6811      	ldr	r1, [r2, #0]
1a003612:	4a09      	ldr	r2, [pc, #36]	; (1a003638 <Chip_Clock_EnableCrystal+0x48>)
1a003614:	4291      	cmp	r1, r2
1a003616:	d901      	bls.n	1a00361c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003618:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00361c:	4a04      	ldr	r2, [pc, #16]	; (1a003630 <Chip_Clock_EnableCrystal+0x40>)
1a00361e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003620:	9b01      	ldr	r3, [sp, #4]
1a003622:	1e5a      	subs	r2, r3, #1
1a003624:	9201      	str	r2, [sp, #4]
1a003626:	2b00      	cmp	r3, #0
1a003628:	d1fa      	bne.n	1a003620 <Chip_Clock_EnableCrystal+0x30>
}
1a00362a:	b002      	add	sp, #8
1a00362c:	4770      	bx	lr
1a00362e:	bf00      	nop
1a003630:	40050000 	.word	0x40050000
1a003634:	1a00532c 	.word	0x1a00532c
1a003638:	01312cff 	.word	0x01312cff

1a00363c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00363c:	3012      	adds	r0, #18
1a00363e:	4b05      	ldr	r3, [pc, #20]	; (1a003654 <Chip_Clock_GetDividerSource+0x18>)
1a003640:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003644:	f010 0f01 	tst.w	r0, #1
1a003648:	d102      	bne.n	1a003650 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00364a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00364e:	4770      	bx	lr
		return CLKINPUT_PD;
1a003650:	2011      	movs	r0, #17
}
1a003652:	4770      	bx	lr
1a003654:	40050000 	.word	0x40050000

1a003658 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003658:	f100 0212 	add.w	r2, r0, #18
1a00365c:	4b03      	ldr	r3, [pc, #12]	; (1a00366c <Chip_Clock_GetDividerDivisor+0x14>)
1a00365e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003662:	4b03      	ldr	r3, [pc, #12]	; (1a003670 <Chip_Clock_GetDividerDivisor+0x18>)
1a003664:	5c18      	ldrb	r0, [r3, r0]
}
1a003666:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00366a:	4770      	bx	lr
1a00366c:	40050000 	.word	0x40050000
1a003670:	1a0053bc 	.word	0x1a0053bc

1a003674 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003674:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003676:	2810      	cmp	r0, #16
1a003678:	d80a      	bhi.n	1a003690 <Chip_Clock_GetClockInputHz+0x1c>
1a00367a:	e8df f000 	tbb	[pc, r0]
1a00367e:	0b42      	.short	0x0b42
1a003680:	091f160d 	.word	0x091f160d
1a003684:	2b282522 	.word	0x2b282522
1a003688:	322e0909 	.word	0x322e0909
1a00368c:	3a36      	.short	0x3a36
1a00368e:	3e          	.byte	0x3e
1a00368f:	00          	.byte	0x00
	uint32_t rate = 0;
1a003690:	2000      	movs	r0, #0
1a003692:	e038      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003694:	481e      	ldr	r0, [pc, #120]	; (1a003710 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003696:	e036      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003698:	4b1e      	ldr	r3, [pc, #120]	; (1a003714 <Chip_Clock_GetClockInputHz+0xa0>)
1a00369a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00369e:	f003 0307 	and.w	r3, r3, #7
1a0036a2:	2b04      	cmp	r3, #4
1a0036a4:	d130      	bne.n	1a003708 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0036a6:	2000      	movs	r0, #0
1a0036a8:	e02d      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0036aa:	4b1a      	ldr	r3, [pc, #104]	; (1a003714 <Chip_Clock_GetClockInputHz+0xa0>)
1a0036ac:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0036b0:	f003 0307 	and.w	r3, r3, #7
1a0036b4:	2b04      	cmp	r3, #4
1a0036b6:	d029      	beq.n	1a00370c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0036b8:	4817      	ldr	r0, [pc, #92]	; (1a003718 <Chip_Clock_GetClockInputHz+0xa4>)
1a0036ba:	e024      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0036bc:	4b17      	ldr	r3, [pc, #92]	; (1a00371c <Chip_Clock_GetClockInputHz+0xa8>)
1a0036be:	6818      	ldr	r0, [r3, #0]
		break;
1a0036c0:	e021      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0036c2:	4b17      	ldr	r3, [pc, #92]	; (1a003720 <Chip_Clock_GetClockInputHz+0xac>)
1a0036c4:	6818      	ldr	r0, [r3, #0]
		break;
1a0036c6:	e01e      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0036c8:	4b16      	ldr	r3, [pc, #88]	; (1a003724 <Chip_Clock_GetClockInputHz+0xb0>)
1a0036ca:	6818      	ldr	r0, [r3, #0]
		break;
1a0036cc:	e01b      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0036ce:	4b15      	ldr	r3, [pc, #84]	; (1a003724 <Chip_Clock_GetClockInputHz+0xb0>)
1a0036d0:	6858      	ldr	r0, [r3, #4]
		break;
1a0036d2:	e018      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0036d4:	f000 f86a 	bl	1a0037ac <Chip_Clock_GetMainPLLHz>
		break;
1a0036d8:	e015      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0036da:	2100      	movs	r1, #0
1a0036dc:	f000 f89c 	bl	1a003818 <Chip_Clock_GetDivRate>
		break;
1a0036e0:	e011      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0036e2:	2101      	movs	r1, #1
1a0036e4:	f000 f898 	bl	1a003818 <Chip_Clock_GetDivRate>
		break;
1a0036e8:	e00d      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0036ea:	2102      	movs	r1, #2
1a0036ec:	f000 f894 	bl	1a003818 <Chip_Clock_GetDivRate>
		break;
1a0036f0:	e009      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0036f2:	2103      	movs	r1, #3
1a0036f4:	f000 f890 	bl	1a003818 <Chip_Clock_GetDivRate>
		break;
1a0036f8:	e005      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0036fa:	2104      	movs	r1, #4
1a0036fc:	f000 f88c 	bl	1a003818 <Chip_Clock_GetDivRate>
		break;
1a003700:	e001      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a003702:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003706:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003708:	4803      	ldr	r0, [pc, #12]	; (1a003718 <Chip_Clock_GetClockInputHz+0xa4>)
1a00370a:	e7fc      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a00370c:	4806      	ldr	r0, [pc, #24]	; (1a003728 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00370e:	e7fa      	b.n	1a003706 <Chip_Clock_GetClockInputHz+0x92>
1a003710:	00b71b00 	.word	0x00b71b00
1a003714:	40043000 	.word	0x40043000
1a003718:	017d7840 	.word	0x017d7840
1a00371c:	1a005300 	.word	0x1a005300
1a003720:	1a00532c 	.word	0x1a00532c
1a003724:	10002b4c 	.word	0x10002b4c
1a003728:	02faf080 	.word	0x02faf080

1a00372c <Chip_Clock_CalcMainPLLValue>:
{
1a00372c:	b538      	push	{r3, r4, r5, lr}
1a00372e:	4605      	mov	r5, r0
1a003730:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003732:	7908      	ldrb	r0, [r1, #4]
1a003734:	f7ff ff9e 	bl	1a003674 <Chip_Clock_GetClockInputHz>
1a003738:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00373a:	4b19      	ldr	r3, [pc, #100]	; (1a0037a0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00373c:	442b      	add	r3, r5
1a00373e:	4a19      	ldr	r2, [pc, #100]	; (1a0037a4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003740:	4293      	cmp	r3, r2
1a003742:	d821      	bhi.n	1a003788 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003744:	b318      	cbz	r0, 1a00378e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003746:	2380      	movs	r3, #128	; 0x80
1a003748:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00374a:	2300      	movs	r3, #0
1a00374c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00374e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003750:	fbb5 f3f0 	udiv	r3, r5, r0
1a003754:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003756:	4a14      	ldr	r2, [pc, #80]	; (1a0037a8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003758:	4295      	cmp	r5, r2
1a00375a:	d903      	bls.n	1a003764 <Chip_Clock_CalcMainPLLValue+0x38>
1a00375c:	fb03 f000 	mul.w	r0, r3, r0
1a003760:	42a8      	cmp	r0, r5
1a003762:	d007      	beq.n	1a003774 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003764:	4621      	mov	r1, r4
1a003766:	4628      	mov	r0, r5
1a003768:	f7ff fe96 	bl	1a003498 <pll_get_frac>
		if (!ppll->nsel) {
1a00376c:	68a3      	ldr	r3, [r4, #8]
1a00376e:	b18b      	cbz	r3, 1a003794 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003770:	3b01      	subs	r3, #1
1a003772:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003774:	6923      	ldr	r3, [r4, #16]
1a003776:	b183      	cbz	r3, 1a00379a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003778:	68e2      	ldr	r2, [r4, #12]
1a00377a:	b10a      	cbz	r2, 1a003780 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00377c:	3a01      	subs	r2, #1
1a00377e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003780:	3b01      	subs	r3, #1
1a003782:	6123      	str	r3, [r4, #16]
	return 0;
1a003784:	2000      	movs	r0, #0
}
1a003786:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00378c:	e7fb      	b.n	1a003786 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00378e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003792:	e7f8      	b.n	1a003786 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003798:	e7f5      	b.n	1a003786 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00379a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00379e:	e7f2      	b.n	1a003786 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0037a0:	ff6b3a10 	.word	0xff6b3a10
1a0037a4:	0b940510 	.word	0x0b940510
1a0037a8:	094c5eff 	.word	0x094c5eff

1a0037ac <Chip_Clock_GetMainPLLHz>:
{
1a0037ac:	b530      	push	{r4, r5, lr}
1a0037ae:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0037b0:	4d17      	ldr	r5, [pc, #92]	; (1a003810 <Chip_Clock_GetMainPLLHz+0x64>)
1a0037b2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0037b4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0037b8:	f7ff ff5c 	bl	1a003674 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0037bc:	4b15      	ldr	r3, [pc, #84]	; (1a003814 <Chip_Clock_GetMainPLLHz+0x68>)
1a0037be:	681b      	ldr	r3, [r3, #0]
1a0037c0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0037c2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0037c4:	f013 0f01 	tst.w	r3, #1
1a0037c8:	d01f      	beq.n	1a00380a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0037ca:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0037ce:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0037d2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0037d6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0037da:	3301      	adds	r3, #1
	n = nsel + 1;
1a0037dc:	3201      	adds	r2, #1
	p = ptab[psel];
1a0037de:	f10d 0c08 	add.w	ip, sp, #8
1a0037e2:	4461      	add	r1, ip
1a0037e4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0037e8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0037ec:	d108      	bne.n	1a003800 <Chip_Clock_GetMainPLLHz+0x54>
1a0037ee:	b93d      	cbnz	r5, 1a003800 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0037f0:	0049      	lsls	r1, r1, #1
1a0037f2:	fbb3 f3f1 	udiv	r3, r3, r1
1a0037f6:	fbb0 f0f2 	udiv	r0, r0, r2
1a0037fa:	fb00 f003 	mul.w	r0, r0, r3
1a0037fe:	e005      	b.n	1a00380c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003800:	fbb0 f0f2 	udiv	r0, r0, r2
1a003804:	fb03 f000 	mul.w	r0, r3, r0
1a003808:	e000      	b.n	1a00380c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a00380a:	2000      	movs	r0, #0
}
1a00380c:	b003      	add	sp, #12
1a00380e:	bd30      	pop	{r4, r5, pc}
1a003810:	40050000 	.word	0x40050000
1a003814:	1a0053b8 	.word	0x1a0053b8

1a003818 <Chip_Clock_GetDivRate>:
{
1a003818:	b538      	push	{r3, r4, r5, lr}
1a00381a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00381c:	4608      	mov	r0, r1
1a00381e:	f7ff ff0d 	bl	1a00363c <Chip_Clock_GetDividerSource>
1a003822:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003824:	4620      	mov	r0, r4
1a003826:	f7ff ff17 	bl	1a003658 <Chip_Clock_GetDividerDivisor>
1a00382a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00382c:	4628      	mov	r0, r5
1a00382e:	f7ff ff21 	bl	1a003674 <Chip_Clock_GetClockInputHz>
1a003832:	3401      	adds	r4, #1
}
1a003834:	fbb0 f0f4 	udiv	r0, r0, r4
1a003838:	bd38      	pop	{r3, r4, r5, pc}
1a00383a:	Address 0x000000001a00383a is out of bounds.


1a00383c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00383c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00383e:	f100 0416 	add.w	r4, r0, #22
1a003842:	00a4      	lsls	r4, r4, #2
1a003844:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003848:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00384c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00384e:	281b      	cmp	r0, #27
1a003850:	d813      	bhi.n	1a00387a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003852:	2911      	cmp	r1, #17
1a003854:	d01a      	beq.n	1a00388c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003856:	4d0e      	ldr	r5, [pc, #56]	; (1a003890 <Chip_Clock_SetBaseClock+0x54>)
1a003858:	4025      	ands	r5, r4

			if (autoblocken) {
1a00385a:	b10a      	cbz	r2, 1a003860 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00385c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003860:	b10b      	cbz	r3, 1a003866 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003862:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003866:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00386a:	3016      	adds	r0, #22
1a00386c:	0080      	lsls	r0, r0, #2
1a00386e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003872:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003876:	6045      	str	r5, [r0, #4]
1a003878:	e008      	b.n	1a00388c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00387a:	f044 0401 	orr.w	r4, r4, #1
1a00387e:	3016      	adds	r0, #22
1a003880:	0080      	lsls	r0, r0, #2
1a003882:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003886:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00388a:	6044      	str	r4, [r0, #4]
	}
}
1a00388c:	bc30      	pop	{r4, r5}
1a00388e:	4770      	bx	lr
1a003890:	e0fff7fe 	.word	0xe0fff7fe

1a003894 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003894:	281b      	cmp	r0, #27
1a003896:	d80c      	bhi.n	1a0038b2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003898:	3016      	adds	r0, #22
1a00389a:	0080      	lsls	r0, r0, #2
1a00389c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0038a0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0038a4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0038a6:	f010 0f01 	tst.w	r0, #1
1a0038aa:	d104      	bne.n	1a0038b6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0038ac:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0038b0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0038b2:	2011      	movs	r0, #17
1a0038b4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0038b6:	2011      	movs	r0, #17
}
1a0038b8:	4770      	bx	lr

1a0038ba <Chip_Clock_GetBaseClocktHz>:
{
1a0038ba:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0038bc:	f7ff ffea 	bl	1a003894 <Chip_Clock_GetBaseClock>
1a0038c0:	f7ff fed8 	bl	1a003674 <Chip_Clock_GetClockInputHz>
}
1a0038c4:	bd08      	pop	{r3, pc}
1a0038c6:	Address 0x000000001a0038c6 is out of bounds.


1a0038c8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0038c8:	b969      	cbnz	r1, 1a0038e6 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0038ca:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0038cc:	b10a      	cbz	r2, 1a0038d2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0038ce:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0038d2:	2b02      	cmp	r3, #2
1a0038d4:	d009      	beq.n	1a0038ea <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0038d6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0038da:	d209      	bcs.n	1a0038f0 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0038dc:	3020      	adds	r0, #32
1a0038de:	4b07      	ldr	r3, [pc, #28]	; (1a0038fc <Chip_Clock_EnableOpts+0x34>)
1a0038e0:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0038e4:	4770      	bx	lr
		reg |= (1 << 1);
1a0038e6:	2103      	movs	r1, #3
1a0038e8:	e7f0      	b.n	1a0038cc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0038ea:	f041 0120 	orr.w	r1, r1, #32
1a0038ee:	e7f2      	b.n	1a0038d6 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0038f0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0038f4:	4b02      	ldr	r3, [pc, #8]	; (1a003900 <Chip_Clock_EnableOpts+0x38>)
1a0038f6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0038fa:	4770      	bx	lr
1a0038fc:	40051000 	.word	0x40051000
1a003900:	40052000 	.word	0x40052000

1a003904 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003904:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003908:	d208      	bcs.n	1a00391c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00390a:	4a09      	ldr	r2, [pc, #36]	; (1a003930 <Chip_Clock_Enable+0x2c>)
1a00390c:	3020      	adds	r0, #32
1a00390e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003912:	f043 0301 	orr.w	r3, r3, #1
1a003916:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00391a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00391c:	4a05      	ldr	r2, [pc, #20]	; (1a003934 <Chip_Clock_Enable+0x30>)
1a00391e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003922:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003926:	f043 0301 	orr.w	r3, r3, #1
1a00392a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00392e:	4770      	bx	lr
1a003930:	40051000 	.word	0x40051000
1a003934:	40052000 	.word	0x40052000

1a003938 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003938:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00393a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00393e:	d309      	bcc.n	1a003954 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003940:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003944:	4a0d      	ldr	r2, [pc, #52]	; (1a00397c <Chip_Clock_GetRate+0x44>)
1a003946:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00394a:	f014 0f01 	tst.w	r4, #1
1a00394e:	d107      	bne.n	1a003960 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003950:	2000      	movs	r0, #0
	}

	return rate;
}
1a003952:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003954:	f100 0320 	add.w	r3, r0, #32
1a003958:	4a09      	ldr	r2, [pc, #36]	; (1a003980 <Chip_Clock_GetRate+0x48>)
1a00395a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00395e:	e7f4      	b.n	1a00394a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003960:	f7ff fe20 	bl	1a0035a4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003964:	f7ff ffa9 	bl	1a0038ba <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003968:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00396c:	d103      	bne.n	1a003976 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00396e:	2301      	movs	r3, #1
		rate = rate / div;
1a003970:	fbb0 f0f3 	udiv	r0, r0, r3
1a003974:	e7ed      	b.n	1a003952 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003976:	2302      	movs	r3, #2
1a003978:	e7fa      	b.n	1a003970 <Chip_Clock_GetRate+0x38>
1a00397a:	bf00      	nop
1a00397c:	40052000 	.word	0x40052000
1a003980:	40051000 	.word	0x40051000

1a003984 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003984:	b570      	push	{r4, r5, r6, lr}
1a003986:	b08a      	sub	sp, #40	; 0x28
1a003988:	4605      	mov	r5, r0
1a00398a:	460e      	mov	r6, r1
1a00398c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00398e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003992:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003994:	2806      	cmp	r0, #6
1a003996:	d018      	beq.n	1a0039ca <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003998:	2300      	movs	r3, #0
1a00399a:	2201      	movs	r2, #1
1a00399c:	4629      	mov	r1, r5
1a00399e:	2004      	movs	r0, #4
1a0039a0:	f7ff ff4c 	bl	1a00383c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0039a4:	4a49      	ldr	r2, [pc, #292]	; (1a003acc <Chip_SetupCoreClock+0x148>)
1a0039a6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0039a8:	f043 0301 	orr.w	r3, r3, #1
1a0039ac:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0039ae:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0039b2:	a901      	add	r1, sp, #4
1a0039b4:	4630      	mov	r0, r6
1a0039b6:	f7ff feb9 	bl	1a00372c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0039ba:	4b45      	ldr	r3, [pc, #276]	; (1a003ad0 <Chip_SetupCoreClock+0x14c>)
1a0039bc:	429e      	cmp	r6, r3
1a0039be:	d916      	bls.n	1a0039ee <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0039c0:	9b01      	ldr	r3, [sp, #4]
1a0039c2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0039c6:	d003      	beq.n	1a0039d0 <Chip_SetupCoreClock+0x4c>
1a0039c8:	e7fe      	b.n	1a0039c8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0039ca:	f7ff fe11 	bl	1a0035f0 <Chip_Clock_EnableCrystal>
1a0039ce:	e7e3      	b.n	1a003998 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0039d0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0039d4:	d005      	beq.n	1a0039e2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0039d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0039da:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0039dc:	2500      	movs	r5, #0
			direct = 1;
1a0039de:	2601      	movs	r6, #1
1a0039e0:	e007      	b.n	1a0039f2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0039e2:	9b04      	ldr	r3, [sp, #16]
1a0039e4:	3301      	adds	r3, #1
1a0039e6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0039e8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0039ea:	2600      	movs	r6, #0
1a0039ec:	e001      	b.n	1a0039f2 <Chip_SetupCoreClock+0x6e>
1a0039ee:	2500      	movs	r5, #0
1a0039f0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0039f2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0039f6:	9b01      	ldr	r3, [sp, #4]
1a0039f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0039fc:	9a05      	ldr	r2, [sp, #20]
1a0039fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003a02:	9a03      	ldr	r2, [sp, #12]
1a003a04:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003a08:	9a04      	ldr	r2, [sp, #16]
1a003a0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003a0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003a12:	4a2e      	ldr	r2, [pc, #184]	; (1a003acc <Chip_SetupCoreClock+0x148>)
1a003a14:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003a16:	4b2d      	ldr	r3, [pc, #180]	; (1a003acc <Chip_SetupCoreClock+0x148>)
1a003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003a1a:	f013 0f01 	tst.w	r3, #1
1a003a1e:	d0fa      	beq.n	1a003a16 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003a20:	2300      	movs	r3, #0
1a003a22:	2201      	movs	r2, #1
1a003a24:	2109      	movs	r1, #9
1a003a26:	2004      	movs	r0, #4
1a003a28:	f7ff ff08 	bl	1a00383c <Chip_Clock_SetBaseClock>

	if (direct) {
1a003a2c:	b1fe      	cbz	r6, 1a003a6e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003a2e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003a32:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003a36:	1e5a      	subs	r2, r3, #1
1a003a38:	9209      	str	r2, [sp, #36]	; 0x24
1a003a3a:	2b00      	cmp	r3, #0
1a003a3c:	d1fa      	bne.n	1a003a34 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003a3e:	9b01      	ldr	r3, [sp, #4]
1a003a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003a44:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003a46:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003a4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003a4e:	9a05      	ldr	r2, [sp, #20]
1a003a50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003a54:	9a03      	ldr	r2, [sp, #12]
1a003a56:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003a5a:	9a04      	ldr	r2, [sp, #16]
1a003a5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003a64:	4a19      	ldr	r2, [pc, #100]	; (1a003acc <Chip_SetupCoreClock+0x148>)
1a003a66:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003a68:	b36c      	cbz	r4, 1a003ac6 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003a6a:	2400      	movs	r4, #0
1a003a6c:	e029      	b.n	1a003ac2 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003a6e:	2d00      	cmp	r5, #0
1a003a70:	d0fa      	beq.n	1a003a68 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003a72:	f242 7310 	movw	r3, #10000	; 0x2710
1a003a76:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003a7a:	1e5a      	subs	r2, r3, #1
1a003a7c:	9209      	str	r2, [sp, #36]	; 0x24
1a003a7e:	2b00      	cmp	r3, #0
1a003a80:	d1fa      	bne.n	1a003a78 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003a82:	9b04      	ldr	r3, [sp, #16]
1a003a84:	1e5a      	subs	r2, r3, #1
1a003a86:	9204      	str	r2, [sp, #16]
1a003a88:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003a8c:	9b01      	ldr	r3, [sp, #4]
1a003a8e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003a92:	9905      	ldr	r1, [sp, #20]
1a003a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003a98:	9903      	ldr	r1, [sp, #12]
1a003a9a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003a9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003aa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003aa6:	4a09      	ldr	r2, [pc, #36]	; (1a003acc <Chip_SetupCoreClock+0x148>)
1a003aa8:	6453      	str	r3, [r2, #68]	; 0x44
1a003aaa:	e7dd      	b.n	1a003a68 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003aac:	4809      	ldr	r0, [pc, #36]	; (1a003ad4 <Chip_SetupCoreClock+0x150>)
1a003aae:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003ab2:	78cb      	ldrb	r3, [r1, #3]
1a003ab4:	788a      	ldrb	r2, [r1, #2]
1a003ab6:	7849      	ldrb	r1, [r1, #1]
1a003ab8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003abc:	f7ff febe 	bl	1a00383c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003ac0:	3401      	adds	r4, #1
1a003ac2:	2c11      	cmp	r4, #17
1a003ac4:	d9f2      	bls.n	1a003aac <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003ac6:	b00a      	add	sp, #40	; 0x28
1a003ac8:	bd70      	pop	{r4, r5, r6, pc}
1a003aca:	bf00      	nop
1a003acc:	40050000 	.word	0x40050000
1a003ad0:	068e7780 	.word	0x068e7780
1a003ad4:	1a005430 	.word	0x1a005430

1a003ad8 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003ad8:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a003ada:	6843      	ldr	r3, [r0, #4]
1a003adc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003ae0:	2b30      	cmp	r3, #48	; 0x30
1a003ae2:	d04a      	beq.n	1a003b7a <Chip_I2CM_XferHandler+0xa2>
1a003ae4:	d90f      	bls.n	1a003b06 <Chip_I2CM_XferHandler+0x2e>
1a003ae6:	2b48      	cmp	r3, #72	; 0x48
1a003ae8:	d06a      	beq.n	1a003bc0 <Chip_I2CM_XferHandler+0xe8>
1a003aea:	d83a      	bhi.n	1a003b62 <Chip_I2CM_XferHandler+0x8a>
1a003aec:	2b38      	cmp	r3, #56	; 0x38
1a003aee:	d06b      	beq.n	1a003bc8 <Chip_I2CM_XferHandler+0xf0>
1a003af0:	2b40      	cmp	r3, #64	; 0x40
1a003af2:	d13e      	bne.n	1a003b72 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003af4:	88ca      	ldrh	r2, [r1, #6]
1a003af6:	2a01      	cmp	r2, #1
1a003af8:	d95a      	bls.n	1a003bb0 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a003afa:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a003afc:	b9b2      	cbnz	r2, 1a003b2c <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a003afe:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003b00:	f023 0310 	bic.w	r3, r3, #16
1a003b04:	e012      	b.n	1a003b2c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003b06:	2b10      	cmp	r3, #16
1a003b08:	d007      	beq.n	1a003b1a <Chip_I2CM_XferHandler+0x42>
1a003b0a:	d81c      	bhi.n	1a003b46 <Chip_I2CM_XferHandler+0x6e>
1a003b0c:	b91b      	cbnz	r3, 1a003b16 <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a003b0e:	2303      	movs	r3, #3
1a003b10:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003b12:	232c      	movs	r3, #44	; 0x2c
        break;
1a003b14:	e00a      	b.n	1a003b2c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003b16:	2b08      	cmp	r3, #8
1a003b18:	d12b      	bne.n	1a003b72 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003b1a:	780a      	ldrb	r2, [r1, #0]
1a003b1c:	888b      	ldrh	r3, [r1, #4]
1a003b1e:	fab3 f383 	clz	r3, r3
1a003b22:	095b      	lsrs	r3, r3, #5
1a003b24:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003b28:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003b2a:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003b2c:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003b30:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a003b32:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a003b36:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a003b38:	8848      	ldrh	r0, [r1, #2]
1a003b3a:	38ff      	subs	r0, #255	; 0xff
1a003b3c:	bf18      	it	ne
1a003b3e:	2001      	movne	r0, #1
}
1a003b40:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003b44:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003b46:	2b20      	cmp	r3, #32
1a003b48:	d017      	beq.n	1a003b7a <Chip_I2CM_XferHandler+0xa2>
1a003b4a:	2b28      	cmp	r3, #40	; 0x28
1a003b4c:	d001      	beq.n	1a003b52 <Chip_I2CM_XferHandler+0x7a>
1a003b4e:	2b18      	cmp	r3, #24
1a003b50:	d10f      	bne.n	1a003b72 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a003b52:	888b      	ldrh	r3, [r1, #4]
1a003b54:	b9cb      	cbnz	r3, 1a003b8a <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a003b56:	88cb      	ldrh	r3, [r1, #6]
1a003b58:	2b00      	cmp	r3, #0
1a003b5a:	d139      	bne.n	1a003bd0 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a003b5c:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a003b5e:	232c      	movs	r3, #44	; 0x2c
1a003b60:	e7e4      	b.n	1a003b2c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003b62:	2b58      	cmp	r3, #88	; 0x58
1a003b64:	d01b      	beq.n	1a003b9e <Chip_I2CM_XferHandler+0xc6>
1a003b66:	2bf8      	cmp	r3, #248	; 0xf8
1a003b68:	d101      	bne.n	1a003b6e <Chip_I2CM_XferHandler+0x96>
      return 0;
1a003b6a:	2000      	movs	r0, #0
1a003b6c:	e7e8      	b.n	1a003b40 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003b6e:	2b50      	cmp	r3, #80	; 0x50
1a003b70:	d015      	beq.n	1a003b9e <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a003b72:	2301      	movs	r3, #1
1a003b74:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003b76:	232c      	movs	r3, #44	; 0x2c
        break;
1a003b78:	e7d8      	b.n	1a003b2c <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a003b7a:	784b      	ldrb	r3, [r1, #1]
1a003b7c:	f013 0f01 	tst.w	r3, #1
1a003b80:	d1e7      	bne.n	1a003b52 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a003b82:	2302      	movs	r3, #2
1a003b84:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003b86:	232c      	movs	r3, #44	; 0x2c
			break;
1a003b88:	e7d0      	b.n	1a003b2c <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a003b8a:	688b      	ldr	r3, [r1, #8]
1a003b8c:	1c5a      	adds	r2, r3, #1
1a003b8e:	608a      	str	r2, [r1, #8]
1a003b90:	781b      	ldrb	r3, [r3, #0]
1a003b92:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003b94:	888b      	ldrh	r3, [r1, #4]
1a003b96:	3b01      	subs	r3, #1
1a003b98:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a003b9a:	233c      	movs	r3, #60	; 0x3c
1a003b9c:	e7c6      	b.n	1a003b2c <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a003b9e:	6882      	ldr	r2, [r0, #8]
1a003ba0:	68cb      	ldr	r3, [r1, #12]
1a003ba2:	1c5c      	adds	r4, r3, #1
1a003ba4:	60cc      	str	r4, [r1, #12]
1a003ba6:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a003ba8:	88cb      	ldrh	r3, [r1, #6]
1a003baa:	3b01      	subs	r3, #1
1a003bac:	80cb      	strh	r3, [r1, #6]
1a003bae:	e7a1      	b.n	1a003af4 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003bb0:	784b      	ldrb	r3, [r1, #1]
1a003bb2:	f013 0f02 	tst.w	r3, #2
1a003bb6:	d101      	bne.n	1a003bbc <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a003bb8:	233c      	movs	r3, #60	; 0x3c
1a003bba:	e79f      	b.n	1a003afc <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a003bbc:	2338      	movs	r3, #56	; 0x38
1a003bbe:	e79d      	b.n	1a003afc <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a003bc0:	2304      	movs	r3, #4
1a003bc2:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003bc4:	232c      	movs	r3, #44	; 0x2c
		break;
1a003bc6:	e7b1      	b.n	1a003b2c <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a003bc8:	2305      	movs	r3, #5
1a003bca:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a003bcc:	233c      	movs	r3, #60	; 0x3c
		break;
1a003bce:	e7ad      	b.n	1a003b2c <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a003bd0:	231c      	movs	r3, #28
1a003bd2:	e7ab      	b.n	1a003b2c <Chip_I2CM_XferHandler+0x54>

1a003bd4 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a003bd4:	23ff      	movs	r3, #255	; 0xff
1a003bd6:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a003bd8:	232c      	movs	r3, #44	; 0x2c
1a003bda:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a003bdc:	2360      	movs	r3, #96	; 0x60
1a003bde:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a003be0:	4770      	bx	lr

1a003be2 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003be2:	b538      	push	{r3, r4, r5, lr}
1a003be4:	4604      	mov	r4, r0
1a003be6:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a003be8:	f7ff fff4 	bl	1a003bd4 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a003bec:	2000      	movs	r0, #0

	while (ret == 0) {
1a003bee:	e007      	b.n	1a003c00 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a003bf0:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a003bf2:	f013 0f08 	tst.w	r3, #8
1a003bf6:	d0fb      	beq.n	1a003bf0 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a003bf8:	4629      	mov	r1, r5
1a003bfa:	4620      	mov	r0, r4
1a003bfc:	f7ff ff6c 	bl	1a003ad8 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a003c00:	2800      	cmp	r0, #0
1a003c02:	d0f5      	beq.n	1a003bf0 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a003c04:	bd38      	pop	{r3, r4, r5, pc}

1a003c06 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003c06:	4770      	bx	lr

1a003c08 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003c08:	4b03      	ldr	r3, [pc, #12]	; (1a003c18 <Chip_SSP_GetClockIndex+0x10>)
1a003c0a:	4298      	cmp	r0, r3
1a003c0c:	d001      	beq.n	1a003c12 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003c0e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003c10:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003c12:	20a5      	movs	r0, #165	; 0xa5
1a003c14:	4770      	bx	lr
1a003c16:	bf00      	nop
1a003c18:	400c5000 	.word	0x400c5000

1a003c1c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003c1c:	4b04      	ldr	r3, [pc, #16]	; (1a003c30 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003c1e:	4298      	cmp	r0, r3
1a003c20:	d002      	beq.n	1a003c28 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003c22:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003c26:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003c28:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003c2c:	4770      	bx	lr
1a003c2e:	bf00      	nop
1a003c30:	400c5000 	.word	0x400c5000

1a003c34 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003c34:	6803      	ldr	r3, [r0, #0]
1a003c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003c3a:	0209      	lsls	r1, r1, #8
1a003c3c:	b289      	uxth	r1, r1
1a003c3e:	4319      	orrs	r1, r3
1a003c40:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003c42:	6102      	str	r2, [r0, #16]
}
1a003c44:	4770      	bx	lr

1a003c46 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003c46:	b570      	push	{r4, r5, r6, lr}
1a003c48:	4606      	mov	r6, r0
1a003c4a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003c4c:	f7ff ffe6 	bl	1a003c1c <Chip_SSP_GetPeriphClockIndex>
1a003c50:	f7ff fe72 	bl	1a003938 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003c54:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003c5a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003c5c:	e000      	b.n	1a003c60 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003c5e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003c60:	42ab      	cmp	r3, r5
1a003c62:	d90b      	bls.n	1a003c7c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003c64:	1c4c      	adds	r4, r1, #1
1a003c66:	fb02 f304 	mul.w	r3, r2, r4
1a003c6a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003c6e:	429d      	cmp	r5, r3
1a003c70:	d2f6      	bcs.n	1a003c60 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003c72:	2cff      	cmp	r4, #255	; 0xff
1a003c74:	d9f3      	bls.n	1a003c5e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003c76:	3202      	adds	r2, #2
				cr0_div = 0;
1a003c78:	2100      	movs	r1, #0
1a003c7a:	e7f1      	b.n	1a003c60 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003c7c:	4630      	mov	r0, r6
1a003c7e:	f7ff ffd9 	bl	1a003c34 <Chip_SSP_SetClockRate>
}
1a003c82:	bd70      	pop	{r4, r5, r6, pc}

1a003c84 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003c84:	b510      	push	{r4, lr}
1a003c86:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003c88:	f7ff ffbe 	bl	1a003c08 <Chip_SSP_GetClockIndex>
1a003c8c:	f7ff fe3a 	bl	1a003904 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003c90:	4620      	mov	r0, r4
1a003c92:	f7ff ffc3 	bl	1a003c1c <Chip_SSP_GetPeriphClockIndex>
1a003c96:	f7ff fe35 	bl	1a003904 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003c9a:	6863      	ldr	r3, [r4, #4]
1a003c9c:	f023 0304 	bic.w	r3, r3, #4
1a003ca0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003ca2:	6823      	ldr	r3, [r4, #0]
1a003ca4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003ca8:	f043 0307 	orr.w	r3, r3, #7
1a003cac:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003cae:	4902      	ldr	r1, [pc, #8]	; (1a003cb8 <Chip_SSP_Init+0x34>)
1a003cb0:	4620      	mov	r0, r4
1a003cb2:	f7ff ffc8 	bl	1a003c46 <Chip_SSP_SetBitRate>
}
1a003cb6:	bd10      	pop	{r4, pc}
1a003cb8:	000186a0 	.word	0x000186a0

1a003cbc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003cbc:	2901      	cmp	r1, #1
1a003cbe:	d000      	beq.n	1a003cc2 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003cc0:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003cc2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003cc6:	0082      	lsls	r2, r0, #2
1a003cc8:	4b03      	ldr	r3, [pc, #12]	; (1a003cd8 <Chip_I2C_EventHandler+0x1c>)
1a003cca:	4413      	add	r3, r2
1a003ccc:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003cce:	7d13      	ldrb	r3, [r2, #20]
1a003cd0:	b2db      	uxtb	r3, r3
1a003cd2:	2b04      	cmp	r3, #4
1a003cd4:	d0fb      	beq.n	1a003cce <Chip_I2C_EventHandler+0x12>
1a003cd6:	e7f3      	b.n	1a003cc0 <Chip_I2C_EventHandler+0x4>
1a003cd8:	1000001c 	.word	0x1000001c

1a003cdc <handleMasterXferState>:
{
1a003cdc:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a003cde:	6843      	ldr	r3, [r0, #4]
1a003ce0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a003ce4:	2b58      	cmp	r3, #88	; 0x58
1a003ce6:	d87e      	bhi.n	1a003de6 <handleMasterXferState+0x10a>
1a003ce8:	e8df f003 	tbb	[pc, r3]
1a003cec:	7d7d7d79 	.word	0x7d7d7d79
1a003cf0:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cf4:	7d7d7d2f 	.word	0x7d7d7d2f
1a003cf8:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cfc:	7d7d7d2f 	.word	0x7d7d7d2f
1a003d00:	7d7d7d7d 	.word	0x7d7d7d7d
1a003d04:	7d7d7d39 	.word	0x7d7d7d39
1a003d08:	7d7d7d7d 	.word	0x7d7d7d7d
1a003d0c:	7d7d7d6d 	.word	0x7d7d7d6d
1a003d10:	7d7d7d7d 	.word	0x7d7d7d7d
1a003d14:	7d7d7d39 	.word	0x7d7d7d39
1a003d18:	7d7d7d7d 	.word	0x7d7d7d7d
1a003d1c:	7d7d7d71 	.word	0x7d7d7d71
1a003d20:	7d7d7d7d 	.word	0x7d7d7d7d
1a003d24:	7d7d7d75 	.word	0x7d7d7d75
1a003d28:	7d7d7d7d 	.word	0x7d7d7d7d
1a003d2c:	7d7d7d6b 	.word	0x7d7d7d6b
1a003d30:	7d7d7d7d 	.word	0x7d7d7d7d
1a003d34:	7d7d7d6d 	.word	0x7d7d7d6d
1a003d38:	7d7d7d7d 	.word	0x7d7d7d7d
1a003d3c:	7d7d7d2d 	.word	0x7d7d7d2d
1a003d40:	7d7d7d7d 	.word	0x7d7d7d7d
1a003d44:	4f          	.byte	0x4f
1a003d45:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a003d46:	233c      	movs	r3, #60	; 0x3c
1a003d48:	e020      	b.n	1a003d8c <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003d4a:	780a      	ldrb	r2, [r1, #0]
1a003d4c:	688b      	ldr	r3, [r1, #8]
1a003d4e:	fab3 f383 	clz	r3, r3
1a003d52:	095b      	lsrs	r3, r3, #5
1a003d54:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003d58:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003d5a:	233c      	movs	r3, #60	; 0x3c
		break;
1a003d5c:	e023      	b.n	1a003da6 <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a003d5e:	688b      	ldr	r3, [r1, #8]
1a003d60:	b94b      	cbnz	r3, 1a003d76 <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a003d62:	690b      	ldr	r3, [r1, #16]
1a003d64:	b123      	cbz	r3, 1a003d70 <handleMasterXferState+0x94>
1a003d66:	f06f 0320 	mvn.w	r3, #32
1a003d6a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a003d6e:	e01a      	b.n	1a003da6 <handleMasterXferState+0xca>
1a003d70:	f06f 0310 	mvn.w	r3, #16
1a003d74:	e7f9      	b.n	1a003d6a <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a003d76:	684b      	ldr	r3, [r1, #4]
1a003d78:	1c5a      	adds	r2, r3, #1
1a003d7a:	604a      	str	r2, [r1, #4]
1a003d7c:	781b      	ldrb	r3, [r3, #0]
1a003d7e:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003d80:	688b      	ldr	r3, [r1, #8]
1a003d82:	3b01      	subs	r3, #1
1a003d84:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003d86:	233c      	movs	r3, #60	; 0x3c
1a003d88:	e00d      	b.n	1a003da6 <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a003d8a:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a003d8c:	6884      	ldr	r4, [r0, #8]
1a003d8e:	68ca      	ldr	r2, [r1, #12]
1a003d90:	1c55      	adds	r5, r2, #1
1a003d92:	60cd      	str	r5, [r1, #12]
1a003d94:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a003d96:	690a      	ldr	r2, [r1, #16]
1a003d98:	3a01      	subs	r2, #1
1a003d9a:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a003d9c:	690a      	ldr	r2, [r1, #16]
1a003d9e:	2a01      	cmp	r2, #1
1a003da0:	dd01      	ble.n	1a003da6 <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a003da2:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003da6:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003daa:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a003dac:	f023 0210 	bic.w	r2, r3, #16
1a003db0:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a003db2:	f013 0f10 	tst.w	r3, #16
1a003db6:	d018      	beq.n	1a003dea <handleMasterXferState+0x10e>
1a003db8:	7d0b      	ldrb	r3, [r1, #20]
1a003dba:	2b02      	cmp	r3, #2
1a003dbc:	d015      	beq.n	1a003dea <handleMasterXferState+0x10e>
	return 1;
1a003dbe:	2001      	movs	r0, #1
1a003dc0:	e017      	b.n	1a003df2 <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a003dc2:	233c      	movs	r3, #60	; 0x3c
1a003dc4:	e7ea      	b.n	1a003d9c <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a003dc6:	2305      	movs	r3, #5
1a003dc8:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003dca:	232c      	movs	r3, #44	; 0x2c
		break;
1a003dcc:	e7eb      	b.n	1a003da6 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a003dce:	2301      	movs	r3, #1
1a003dd0:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003dd2:	232c      	movs	r3, #44	; 0x2c
		break;
1a003dd4:	e7e7      	b.n	1a003da6 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a003dd6:	2302      	movs	r3, #2
1a003dd8:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a003dda:	233c      	movs	r3, #60	; 0x3c
		break;
1a003ddc:	e7e3      	b.n	1a003da6 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a003dde:	2303      	movs	r3, #3
1a003de0:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003de2:	232c      	movs	r3, #44	; 0x2c
1a003de4:	e7df      	b.n	1a003da6 <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a003de6:	233c      	movs	r3, #60	; 0x3c
1a003de8:	e7dd      	b.n	1a003da6 <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a003dea:	7d0b      	ldrb	r3, [r1, #20]
1a003dec:	2b04      	cmp	r3, #4
1a003dee:	d002      	beq.n	1a003df6 <handleMasterXferState+0x11a>
		return 0;
1a003df0:	2000      	movs	r0, #0
}
1a003df2:	bc30      	pop	{r4, r5}
1a003df4:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a003df6:	2000      	movs	r0, #0
1a003df8:	7508      	strb	r0, [r1, #20]
1a003dfa:	e7fa      	b.n	1a003df2 <handleMasterXferState+0x116>

1a003dfc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003dfc:	b570      	push	{r4, r5, r6, lr}
1a003dfe:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003e00:	4e06      	ldr	r6, [pc, #24]	; (1a003e1c <Chip_I2C_Init+0x20>)
1a003e02:	00c4      	lsls	r4, r0, #3
1a003e04:	1a22      	subs	r2, r4, r0
1a003e06:	0093      	lsls	r3, r2, #2
1a003e08:	4433      	add	r3, r6
1a003e0a:	8898      	ldrh	r0, [r3, #4]
1a003e0c:	f7ff fd7a 	bl	1a003904 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003e10:	1b64      	subs	r4, r4, r5
1a003e12:	00a3      	lsls	r3, r4, #2
1a003e14:	58f3      	ldr	r3, [r6, r3]
1a003e16:	226c      	movs	r2, #108	; 0x6c
1a003e18:	619a      	str	r2, [r3, #24]
}
1a003e1a:	bd70      	pop	{r4, r5, r6, pc}
1a003e1c:	1000001c 	.word	0x1000001c

1a003e20 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003e24:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003e26:	4e0b      	ldr	r6, [pc, #44]	; (1a003e54 <Chip_I2C_SetClockRate+0x34>)
1a003e28:	00c5      	lsls	r5, r0, #3
1a003e2a:	1a2b      	subs	r3, r5, r0
1a003e2c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003e30:	eb06 0308 	add.w	r3, r6, r8
1a003e34:	8898      	ldrh	r0, [r3, #4]
1a003e36:	f7ff fd7f 	bl	1a003938 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003e3a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003e3e:	f856 3008 	ldr.w	r3, [r6, r8]
1a003e42:	0842      	lsrs	r2, r0, #1
1a003e44:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003e46:	f856 3008 	ldr.w	r3, [r6, r8]
1a003e4a:	691a      	ldr	r2, [r3, #16]
1a003e4c:	1a80      	subs	r0, r0, r2
1a003e4e:	6158      	str	r0, [r3, #20]
}
1a003e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e54:	1000001c 	.word	0x1000001c

1a003e58 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a003e58:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003e5c:	009a      	lsls	r2, r3, #2
1a003e5e:	4b09      	ldr	r3, [pc, #36]	; (1a003e84 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003e60:	4413      	add	r3, r2
1a003e62:	691b      	ldr	r3, [r3, #16]
1a003e64:	b153      	cbz	r3, 1a003e7c <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a003e66:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003e6a:	0082      	lsls	r2, r0, #2
1a003e6c:	4b05      	ldr	r3, [pc, #20]	; (1a003e84 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003e6e:	4413      	add	r3, r2
1a003e70:	6898      	ldr	r0, [r3, #8]
}
1a003e72:	4288      	cmp	r0, r1
1a003e74:	bf14      	ite	ne
1a003e76:	2000      	movne	r0, #0
1a003e78:	2001      	moveq	r0, #1
1a003e7a:	4770      	bx	lr
		iic->mEvent = event;
1a003e7c:	4b01      	ldr	r3, [pc, #4]	; (1a003e84 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003e7e:	4413      	add	r3, r2
1a003e80:	6099      	str	r1, [r3, #8]
1a003e82:	e7f0      	b.n	1a003e66 <Chip_I2C_SetMasterEventHandler+0xe>
1a003e84:	1000001c 	.word	0x1000001c

1a003e88 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a003e88:	b510      	push	{r4, lr}
1a003e8a:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a003e8c:	4809      	ldr	r0, [pc, #36]	; (1a003eb4 <Chip_I2C_MasterStateHandler+0x2c>)
1a003e8e:	00e3      	lsls	r3, r4, #3
1a003e90:	1b1b      	subs	r3, r3, r4
1a003e92:	009a      	lsls	r2, r3, #2
1a003e94:	1883      	adds	r3, r0, r2
1a003e96:	6919      	ldr	r1, [r3, #16]
1a003e98:	5880      	ldr	r0, [r0, r2]
1a003e9a:	f7ff ff1f 	bl	1a003cdc <handleMasterXferState>
1a003e9e:	b940      	cbnz	r0, 1a003eb2 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a003ea0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a003ea4:	009a      	lsls	r2, r3, #2
1a003ea6:	4b03      	ldr	r3, [pc, #12]	; (1a003eb4 <Chip_I2C_MasterStateHandler+0x2c>)
1a003ea8:	4413      	add	r3, r2
1a003eaa:	689b      	ldr	r3, [r3, #8]
1a003eac:	2102      	movs	r1, #2
1a003eae:	4620      	mov	r0, r4
1a003eb0:	4798      	blx	r3
	}
}
1a003eb2:	bd10      	pop	{r4, pc}
1a003eb4:	1000001c 	.word	0x1000001c

1a003eb8 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a003eb8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003ebc:	0083      	lsls	r3, r0, #2
1a003ebe:	4a03      	ldr	r2, [pc, #12]	; (1a003ecc <Chip_I2C_IsStateChanged+0x14>)
1a003ec0:	58d3      	ldr	r3, [r2, r3]
1a003ec2:	6818      	ldr	r0, [r3, #0]
}
1a003ec4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a003ec8:	4770      	bx	lr
1a003eca:	bf00      	nop
1a003ecc:	1000001c 	.word	0x1000001c

1a003ed0 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a003ed0:	2901      	cmp	r1, #1
1a003ed2:	d000      	beq.n	1a003ed6 <Chip_I2C_EventHandlerPolling+0x6>
1a003ed4:	4770      	bx	lr
{
1a003ed6:	b538      	push	{r3, r4, r5, lr}
1a003ed8:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a003eda:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003ede:	009a      	lsls	r2, r3, #2
1a003ee0:	4b08      	ldr	r3, [pc, #32]	; (1a003f04 <Chip_I2C_EventHandlerPolling+0x34>)
1a003ee2:	4413      	add	r3, r2
1a003ee4:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a003ee6:	7d2b      	ldrb	r3, [r5, #20]
1a003ee8:	b2db      	uxtb	r3, r3
1a003eea:	2b04      	cmp	r3, #4
1a003eec:	d108      	bne.n	1a003f00 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a003eee:	4620      	mov	r0, r4
1a003ef0:	f7ff ffe2 	bl	1a003eb8 <Chip_I2C_IsStateChanged>
1a003ef4:	2800      	cmp	r0, #0
1a003ef6:	d0f6      	beq.n	1a003ee6 <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a003ef8:	4620      	mov	r0, r4
1a003efa:	f7ff ffc5 	bl	1a003e88 <Chip_I2C_MasterStateHandler>
1a003efe:	e7f2      	b.n	1a003ee6 <Chip_I2C_EventHandlerPolling+0x16>
}
1a003f00:	bd38      	pop	{r3, r4, r5, pc}
1a003f02:	bf00      	nop
1a003f04:	1000001c 	.word	0x1000001c

1a003f08 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003f08:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003f0a:	4a0b      	ldr	r2, [pc, #44]	; (1a003f38 <SystemInit+0x30>)
1a003f0c:	4b0b      	ldr	r3, [pc, #44]	; (1a003f3c <SystemInit+0x34>)
1a003f0e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003f10:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003f14:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003f16:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003f1a:	2b20      	cmp	r3, #32
1a003f1c:	d004      	beq.n	1a003f28 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003f1e:	f7ff f941 	bl	1a0031a4 <Board_SystemInit>
   Board_Init();
1a003f22:	f7ff f8c9 	bl	1a0030b8 <Board_Init>
}
1a003f26:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003f28:	4a04      	ldr	r2, [pc, #16]	; (1a003f3c <SystemInit+0x34>)
1a003f2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003f2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003f32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003f36:	e7f2      	b.n	1a003f1e <SystemInit+0x16>
1a003f38:	1a000000 	.word	0x1a000000
1a003f3c:	e000ed00 	.word	0xe000ed00

1a003f40 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003f40:	4b04      	ldr	r3, [pc, #16]	; (1a003f54 <cyclesCounterInit+0x14>)
1a003f42:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003f44:	4a04      	ldr	r2, [pc, #16]	; (1a003f58 <cyclesCounterInit+0x18>)
1a003f46:	6813      	ldr	r3, [r2, #0]
1a003f48:	f043 0301 	orr.w	r3, r3, #1
1a003f4c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003f4e:	2001      	movs	r0, #1
1a003f50:	4770      	bx	lr
1a003f52:	bf00      	nop
1a003f54:	10000054 	.word	0x10000054
1a003f58:	e0001000 	.word	0xe0001000

1a003f5c <uartProcessIRQ>:
{
1a003f5c:	b570      	push	{r4, r5, r6, lr}
1a003f5e:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003f60:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003f64:	0093      	lsls	r3, r2, #2
1a003f66:	4a1f      	ldr	r2, [pc, #124]	; (1a003fe4 <uartProcessIRQ+0x88>)
1a003f68:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a003f6a:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003f6c:	b2ed      	uxtb	r5, r5
1a003f6e:	f015 0f01 	tst.w	r5, #1
1a003f72:	d009      	beq.n	1a003f88 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a003f74:	b920      	cbnz	r0, 1a003f80 <uartProcessIRQ+0x24>
1a003f76:	4b1c      	ldr	r3, [pc, #112]	; (1a003fe8 <uartProcessIRQ+0x8c>)
1a003f78:	681b      	ldr	r3, [r3, #0]
1a003f7a:	b10b      	cbz	r3, 1a003f80 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a003f7c:	2000      	movs	r0, #0
1a003f7e:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003f80:	2c03      	cmp	r4, #3
1a003f82:	d013      	beq.n	1a003fac <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003f84:	2c05      	cmp	r4, #5
1a003f86:	d018      	beq.n	1a003fba <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003f88:	f015 0f20 	tst.w	r5, #32
1a003f8c:	d00d      	beq.n	1a003faa <uartProcessIRQ+0x4e>
	return pUART->IER;
1a003f8e:	6873      	ldr	r3, [r6, #4]
1a003f90:	f013 0f02 	tst.w	r3, #2
1a003f94:	d009      	beq.n	1a003faa <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003f96:	b924      	cbnz	r4, 1a003fa2 <uartProcessIRQ+0x46>
1a003f98:	4b14      	ldr	r3, [pc, #80]	; (1a003fec <uartProcessIRQ+0x90>)
1a003f9a:	681b      	ldr	r3, [r3, #0]
1a003f9c:	b10b      	cbz	r3, 1a003fa2 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a003f9e:	2000      	movs	r0, #0
1a003fa0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003fa2:	2c03      	cmp	r4, #3
1a003fa4:	d010      	beq.n	1a003fc8 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003fa6:	2c05      	cmp	r4, #5
1a003fa8:	d015      	beq.n	1a003fd6 <uartProcessIRQ+0x7a>
}
1a003faa:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003fac:	4b10      	ldr	r3, [pc, #64]	; (1a003ff0 <uartProcessIRQ+0x94>)
1a003fae:	681b      	ldr	r3, [r3, #0]
1a003fb0:	2b00      	cmp	r3, #0
1a003fb2:	d0e7      	beq.n	1a003f84 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a003fb4:	2000      	movs	r0, #0
1a003fb6:	4798      	blx	r3
1a003fb8:	e7e4      	b.n	1a003f84 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003fba:	4b0e      	ldr	r3, [pc, #56]	; (1a003ff4 <uartProcessIRQ+0x98>)
1a003fbc:	681b      	ldr	r3, [r3, #0]
1a003fbe:	2b00      	cmp	r3, #0
1a003fc0:	d0e2      	beq.n	1a003f88 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a003fc2:	2000      	movs	r0, #0
1a003fc4:	4798      	blx	r3
1a003fc6:	e7df      	b.n	1a003f88 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003fc8:	4b0b      	ldr	r3, [pc, #44]	; (1a003ff8 <uartProcessIRQ+0x9c>)
1a003fca:	681b      	ldr	r3, [r3, #0]
1a003fcc:	2b00      	cmp	r3, #0
1a003fce:	d0ea      	beq.n	1a003fa6 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a003fd0:	2000      	movs	r0, #0
1a003fd2:	4798      	blx	r3
1a003fd4:	e7e7      	b.n	1a003fa6 <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003fd6:	4b09      	ldr	r3, [pc, #36]	; (1a003ffc <uartProcessIRQ+0xa0>)
1a003fd8:	681b      	ldr	r3, [r3, #0]
1a003fda:	2b00      	cmp	r3, #0
1a003fdc:	d0e5      	beq.n	1a003faa <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a003fde:	2000      	movs	r0, #0
1a003fe0:	4798      	blx	r3
}
1a003fe2:	e7e2      	b.n	1a003faa <uartProcessIRQ+0x4e>
1a003fe4:	1a005478 	.word	0x1a005478
1a003fe8:	10002b54 	.word	0x10002b54
1a003fec:	10002b60 	.word	0x10002b60
1a003ff0:	10002b58 	.word	0x10002b58
1a003ff4:	10002b5c 	.word	0x10002b5c
1a003ff8:	10002b64 	.word	0x10002b64
1a003ffc:	10002b68 	.word	0x10002b68

1a004000 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a004000:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a004002:	2003      	movs	r0, #3
1a004004:	f7ff ffaa 	bl	1a003f5c <uartProcessIRQ>
}
1a004008:	bd08      	pop	{r3, pc}

1a00400a <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a00400a:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a00400c:	2005      	movs	r0, #5
1a00400e:	f7ff ffa5 	bl	1a003f5c <uartProcessIRQ>
}
1a004012:	bd08      	pop	{r3, pc}

1a004014 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a004014:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a004018:	4908      	ldr	r1, [pc, #32]	; (1a00403c <tickerCallback+0x28>)
1a00401a:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00401e:	f112 0b01 	adds.w	fp, r2, #1
1a004022:	f143 0c00 	adc.w	ip, r3, #0
1a004026:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00402a:	4b05      	ldr	r3, [pc, #20]	; (1a004040 <tickerCallback+0x2c>)
1a00402c:	681b      	ldr	r3, [r3, #0]
1a00402e:	b113      	cbz	r3, 1a004036 <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a004030:	4a04      	ldr	r2, [pc, #16]	; (1a004044 <tickerCallback+0x30>)
1a004032:	6810      	ldr	r0, [r2, #0]
1a004034:	4798      	blx	r3
   }
}
1a004036:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a00403a:	bf00      	nop
1a00403c:	10002b70 	.word	0x10002b70
1a004040:	10002b78 	.word	0x10002b78
1a004044:	10002b6c 	.word	0x10002b6c

1a004048 <tickInit>:
{
1a004048:	b510      	push	{r4, lr}
1a00404a:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a00404c:	4b0e      	ldr	r3, [pc, #56]	; (1a004088 <tickInit+0x40>)
1a00404e:	9301      	str	r3, [sp, #4]
1a004050:	4b0e      	ldr	r3, [pc, #56]	; (1a00408c <tickInit+0x44>)
1a004052:	9300      	str	r3, [sp, #0]
1a004054:	2300      	movs	r3, #0
1a004056:	2201      	movs	r2, #1
1a004058:	4601      	mov	r1, r0
1a00405a:	480d      	ldr	r0, [pc, #52]	; (1a004090 <tickInit+0x48>)
1a00405c:	f7fe fbe6 	bl	1a00282c <xTimerCreateStatic>
         if (h == NULL)
1a004060:	b178      	cbz	r0, 1a004082 <tickInit+0x3a>
1a004062:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a004064:	f7fd ff1a 	bl	1a001e9c <xTaskGetTickCount>
1a004068:	2300      	movs	r3, #0
1a00406a:	9300      	str	r3, [sp, #0]
1a00406c:	4602      	mov	r2, r0
1a00406e:	2101      	movs	r1, #1
1a004070:	4620      	mov	r0, r4
1a004072:	f7fe fc01 	bl	1a002878 <xTimerGenericCommand>
1a004076:	2801      	cmp	r0, #1
1a004078:	bf14      	ite	ne
1a00407a:	2000      	movne	r0, #0
1a00407c:	2001      	moveq	r0, #1
}
1a00407e:	b002      	add	sp, #8
1a004080:	bd10      	pop	{r4, pc}
            return 0;
1a004082:	2000      	movs	r0, #0
1a004084:	e7fb      	b.n	1a00407e <tickInit+0x36>
1a004086:	bf00      	nop
1a004088:	10002b7c 	.word	0x10002b7c
1a00408c:	1a004015 	.word	0x1a004015
1a004090:	1a0054c0 	.word	0x1a0054c0

1a004094 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a004094:	b538      	push	{r3, r4, r5, lr}
1a004096:	4604      	mov	r4, r0
1a004098:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00409a:	4b08      	ldr	r3, [pc, #32]	; (1a0040bc <i2cHardwareInit+0x28>)
1a00409c:	f640 0208 	movw	r2, #2056	; 0x808
1a0040a0:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a0040a4:	f7ff feaa 	bl	1a003dfc <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a0040a8:	4629      	mov	r1, r5
1a0040aa:	4620      	mov	r0, r4
1a0040ac:	f7ff feb8 	bl	1a003e20 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0040b0:	4903      	ldr	r1, [pc, #12]	; (1a0040c0 <i2cHardwareInit+0x2c>)
1a0040b2:	4620      	mov	r0, r4
1a0040b4:	f7ff fed0 	bl	1a003e58 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a0040b8:	2001      	movs	r0, #1
1a0040ba:	bd38      	pop	{r3, r4, r5, pc}
1a0040bc:	40086000 	.word	0x40086000
1a0040c0:	1a003ed1 	.word	0x1a003ed1

1a0040c4 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a0040c4:	b500      	push	{lr}
1a0040c6:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a0040c8:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0040cc:	2100      	movs	r1, #0
1a0040ce:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0040d2:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a0040d6:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a0040d8:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a0040dc:	9b07      	ldr	r3, [sp, #28]
1a0040de:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a0040e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a0040e4:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0040e8:	4669      	mov	r1, sp
1a0040ea:	4804      	ldr	r0, [pc, #16]	; (1a0040fc <i2cHardwareRead+0x38>)
1a0040ec:	f7ff fd79 	bl	1a003be2 <Chip_I2CM_XferBlocking>
1a0040f0:	b100      	cbz	r0, 1a0040f4 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a0040f2:	2001      	movs	r0, #1
}
1a0040f4:	b005      	add	sp, #20
1a0040f6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0040fa:	bf00      	nop
1a0040fc:	400a1000 	.word	0x400a1000

1a004100 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a004100:	b108      	cbz	r0, 1a004106 <i2cHardwareWrite+0x6>
      return FALSE;
1a004102:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a004104:	4770      	bx	lr
{
1a004106:	b500      	push	{lr}
1a004108:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a00410a:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a00410e:	2100      	movs	r1, #0
1a004110:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a004114:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a004118:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a00411a:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a00411e:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a004120:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a004124:	4669      	mov	r1, sp
1a004126:	4804      	ldr	r0, [pc, #16]	; (1a004138 <i2cHardwareWrite+0x38>)
1a004128:	f7ff fd5b 	bl	1a003be2 <Chip_I2CM_XferBlocking>
1a00412c:	b100      	cbz	r0, 1a004130 <i2cHardwareWrite+0x30>
   return TRUE;
1a00412e:	2001      	movs	r0, #1
}
1a004130:	b005      	add	sp, #20
1a004132:	f85d fb04 	ldr.w	pc, [sp], #4
1a004136:	bf00      	nop
1a004138:	400a1000 	.word	0x400a1000

1a00413c <i2cInit>:

bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;
   if( i2cNumber != I2C0 ) {
1a00413c:	b108      	cbz	r0, 1a004142 <i2cInit+0x6>
      return FALSE;
1a00413e:	2000      	movs	r0, #0
   retVal = i2cSoftwareInit( i2cNumber, clockRateHz );
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif
   return retVal;
}
1a004140:	4770      	bx	lr
{
1a004142:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a004144:	f7ff ffa6 	bl	1a004094 <i2cHardwareInit>
}
1a004148:	bd08      	pop	{r3, pc}

1a00414a <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a00414a:	b108      	cbz	r0, 1a004150 <i2cRead+0x6>
      return FALSE;
1a00414c:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a00414e:	4770      	bx	lr
{
1a004150:	b510      	push	{r4, lr}
1a004152:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a004154:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a004158:	9403      	str	r4, [sp, #12]
1a00415a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a00415e:	9402      	str	r4, [sp, #8]
1a004160:	9c07      	ldr	r4, [sp, #28]
1a004162:	9401      	str	r4, [sp, #4]
1a004164:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a004168:	9400      	str	r4, [sp, #0]
1a00416a:	f7ff ffab 	bl	1a0040c4 <i2cHardwareRead>
}
1a00416e:	b004      	add	sp, #16
1a004170:	bd10      	pop	{r4, pc}

1a004172 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a004172:	b108      	cbz	r0, 1a004178 <i2cWrite+0x6>
      return FALSE;
1a004174:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a004176:	4770      	bx	lr
{
1a004178:	b510      	push	{r4, lr}
1a00417a:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a00417c:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a004180:	9400      	str	r4, [sp, #0]
1a004182:	f7ff ffbd 	bl	1a004100 <i2cHardwareWrite>
}
1a004186:	b002      	add	sp, #8
1a004188:	bd10      	pop	{r4, pc}
1a00418a:	Address 0x000000001a00418a is out of bounds.


1a00418c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00418c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00418e:	4d0b      	ldr	r5, [pc, #44]	; (1a0041bc <gpioObtainPinInit+0x30>)
1a004190:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004194:	182c      	adds	r4, r5, r0
1a004196:	5628      	ldrsb	r0, [r5, r0]
1a004198:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00419a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00419e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0041a0:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0041a4:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0041a6:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0041aa:	9b02      	ldr	r3, [sp, #8]
1a0041ac:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0041ae:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0041b2:	9b03      	ldr	r3, [sp, #12]
1a0041b4:	701a      	strb	r2, [r3, #0]
}
1a0041b6:	bc30      	pop	{r4, r5}
1a0041b8:	4770      	bx	lr
1a0041ba:	bf00      	nop
1a0041bc:	1a0054cc 	.word	0x1a0054cc

1a0041c0 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0041c0:	b570      	push	{r4, r5, r6, lr}
1a0041c2:	b084      	sub	sp, #16
1a0041c4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0041c6:	2300      	movs	r3, #0
1a0041c8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0041cc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0041d0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0041d4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0041d8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0041dc:	f10d 030b 	add.w	r3, sp, #11
1a0041e0:	9301      	str	r3, [sp, #4]
1a0041e2:	ab03      	add	r3, sp, #12
1a0041e4:	9300      	str	r3, [sp, #0]
1a0041e6:	f10d 030d 	add.w	r3, sp, #13
1a0041ea:	f10d 020e 	add.w	r2, sp, #14
1a0041ee:	f10d 010f 	add.w	r1, sp, #15
1a0041f2:	f7ff ffcb 	bl	1a00418c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0041f6:	2c05      	cmp	r4, #5
1a0041f8:	f200 80a5 	bhi.w	1a004346 <gpioInit+0x186>
1a0041fc:	e8df f004 	tbb	[pc, r4]
1a004200:	45278109 	.word	0x45278109
1a004204:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a004206:	4851      	ldr	r0, [pc, #324]	; (1a00434c <gpioInit+0x18c>)
1a004208:	f7ff fcfd 	bl	1a003c06 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00420c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00420e:	b004      	add	sp, #16
1a004210:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a004212:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004216:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00421a:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00421e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004222:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004226:	494a      	ldr	r1, [pc, #296]	; (1a004350 <gpioInit+0x190>)
1a004228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00422c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004230:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004234:	2001      	movs	r0, #1
1a004236:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00423a:	4c44      	ldr	r4, [pc, #272]	; (1a00434c <gpioInit+0x18c>)
1a00423c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004240:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004244:	ea22 0201 	bic.w	r2, r2, r1
1a004248:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00424c:	e7df      	b.n	1a00420e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00424e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004252:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004256:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00425a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00425e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004262:	493b      	ldr	r1, [pc, #236]	; (1a004350 <gpioInit+0x190>)
1a004264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004268:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00426c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004270:	2001      	movs	r0, #1
1a004272:	fa00 f102 	lsl.w	r1, r0, r2
1a004276:	4c35      	ldr	r4, [pc, #212]	; (1a00434c <gpioInit+0x18c>)
1a004278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00427c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004280:	ea22 0201 	bic.w	r2, r2, r1
1a004284:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004288:	e7c1      	b.n	1a00420e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00428a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00428e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004292:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004296:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00429a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00429e:	492c      	ldr	r1, [pc, #176]	; (1a004350 <gpioInit+0x190>)
1a0042a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0042a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0042a8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0042ac:	2001      	movs	r0, #1
1a0042ae:	fa00 f102 	lsl.w	r1, r0, r2
1a0042b2:	4c26      	ldr	r4, [pc, #152]	; (1a00434c <gpioInit+0x18c>)
1a0042b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0042b8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0042bc:	ea22 0201 	bic.w	r2, r2, r1
1a0042c0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0042c4:	e7a3      	b.n	1a00420e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0042c6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0042ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0042ce:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0042d2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0042d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0042da:	491d      	ldr	r1, [pc, #116]	; (1a004350 <gpioInit+0x190>)
1a0042dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0042e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0042e4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0042e8:	2001      	movs	r0, #1
1a0042ea:	fa00 f102 	lsl.w	r1, r0, r2
1a0042ee:	4c17      	ldr	r4, [pc, #92]	; (1a00434c <gpioInit+0x18c>)
1a0042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0042f4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0042f8:	ea22 0201 	bic.w	r2, r2, r1
1a0042fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004300:	e785      	b.n	1a00420e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a004302:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004306:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00430a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00430e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004312:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004316:	490e      	ldr	r1, [pc, #56]	; (1a004350 <gpioInit+0x190>)
1a004318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00431c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a004320:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004324:	2001      	movs	r0, #1
1a004326:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00432a:	4b08      	ldr	r3, [pc, #32]	; (1a00434c <gpioInit+0x18c>)
1a00432c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a004330:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a004334:	4331      	orrs	r1, r6
1a004336:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00433a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a00433c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a004340:	2100      	movs	r1, #0
1a004342:	5499      	strb	r1, [r3, r2]
1a004344:	e763      	b.n	1a00420e <gpioInit+0x4e>
      ret_val = 0;
1a004346:	2000      	movs	r0, #0
1a004348:	e761      	b.n	1a00420e <gpioInit+0x4e>
1a00434a:	bf00      	nop
1a00434c:	400f4000 	.word	0x400f4000
1a004350:	40086000 	.word	0x40086000

1a004354 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a004354:	b510      	push	{r4, lr}
1a004356:	b084      	sub	sp, #16
1a004358:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00435a:	2300      	movs	r3, #0
1a00435c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004360:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004364:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004368:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00436c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004370:	f10d 030b 	add.w	r3, sp, #11
1a004374:	9301      	str	r3, [sp, #4]
1a004376:	ab03      	add	r3, sp, #12
1a004378:	9300      	str	r3, [sp, #0]
1a00437a:	f10d 030d 	add.w	r3, sp, #13
1a00437e:	f10d 020e 	add.w	r2, sp, #14
1a004382:	f10d 010f 	add.w	r1, sp, #15
1a004386:	f7ff ff01 	bl	1a00418c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00438a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00438e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a004392:	3400      	adds	r4, #0
1a004394:	bf18      	it	ne
1a004396:	2401      	movne	r4, #1
1a004398:	015b      	lsls	r3, r3, #5
1a00439a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00439e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0043a2:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0043a4:	2001      	movs	r0, #1
1a0043a6:	b004      	add	sp, #16
1a0043a8:	bd10      	pop	{r4, pc}

1a0043aa <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0043aa:	b500      	push	{lr}
1a0043ac:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0043ae:	2300      	movs	r3, #0
1a0043b0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0043b4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0043b8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0043bc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0043c0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0043c4:	f10d 030b 	add.w	r3, sp, #11
1a0043c8:	9301      	str	r3, [sp, #4]
1a0043ca:	ab03      	add	r3, sp, #12
1a0043cc:	9300      	str	r3, [sp, #0]
1a0043ce:	f10d 030d 	add.w	r3, sp, #13
1a0043d2:	f10d 020e 	add.w	r2, sp, #14
1a0043d6:	f10d 010f 	add.w	r1, sp, #15
1a0043da:	f7ff fed7 	bl	1a00418c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0043de:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0043e2:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0043e6:	015b      	lsls	r3, r3, #5
1a0043e8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0043ec:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0043f0:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0043f2:	3000      	adds	r0, #0
1a0043f4:	bf18      	it	ne
1a0043f6:	2001      	movne	r0, #1
1a0043f8:	b005      	add	sp, #20
1a0043fa:	f85d fb04 	ldr.w	pc, [sp], #4
1a0043fe:	Address 0x000000001a0043fe is out of bounds.


1a004400 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a004400:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a004402:	4b04      	ldr	r3, [pc, #16]	; (1a004414 <USB0_IRQHandler+0x14>)
1a004404:	681b      	ldr	r3, [r3, #0]
1a004406:	681b      	ldr	r3, [r3, #0]
1a004408:	68db      	ldr	r3, [r3, #12]
1a00440a:	4a03      	ldr	r2, [pc, #12]	; (1a004418 <USB0_IRQHandler+0x18>)
1a00440c:	6810      	ldr	r0, [r2, #0]
1a00440e:	4798      	blx	r3
}
1a004410:	bd08      	pop	{r3, pc}
1a004412:	bf00      	nop
1a004414:	10002d5c 	.word	0x10002d5c
1a004418:	10002bac 	.word	0x10002bac

1a00441c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00441c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00441e:	f7fe ffdf 	bl	1a0033e0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a004422:	4b3a      	ldr	r3, [pc, #232]	; (1a00450c <boardInit+0xf0>)
1a004424:	6818      	ldr	r0, [r3, #0]
1a004426:	f7ff fd8b 	bl	1a003f40 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00442a:	2001      	movs	r0, #1
1a00442c:	2100      	movs	r1, #0
1a00442e:	f7ff fe0b 	bl	1a004048 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a004432:	2105      	movs	r1, #5
1a004434:	2000      	movs	r0, #0
1a004436:	f7ff fec3 	bl	1a0041c0 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00443a:	2100      	movs	r1, #0
1a00443c:	2024      	movs	r0, #36	; 0x24
1a00443e:	f7ff febf 	bl	1a0041c0 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a004442:	2100      	movs	r1, #0
1a004444:	2025      	movs	r0, #37	; 0x25
1a004446:	f7ff febb 	bl	1a0041c0 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00444a:	2100      	movs	r1, #0
1a00444c:	2026      	movs	r0, #38	; 0x26
1a00444e:	f7ff feb7 	bl	1a0041c0 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a004452:	2100      	movs	r1, #0
1a004454:	2027      	movs	r0, #39	; 0x27
1a004456:	f7ff feb3 	bl	1a0041c0 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00445a:	2101      	movs	r1, #1
1a00445c:	2028      	movs	r0, #40	; 0x28
1a00445e:	f7ff feaf 	bl	1a0041c0 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a004462:	2101      	movs	r1, #1
1a004464:	2029      	movs	r0, #41	; 0x29
1a004466:	f7ff feab 	bl	1a0041c0 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00446a:	2101      	movs	r1, #1
1a00446c:	202a      	movs	r0, #42	; 0x2a
1a00446e:	f7ff fea7 	bl	1a0041c0 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a004472:	2101      	movs	r1, #1
1a004474:	202b      	movs	r0, #43	; 0x2b
1a004476:	f7ff fea3 	bl	1a0041c0 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00447a:	2101      	movs	r1, #1
1a00447c:	202c      	movs	r0, #44	; 0x2c
1a00447e:	f7ff fe9f 	bl	1a0041c0 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a004482:	2101      	movs	r1, #1
1a004484:	202d      	movs	r0, #45	; 0x2d
1a004486:	f7ff fe9b 	bl	1a0041c0 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00448a:	2100      	movs	r1, #0
1a00448c:	202e      	movs	r0, #46	; 0x2e
1a00448e:	f7ff fe97 	bl	1a0041c0 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a004492:	2100      	movs	r1, #0
1a004494:	202f      	movs	r0, #47	; 0x2f
1a004496:	f7ff fe93 	bl	1a0041c0 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00449a:	2100      	movs	r1, #0
1a00449c:	2030      	movs	r0, #48	; 0x30
1a00449e:	f7ff fe8f 	bl	1a0041c0 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0044a2:	2100      	movs	r1, #0
1a0044a4:	2031      	movs	r0, #49	; 0x31
1a0044a6:	f7ff fe8b 	bl	1a0041c0 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0044aa:	2100      	movs	r1, #0
1a0044ac:	2032      	movs	r0, #50	; 0x32
1a0044ae:	f7ff fe87 	bl	1a0041c0 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0044b2:	2100      	movs	r1, #0
1a0044b4:	2033      	movs	r0, #51	; 0x33
1a0044b6:	f7ff fe83 	bl	1a0041c0 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0044ba:	2100      	movs	r1, #0
1a0044bc:	2034      	movs	r0, #52	; 0x34
1a0044be:	f7ff fe7f 	bl	1a0041c0 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0044c2:	2100      	movs	r1, #0
1a0044c4:	2035      	movs	r0, #53	; 0x35
1a0044c6:	f7ff fe7b 	bl	1a0041c0 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0044ca:	2101      	movs	r1, #1
1a0044cc:	2036      	movs	r0, #54	; 0x36
1a0044ce:	f7ff fe77 	bl	1a0041c0 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0044d2:	2101      	movs	r1, #1
1a0044d4:	2037      	movs	r0, #55	; 0x37
1a0044d6:	f7ff fe73 	bl	1a0041c0 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0044da:	2101      	movs	r1, #1
1a0044dc:	2038      	movs	r0, #56	; 0x38
1a0044de:	f7ff fe6f 	bl	1a0041c0 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0044e2:	2101      	movs	r1, #1
1a0044e4:	2039      	movs	r0, #57	; 0x39
1a0044e6:	f7ff fe6b 	bl	1a0041c0 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0044ea:	2101      	movs	r1, #1
1a0044ec:	203a      	movs	r0, #58	; 0x3a
1a0044ee:	f7ff fe67 	bl	1a0041c0 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0044f2:	2101      	movs	r1, #1
1a0044f4:	203b      	movs	r0, #59	; 0x3b
1a0044f6:	f7ff fe63 	bl	1a0041c0 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0044fa:	2101      	movs	r1, #1
1a0044fc:	203c      	movs	r0, #60	; 0x3c
1a0044fe:	f7ff fe5f 	bl	1a0041c0 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a004502:	2101      	movs	r1, #1
1a004504:	203d      	movs	r0, #61	; 0x3d
1a004506:	f7ff fe5b 	bl	1a0041c0 <gpioInit>

}
1a00450a:	bd08      	pop	{r3, pc}
1a00450c:	10002d58 	.word	0x10002d58

1a004510 <hmc5883lIsAlive>:
     ) {
      return (TRUE);
   } else {
      return (FALSE);
   }
}
1a004510:	2000      	movs	r0, #0
1a004512:	4770      	bx	lr

1a004514 <hmc5883lPrepareDefaultInit>:

bool_t hmc5883lPrepareDefaultInit( HMC5883L_config_t * config )
{
1a004514:	4603      	mov	r3, r0
   config->gain = HMC5883L_DEFAULT_gain;
1a004516:	2001      	movs	r0, #1
1a004518:	70d8      	strb	r0, [r3, #3]
   config->meassurement = HMC5883L_DEFAULT_messurement;
1a00451a:	2200      	movs	r2, #0
1a00451c:	709a      	strb	r2, [r3, #2]
   config->rate = HMC5883L_DEFAULT_rate;
1a00451e:	2104      	movs	r1, #4
1a004520:	7059      	strb	r1, [r3, #1]
   config->samples = HMC5883L_DEFAULT_sample;
1a004522:	701a      	strb	r2, [r3, #0]
   config->mode = HMC5883L_DEFAULT_mode;
1a004524:	7118      	strb	r0, [r3, #4]

   return (TRUE);
}
1a004526:	4770      	bx	lr

1a004528 <hmc5883lInit>:


bool_t hmc5883lInit( HMC5883L_config_t config )
{
1a004528:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00452a:	b087      	sub	sp, #28
1a00452c:	ab02      	add	r3, sp, #8
1a00452e:	e883 0003 	stmia.w	r3, {r0, r1}
   uint8_t registerA, registerB, registerMode;

   uint8_t transmitDataBuffer[2];

   registerA = config.samples;
1a004532:	f89d 3008 	ldrb.w	r3, [sp, #8]
   registerA = registerA<<3;
1a004536:	00db      	lsls	r3, r3, #3
1a004538:	b2da      	uxtb	r2, r3
   registerA |= config.rate;
1a00453a:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a00453e:	4313      	orrs	r3, r2
   registerA = registerA<<2;
1a004540:	009b      	lsls	r3, r3, #2
1a004542:	b2db      	uxtb	r3, r3
   registerA |= config.meassurement;
1a004544:	f89d 600a 	ldrb.w	r6, [sp, #10]
1a004548:	431e      	orrs	r6, r3

   registerB = config.gain;
1a00454a:	f89d 400b 	ldrb.w	r4, [sp, #11]
   registerB = registerB << 5;
1a00454e:	0164      	lsls	r4, r4, #5
1a004550:	b2e4      	uxtb	r4, r4

   registerMode = config.mode;
1a004552:	f89d 700c 	ldrb.w	r7, [sp, #12]

   i2cInit( I2C0, 100000 );
1a004556:	4915      	ldr	r1, [pc, #84]	; (1a0045ac <hmc5883lInit+0x84>)
1a004558:	2000      	movs	r0, #0
1a00455a:	f7ff fdef 	bl	1a00413c <i2cInit>

   transmitDataBuffer[0] = HMC5883L_REG_CONFIG_A;
1a00455e:	2500      	movs	r5, #0
1a004560:	f88d 5014 	strb.w	r5, [sp, #20]
   transmitDataBuffer[1] = registerA;
1a004564:	f88d 6015 	strb.w	r6, [sp, #21]
   i2cWrite( I2C0, HMC5883L_ADD, transmitDataBuffer, 2, TRUE );
1a004568:	2601      	movs	r6, #1
1a00456a:	9600      	str	r6, [sp, #0]
1a00456c:	2302      	movs	r3, #2
1a00456e:	aa05      	add	r2, sp, #20
1a004570:	211e      	movs	r1, #30
1a004572:	4628      	mov	r0, r5
1a004574:	f7ff fdfd 	bl	1a004172 <i2cWrite>

   transmitDataBuffer[0] = HMC5883L_REG_CONFIG_B;
1a004578:	f88d 6014 	strb.w	r6, [sp, #20]
   transmitDataBuffer[1] = registerB;
1a00457c:	f88d 4015 	strb.w	r4, [sp, #21]
   i2cWrite( I2C0, HMC5883L_ADD, transmitDataBuffer, 2, TRUE );
1a004580:	9600      	str	r6, [sp, #0]
1a004582:	2302      	movs	r3, #2
1a004584:	aa05      	add	r2, sp, #20
1a004586:	211e      	movs	r1, #30
1a004588:	4628      	mov	r0, r5
1a00458a:	f7ff fdf2 	bl	1a004172 <i2cWrite>

   transmitDataBuffer[0] = HMC5883L_REG_MODE;
1a00458e:	2302      	movs	r3, #2
1a004590:	f88d 3014 	strb.w	r3, [sp, #20]
   transmitDataBuffer[1] = registerMode;
1a004594:	f88d 7015 	strb.w	r7, [sp, #21]
   i2cWrite( I2C0, HMC5883L_ADD, transmitDataBuffer, 2, TRUE );
1a004598:	9600      	str	r6, [sp, #0]
1a00459a:	aa05      	add	r2, sp, #20
1a00459c:	211e      	movs	r1, #30
1a00459e:	4628      	mov	r0, r5
1a0045a0:	f7ff fde7 	bl	1a004172 <i2cWrite>

   return ( hmc5883lIsAlive() );
1a0045a4:	f7ff ffb4 	bl	1a004510 <hmc5883lIsAlive>
}
1a0045a8:	b007      	add	sp, #28
1a0045aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0045ac:	000186a0 	.word	0x000186a0

1a0045b0 <hmc5883lRead>:


bool_t hmc5883lRead( int16_t * x, int16_t * y, int16_t * z )
{
1a0045b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0045b4:	b086      	sub	sp, #24
1a0045b6:	4680      	mov	r8, r0
1a0045b8:	460f      	mov	r7, r1
1a0045ba:	4616      	mov	r6, r2
   uint8_t y_MSB, y_LSB;
   uint8_t z_MSB, z_LSB;

   uint8_t dataToReadBuffer;

   dataToReadBuffer = HMC5883L_REG_X_MSB;
1a0045bc:	ad06      	add	r5, sp, #24
1a0045be:	2303      	movs	r3, #3
1a0045c0:	f805 3d07 	strb.w	r3, [r5, #-7]!
   i2cRead( I2C0, HMC5883L_ADD,
1a0045c4:	2401      	movs	r4, #1
1a0045c6:	9403      	str	r4, [sp, #12]
1a0045c8:	9402      	str	r4, [sp, #8]
1a0045ca:	f10d 0317 	add.w	r3, sp, #23
1a0045ce:	9301      	str	r3, [sp, #4]
1a0045d0:	9400      	str	r4, [sp, #0]
1a0045d2:	4623      	mov	r3, r4
1a0045d4:	462a      	mov	r2, r5
1a0045d6:	211e      	movs	r1, #30
1a0045d8:	2000      	movs	r0, #0
1a0045da:	f7ff fdb6 	bl	1a00414a <i2cRead>
            &dataToReadBuffer, 1, TRUE,
            &x_MSB, 1, TRUE );

   dataToReadBuffer = HMC5883L_REG_X_LSB;
1a0045de:	2304      	movs	r3, #4
1a0045e0:	f88d 3011 	strb.w	r3, [sp, #17]
   i2cRead( I2C0, HMC5883L_ADD,
1a0045e4:	9403      	str	r4, [sp, #12]
1a0045e6:	9402      	str	r4, [sp, #8]
1a0045e8:	f10d 0316 	add.w	r3, sp, #22
1a0045ec:	9301      	str	r3, [sp, #4]
1a0045ee:	9400      	str	r4, [sp, #0]
1a0045f0:	4623      	mov	r3, r4
1a0045f2:	462a      	mov	r2, r5
1a0045f4:	211e      	movs	r1, #30
1a0045f6:	2000      	movs	r0, #0
1a0045f8:	f7ff fda7 	bl	1a00414a <i2cRead>
            &dataToReadBuffer, 1, TRUE,
            &x_LSB, 1, TRUE );

   dataToReadBuffer = HMC5883L_REG_Y_MSB;
1a0045fc:	2307      	movs	r3, #7
1a0045fe:	f88d 3011 	strb.w	r3, [sp, #17]
   i2cRead( I2C0, HMC5883L_ADD,
1a004602:	9403      	str	r4, [sp, #12]
1a004604:	9402      	str	r4, [sp, #8]
1a004606:	f10d 0315 	add.w	r3, sp, #21
1a00460a:	9301      	str	r3, [sp, #4]
1a00460c:	9400      	str	r4, [sp, #0]
1a00460e:	4623      	mov	r3, r4
1a004610:	462a      	mov	r2, r5
1a004612:	211e      	movs	r1, #30
1a004614:	2000      	movs	r0, #0
1a004616:	f7ff fd98 	bl	1a00414a <i2cRead>
            &dataToReadBuffer, 1, TRUE,
            &y_MSB, 1, TRUE );

   dataToReadBuffer = HMC5883L_REG_Y_LSB;
1a00461a:	2308      	movs	r3, #8
1a00461c:	f88d 3011 	strb.w	r3, [sp, #17]
   i2cRead( I2C0, HMC5883L_ADD,
1a004620:	9403      	str	r4, [sp, #12]
1a004622:	9402      	str	r4, [sp, #8]
1a004624:	ab05      	add	r3, sp, #20
1a004626:	9301      	str	r3, [sp, #4]
1a004628:	9400      	str	r4, [sp, #0]
1a00462a:	4623      	mov	r3, r4
1a00462c:	462a      	mov	r2, r5
1a00462e:	211e      	movs	r1, #30
1a004630:	2000      	movs	r0, #0
1a004632:	f7ff fd8a 	bl	1a00414a <i2cRead>
            &dataToReadBuffer, 1, TRUE,
            &y_LSB, 1, TRUE );

   dataToReadBuffer = HMC5883L_REG_Z_MSB;
1a004636:	2305      	movs	r3, #5
1a004638:	f88d 3011 	strb.w	r3, [sp, #17]
   i2cRead( I2C0, HMC5883L_ADD,
1a00463c:	9403      	str	r4, [sp, #12]
1a00463e:	9402      	str	r4, [sp, #8]
1a004640:	f10d 0313 	add.w	r3, sp, #19
1a004644:	9301      	str	r3, [sp, #4]
1a004646:	9400      	str	r4, [sp, #0]
1a004648:	4623      	mov	r3, r4
1a00464a:	462a      	mov	r2, r5
1a00464c:	211e      	movs	r1, #30
1a00464e:	2000      	movs	r0, #0
1a004650:	f7ff fd7b 	bl	1a00414a <i2cRead>
            &dataToReadBuffer, 1, TRUE,
            &z_MSB, 1, TRUE );

   dataToReadBuffer = HMC5883L_REG_Z_LSB;
1a004654:	2306      	movs	r3, #6
1a004656:	f88d 3011 	strb.w	r3, [sp, #17]
   i2cRead( I2C0, HMC5883L_ADD,
1a00465a:	9403      	str	r4, [sp, #12]
1a00465c:	9402      	str	r4, [sp, #8]
1a00465e:	f10d 0312 	add.w	r3, sp, #18
1a004662:	9301      	str	r3, [sp, #4]
1a004664:	9400      	str	r4, [sp, #0]
1a004666:	4623      	mov	r3, r4
1a004668:	462a      	mov	r2, r5
1a00466a:	211e      	movs	r1, #30
1a00466c:	2000      	movs	r0, #0
1a00466e:	f7ff fd6c 	bl	1a00414a <i2cRead>
            &dataToReadBuffer, 1, TRUE,
            &z_LSB, 1, TRUE );

   *x = x_MSB;
1a004672:	f89d 2017 	ldrb.w	r2, [sp, #23]
   *x = (*x << 8) | x_LSB;
1a004676:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a00467a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00467e:	f8a8 3000 	strh.w	r3, [r8]

   *y = y_MSB;
1a004682:	f89d 2015 	ldrb.w	r2, [sp, #21]
   *y = (*y << 8) | y_LSB;
1a004686:	f89d 3014 	ldrb.w	r3, [sp, #20]
1a00468a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00468e:	803b      	strh	r3, [r7, #0]

   *z = z_MSB;
1a004690:	f89d 2013 	ldrb.w	r2, [sp, #19]
   *z = (*z << 8) | z_LSB;
1a004694:	f89d 3012 	ldrb.w	r3, [sp, #18]
1a004698:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00469c:	8033      	strh	r3, [r6, #0]

   return(result); /** TODO: return value must reflect the result of the operation */
}
1a00469e:	4620      	mov	r0, r4
1a0046a0:	b006      	add	sp, #24
1a0046a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0046a6:	Address 0x000000001a0046a6 is out of bounds.


1a0046a8 <__aeabi_uldivmod>:
1a0046a8:	b953      	cbnz	r3, 1a0046c0 <__aeabi_uldivmod+0x18>
1a0046aa:	b94a      	cbnz	r2, 1a0046c0 <__aeabi_uldivmod+0x18>
1a0046ac:	2900      	cmp	r1, #0
1a0046ae:	bf08      	it	eq
1a0046b0:	2800      	cmpeq	r0, #0
1a0046b2:	bf1c      	itt	ne
1a0046b4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0046b8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0046bc:	f000 b972 	b.w	1a0049a4 <__aeabi_idiv0>
1a0046c0:	f1ad 0c08 	sub.w	ip, sp, #8
1a0046c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0046c8:	f000 f806 	bl	1a0046d8 <__udivmoddi4>
1a0046cc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0046d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0046d4:	b004      	add	sp, #16
1a0046d6:	4770      	bx	lr

1a0046d8 <__udivmoddi4>:
1a0046d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0046dc:	9e08      	ldr	r6, [sp, #32]
1a0046de:	4604      	mov	r4, r0
1a0046e0:	4688      	mov	r8, r1
1a0046e2:	2b00      	cmp	r3, #0
1a0046e4:	d14b      	bne.n	1a00477e <__udivmoddi4+0xa6>
1a0046e6:	428a      	cmp	r2, r1
1a0046e8:	4615      	mov	r5, r2
1a0046ea:	d967      	bls.n	1a0047bc <__udivmoddi4+0xe4>
1a0046ec:	fab2 f282 	clz	r2, r2
1a0046f0:	b14a      	cbz	r2, 1a004706 <__udivmoddi4+0x2e>
1a0046f2:	f1c2 0720 	rsb	r7, r2, #32
1a0046f6:	fa01 f302 	lsl.w	r3, r1, r2
1a0046fa:	fa20 f707 	lsr.w	r7, r0, r7
1a0046fe:	4095      	lsls	r5, r2
1a004700:	ea47 0803 	orr.w	r8, r7, r3
1a004704:	4094      	lsls	r4, r2
1a004706:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00470a:	0c23      	lsrs	r3, r4, #16
1a00470c:	fbb8 f7fe 	udiv	r7, r8, lr
1a004710:	fa1f fc85 	uxth.w	ip, r5
1a004714:	fb0e 8817 	mls	r8, lr, r7, r8
1a004718:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00471c:	fb07 f10c 	mul.w	r1, r7, ip
1a004720:	4299      	cmp	r1, r3
1a004722:	d909      	bls.n	1a004738 <__udivmoddi4+0x60>
1a004724:	18eb      	adds	r3, r5, r3
1a004726:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00472a:	f080 811b 	bcs.w	1a004964 <__udivmoddi4+0x28c>
1a00472e:	4299      	cmp	r1, r3
1a004730:	f240 8118 	bls.w	1a004964 <__udivmoddi4+0x28c>
1a004734:	3f02      	subs	r7, #2
1a004736:	442b      	add	r3, r5
1a004738:	1a5b      	subs	r3, r3, r1
1a00473a:	b2a4      	uxth	r4, r4
1a00473c:	fbb3 f0fe 	udiv	r0, r3, lr
1a004740:	fb0e 3310 	mls	r3, lr, r0, r3
1a004744:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004748:	fb00 fc0c 	mul.w	ip, r0, ip
1a00474c:	45a4      	cmp	ip, r4
1a00474e:	d909      	bls.n	1a004764 <__udivmoddi4+0x8c>
1a004750:	192c      	adds	r4, r5, r4
1a004752:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004756:	f080 8107 	bcs.w	1a004968 <__udivmoddi4+0x290>
1a00475a:	45a4      	cmp	ip, r4
1a00475c:	f240 8104 	bls.w	1a004968 <__udivmoddi4+0x290>
1a004760:	3802      	subs	r0, #2
1a004762:	442c      	add	r4, r5
1a004764:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004768:	eba4 040c 	sub.w	r4, r4, ip
1a00476c:	2700      	movs	r7, #0
1a00476e:	b11e      	cbz	r6, 1a004778 <__udivmoddi4+0xa0>
1a004770:	40d4      	lsrs	r4, r2
1a004772:	2300      	movs	r3, #0
1a004774:	e9c6 4300 	strd	r4, r3, [r6]
1a004778:	4639      	mov	r1, r7
1a00477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00477e:	428b      	cmp	r3, r1
1a004780:	d909      	bls.n	1a004796 <__udivmoddi4+0xbe>
1a004782:	2e00      	cmp	r6, #0
1a004784:	f000 80eb 	beq.w	1a00495e <__udivmoddi4+0x286>
1a004788:	2700      	movs	r7, #0
1a00478a:	e9c6 0100 	strd	r0, r1, [r6]
1a00478e:	4638      	mov	r0, r7
1a004790:	4639      	mov	r1, r7
1a004792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004796:	fab3 f783 	clz	r7, r3
1a00479a:	2f00      	cmp	r7, #0
1a00479c:	d147      	bne.n	1a00482e <__udivmoddi4+0x156>
1a00479e:	428b      	cmp	r3, r1
1a0047a0:	d302      	bcc.n	1a0047a8 <__udivmoddi4+0xd0>
1a0047a2:	4282      	cmp	r2, r0
1a0047a4:	f200 80fa 	bhi.w	1a00499c <__udivmoddi4+0x2c4>
1a0047a8:	1a84      	subs	r4, r0, r2
1a0047aa:	eb61 0303 	sbc.w	r3, r1, r3
1a0047ae:	2001      	movs	r0, #1
1a0047b0:	4698      	mov	r8, r3
1a0047b2:	2e00      	cmp	r6, #0
1a0047b4:	d0e0      	beq.n	1a004778 <__udivmoddi4+0xa0>
1a0047b6:	e9c6 4800 	strd	r4, r8, [r6]
1a0047ba:	e7dd      	b.n	1a004778 <__udivmoddi4+0xa0>
1a0047bc:	b902      	cbnz	r2, 1a0047c0 <__udivmoddi4+0xe8>
1a0047be:	deff      	udf	#255	; 0xff
1a0047c0:	fab2 f282 	clz	r2, r2
1a0047c4:	2a00      	cmp	r2, #0
1a0047c6:	f040 808f 	bne.w	1a0048e8 <__udivmoddi4+0x210>
1a0047ca:	1b49      	subs	r1, r1, r5
1a0047cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0047d0:	fa1f f885 	uxth.w	r8, r5
1a0047d4:	2701      	movs	r7, #1
1a0047d6:	fbb1 fcfe 	udiv	ip, r1, lr
1a0047da:	0c23      	lsrs	r3, r4, #16
1a0047dc:	fb0e 111c 	mls	r1, lr, ip, r1
1a0047e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0047e4:	fb08 f10c 	mul.w	r1, r8, ip
1a0047e8:	4299      	cmp	r1, r3
1a0047ea:	d907      	bls.n	1a0047fc <__udivmoddi4+0x124>
1a0047ec:	18eb      	adds	r3, r5, r3
1a0047ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0047f2:	d202      	bcs.n	1a0047fa <__udivmoddi4+0x122>
1a0047f4:	4299      	cmp	r1, r3
1a0047f6:	f200 80cd 	bhi.w	1a004994 <__udivmoddi4+0x2bc>
1a0047fa:	4684      	mov	ip, r0
1a0047fc:	1a59      	subs	r1, r3, r1
1a0047fe:	b2a3      	uxth	r3, r4
1a004800:	fbb1 f0fe 	udiv	r0, r1, lr
1a004804:	fb0e 1410 	mls	r4, lr, r0, r1
1a004808:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a00480c:	fb08 f800 	mul.w	r8, r8, r0
1a004810:	45a0      	cmp	r8, r4
1a004812:	d907      	bls.n	1a004824 <__udivmoddi4+0x14c>
1a004814:	192c      	adds	r4, r5, r4
1a004816:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00481a:	d202      	bcs.n	1a004822 <__udivmoddi4+0x14a>
1a00481c:	45a0      	cmp	r8, r4
1a00481e:	f200 80b6 	bhi.w	1a00498e <__udivmoddi4+0x2b6>
1a004822:	4618      	mov	r0, r3
1a004824:	eba4 0408 	sub.w	r4, r4, r8
1a004828:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a00482c:	e79f      	b.n	1a00476e <__udivmoddi4+0x96>
1a00482e:	f1c7 0c20 	rsb	ip, r7, #32
1a004832:	40bb      	lsls	r3, r7
1a004834:	fa22 fe0c 	lsr.w	lr, r2, ip
1a004838:	ea4e 0e03 	orr.w	lr, lr, r3
1a00483c:	fa01 f407 	lsl.w	r4, r1, r7
1a004840:	fa20 f50c 	lsr.w	r5, r0, ip
1a004844:	fa21 f30c 	lsr.w	r3, r1, ip
1a004848:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a00484c:	4325      	orrs	r5, r4
1a00484e:	fbb3 f9f8 	udiv	r9, r3, r8
1a004852:	0c2c      	lsrs	r4, r5, #16
1a004854:	fb08 3319 	mls	r3, r8, r9, r3
1a004858:	fa1f fa8e 	uxth.w	sl, lr
1a00485c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a004860:	fb09 f40a 	mul.w	r4, r9, sl
1a004864:	429c      	cmp	r4, r3
1a004866:	fa02 f207 	lsl.w	r2, r2, r7
1a00486a:	fa00 f107 	lsl.w	r1, r0, r7
1a00486e:	d90b      	bls.n	1a004888 <__udivmoddi4+0x1b0>
1a004870:	eb1e 0303 	adds.w	r3, lr, r3
1a004874:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004878:	f080 8087 	bcs.w	1a00498a <__udivmoddi4+0x2b2>
1a00487c:	429c      	cmp	r4, r3
1a00487e:	f240 8084 	bls.w	1a00498a <__udivmoddi4+0x2b2>
1a004882:	f1a9 0902 	sub.w	r9, r9, #2
1a004886:	4473      	add	r3, lr
1a004888:	1b1b      	subs	r3, r3, r4
1a00488a:	b2ad      	uxth	r5, r5
1a00488c:	fbb3 f0f8 	udiv	r0, r3, r8
1a004890:	fb08 3310 	mls	r3, r8, r0, r3
1a004894:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004898:	fb00 fa0a 	mul.w	sl, r0, sl
1a00489c:	45a2      	cmp	sl, r4
1a00489e:	d908      	bls.n	1a0048b2 <__udivmoddi4+0x1da>
1a0048a0:	eb1e 0404 	adds.w	r4, lr, r4
1a0048a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0048a8:	d26b      	bcs.n	1a004982 <__udivmoddi4+0x2aa>
1a0048aa:	45a2      	cmp	sl, r4
1a0048ac:	d969      	bls.n	1a004982 <__udivmoddi4+0x2aa>
1a0048ae:	3802      	subs	r0, #2
1a0048b0:	4474      	add	r4, lr
1a0048b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0048b6:	fba0 8902 	umull	r8, r9, r0, r2
1a0048ba:	eba4 040a 	sub.w	r4, r4, sl
1a0048be:	454c      	cmp	r4, r9
1a0048c0:	46c2      	mov	sl, r8
1a0048c2:	464b      	mov	r3, r9
1a0048c4:	d354      	bcc.n	1a004970 <__udivmoddi4+0x298>
1a0048c6:	d051      	beq.n	1a00496c <__udivmoddi4+0x294>
1a0048c8:	2e00      	cmp	r6, #0
1a0048ca:	d069      	beq.n	1a0049a0 <__udivmoddi4+0x2c8>
1a0048cc:	ebb1 050a 	subs.w	r5, r1, sl
1a0048d0:	eb64 0403 	sbc.w	r4, r4, r3
1a0048d4:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0048d8:	40fd      	lsrs	r5, r7
1a0048da:	40fc      	lsrs	r4, r7
1a0048dc:	ea4c 0505 	orr.w	r5, ip, r5
1a0048e0:	e9c6 5400 	strd	r5, r4, [r6]
1a0048e4:	2700      	movs	r7, #0
1a0048e6:	e747      	b.n	1a004778 <__udivmoddi4+0xa0>
1a0048e8:	f1c2 0320 	rsb	r3, r2, #32
1a0048ec:	fa20 f703 	lsr.w	r7, r0, r3
1a0048f0:	4095      	lsls	r5, r2
1a0048f2:	fa01 f002 	lsl.w	r0, r1, r2
1a0048f6:	fa21 f303 	lsr.w	r3, r1, r3
1a0048fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0048fe:	4338      	orrs	r0, r7
1a004900:	0c01      	lsrs	r1, r0, #16
1a004902:	fbb3 f7fe 	udiv	r7, r3, lr
1a004906:	fa1f f885 	uxth.w	r8, r5
1a00490a:	fb0e 3317 	mls	r3, lr, r7, r3
1a00490e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004912:	fb07 f308 	mul.w	r3, r7, r8
1a004916:	428b      	cmp	r3, r1
1a004918:	fa04 f402 	lsl.w	r4, r4, r2
1a00491c:	d907      	bls.n	1a00492e <__udivmoddi4+0x256>
1a00491e:	1869      	adds	r1, r5, r1
1a004920:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004924:	d22f      	bcs.n	1a004986 <__udivmoddi4+0x2ae>
1a004926:	428b      	cmp	r3, r1
1a004928:	d92d      	bls.n	1a004986 <__udivmoddi4+0x2ae>
1a00492a:	3f02      	subs	r7, #2
1a00492c:	4429      	add	r1, r5
1a00492e:	1acb      	subs	r3, r1, r3
1a004930:	b281      	uxth	r1, r0
1a004932:	fbb3 f0fe 	udiv	r0, r3, lr
1a004936:	fb0e 3310 	mls	r3, lr, r0, r3
1a00493a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00493e:	fb00 f308 	mul.w	r3, r0, r8
1a004942:	428b      	cmp	r3, r1
1a004944:	d907      	bls.n	1a004956 <__udivmoddi4+0x27e>
1a004946:	1869      	adds	r1, r5, r1
1a004948:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00494c:	d217      	bcs.n	1a00497e <__udivmoddi4+0x2a6>
1a00494e:	428b      	cmp	r3, r1
1a004950:	d915      	bls.n	1a00497e <__udivmoddi4+0x2a6>
1a004952:	3802      	subs	r0, #2
1a004954:	4429      	add	r1, r5
1a004956:	1ac9      	subs	r1, r1, r3
1a004958:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00495c:	e73b      	b.n	1a0047d6 <__udivmoddi4+0xfe>
1a00495e:	4637      	mov	r7, r6
1a004960:	4630      	mov	r0, r6
1a004962:	e709      	b.n	1a004778 <__udivmoddi4+0xa0>
1a004964:	4607      	mov	r7, r0
1a004966:	e6e7      	b.n	1a004738 <__udivmoddi4+0x60>
1a004968:	4618      	mov	r0, r3
1a00496a:	e6fb      	b.n	1a004764 <__udivmoddi4+0x8c>
1a00496c:	4541      	cmp	r1, r8
1a00496e:	d2ab      	bcs.n	1a0048c8 <__udivmoddi4+0x1f0>
1a004970:	ebb8 0a02 	subs.w	sl, r8, r2
1a004974:	eb69 020e 	sbc.w	r2, r9, lr
1a004978:	3801      	subs	r0, #1
1a00497a:	4613      	mov	r3, r2
1a00497c:	e7a4      	b.n	1a0048c8 <__udivmoddi4+0x1f0>
1a00497e:	4660      	mov	r0, ip
1a004980:	e7e9      	b.n	1a004956 <__udivmoddi4+0x27e>
1a004982:	4618      	mov	r0, r3
1a004984:	e795      	b.n	1a0048b2 <__udivmoddi4+0x1da>
1a004986:	4667      	mov	r7, ip
1a004988:	e7d1      	b.n	1a00492e <__udivmoddi4+0x256>
1a00498a:	4681      	mov	r9, r0
1a00498c:	e77c      	b.n	1a004888 <__udivmoddi4+0x1b0>
1a00498e:	3802      	subs	r0, #2
1a004990:	442c      	add	r4, r5
1a004992:	e747      	b.n	1a004824 <__udivmoddi4+0x14c>
1a004994:	f1ac 0c02 	sub.w	ip, ip, #2
1a004998:	442b      	add	r3, r5
1a00499a:	e72f      	b.n	1a0047fc <__udivmoddi4+0x124>
1a00499c:	4638      	mov	r0, r7
1a00499e:	e708      	b.n	1a0047b2 <__udivmoddi4+0xda>
1a0049a0:	4637      	mov	r7, r6
1a0049a2:	e6e9      	b.n	1a004778 <__udivmoddi4+0xa0>

1a0049a4 <__aeabi_idiv0>:
1a0049a4:	4770      	bx	lr
1a0049a6:	bf00      	nop

1a0049a8 <__sflush_r>:
1a0049a8:	898a      	ldrh	r2, [r1, #12]
1a0049aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0049ae:	4605      	mov	r5, r0
1a0049b0:	0710      	lsls	r0, r2, #28
1a0049b2:	460c      	mov	r4, r1
1a0049b4:	d458      	bmi.n	1a004a68 <__sflush_r+0xc0>
1a0049b6:	684b      	ldr	r3, [r1, #4]
1a0049b8:	2b00      	cmp	r3, #0
1a0049ba:	dc05      	bgt.n	1a0049c8 <__sflush_r+0x20>
1a0049bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a0049be:	2b00      	cmp	r3, #0
1a0049c0:	dc02      	bgt.n	1a0049c8 <__sflush_r+0x20>
1a0049c2:	2000      	movs	r0, #0
1a0049c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0049c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0049ca:	2e00      	cmp	r6, #0
1a0049cc:	d0f9      	beq.n	1a0049c2 <__sflush_r+0x1a>
1a0049ce:	2300      	movs	r3, #0
1a0049d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0049d4:	682f      	ldr	r7, [r5, #0]
1a0049d6:	6a21      	ldr	r1, [r4, #32]
1a0049d8:	602b      	str	r3, [r5, #0]
1a0049da:	d032      	beq.n	1a004a42 <__sflush_r+0x9a>
1a0049dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0049de:	89a3      	ldrh	r3, [r4, #12]
1a0049e0:	075a      	lsls	r2, r3, #29
1a0049e2:	d505      	bpl.n	1a0049f0 <__sflush_r+0x48>
1a0049e4:	6863      	ldr	r3, [r4, #4]
1a0049e6:	1ac0      	subs	r0, r0, r3
1a0049e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0049ea:	b10b      	cbz	r3, 1a0049f0 <__sflush_r+0x48>
1a0049ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0049ee:	1ac0      	subs	r0, r0, r3
1a0049f0:	2300      	movs	r3, #0
1a0049f2:	4602      	mov	r2, r0
1a0049f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0049f6:	6a21      	ldr	r1, [r4, #32]
1a0049f8:	4628      	mov	r0, r5
1a0049fa:	47b0      	blx	r6
1a0049fc:	1c43      	adds	r3, r0, #1
1a0049fe:	89a3      	ldrh	r3, [r4, #12]
1a004a00:	d106      	bne.n	1a004a10 <__sflush_r+0x68>
1a004a02:	6829      	ldr	r1, [r5, #0]
1a004a04:	291d      	cmp	r1, #29
1a004a06:	d848      	bhi.n	1a004a9a <__sflush_r+0xf2>
1a004a08:	4a29      	ldr	r2, [pc, #164]	; (1a004ab0 <__sflush_r+0x108>)
1a004a0a:	40ca      	lsrs	r2, r1
1a004a0c:	07d6      	lsls	r6, r2, #31
1a004a0e:	d544      	bpl.n	1a004a9a <__sflush_r+0xf2>
1a004a10:	2200      	movs	r2, #0
1a004a12:	6062      	str	r2, [r4, #4]
1a004a14:	04d9      	lsls	r1, r3, #19
1a004a16:	6922      	ldr	r2, [r4, #16]
1a004a18:	6022      	str	r2, [r4, #0]
1a004a1a:	d504      	bpl.n	1a004a26 <__sflush_r+0x7e>
1a004a1c:	1c42      	adds	r2, r0, #1
1a004a1e:	d101      	bne.n	1a004a24 <__sflush_r+0x7c>
1a004a20:	682b      	ldr	r3, [r5, #0]
1a004a22:	b903      	cbnz	r3, 1a004a26 <__sflush_r+0x7e>
1a004a24:	6560      	str	r0, [r4, #84]	; 0x54
1a004a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004a28:	602f      	str	r7, [r5, #0]
1a004a2a:	2900      	cmp	r1, #0
1a004a2c:	d0c9      	beq.n	1a0049c2 <__sflush_r+0x1a>
1a004a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004a32:	4299      	cmp	r1, r3
1a004a34:	d002      	beq.n	1a004a3c <__sflush_r+0x94>
1a004a36:	4628      	mov	r0, r5
1a004a38:	f000 f968 	bl	1a004d0c <_free_r>
1a004a3c:	2000      	movs	r0, #0
1a004a3e:	6360      	str	r0, [r4, #52]	; 0x34
1a004a40:	e7c0      	b.n	1a0049c4 <__sflush_r+0x1c>
1a004a42:	2301      	movs	r3, #1
1a004a44:	4628      	mov	r0, r5
1a004a46:	47b0      	blx	r6
1a004a48:	1c41      	adds	r1, r0, #1
1a004a4a:	d1c8      	bne.n	1a0049de <__sflush_r+0x36>
1a004a4c:	682b      	ldr	r3, [r5, #0]
1a004a4e:	2b00      	cmp	r3, #0
1a004a50:	d0c5      	beq.n	1a0049de <__sflush_r+0x36>
1a004a52:	2b1d      	cmp	r3, #29
1a004a54:	d001      	beq.n	1a004a5a <__sflush_r+0xb2>
1a004a56:	2b16      	cmp	r3, #22
1a004a58:	d101      	bne.n	1a004a5e <__sflush_r+0xb6>
1a004a5a:	602f      	str	r7, [r5, #0]
1a004a5c:	e7b1      	b.n	1a0049c2 <__sflush_r+0x1a>
1a004a5e:	89a3      	ldrh	r3, [r4, #12]
1a004a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004a64:	81a3      	strh	r3, [r4, #12]
1a004a66:	e7ad      	b.n	1a0049c4 <__sflush_r+0x1c>
1a004a68:	690f      	ldr	r7, [r1, #16]
1a004a6a:	2f00      	cmp	r7, #0
1a004a6c:	d0a9      	beq.n	1a0049c2 <__sflush_r+0x1a>
1a004a6e:	0793      	lsls	r3, r2, #30
1a004a70:	680e      	ldr	r6, [r1, #0]
1a004a72:	bf08      	it	eq
1a004a74:	694b      	ldreq	r3, [r1, #20]
1a004a76:	600f      	str	r7, [r1, #0]
1a004a78:	bf18      	it	ne
1a004a7a:	2300      	movne	r3, #0
1a004a7c:	eba6 0807 	sub.w	r8, r6, r7
1a004a80:	608b      	str	r3, [r1, #8]
1a004a82:	f1b8 0f00 	cmp.w	r8, #0
1a004a86:	dd9c      	ble.n	1a0049c2 <__sflush_r+0x1a>
1a004a88:	4643      	mov	r3, r8
1a004a8a:	463a      	mov	r2, r7
1a004a8c:	6a21      	ldr	r1, [r4, #32]
1a004a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004a90:	4628      	mov	r0, r5
1a004a92:	47b0      	blx	r6
1a004a94:	2800      	cmp	r0, #0
1a004a96:	dc06      	bgt.n	1a004aa6 <__sflush_r+0xfe>
1a004a98:	89a3      	ldrh	r3, [r4, #12]
1a004a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004a9e:	81a3      	strh	r3, [r4, #12]
1a004aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004aa4:	e78e      	b.n	1a0049c4 <__sflush_r+0x1c>
1a004aa6:	4407      	add	r7, r0
1a004aa8:	eba8 0800 	sub.w	r8, r8, r0
1a004aac:	e7e9      	b.n	1a004a82 <__sflush_r+0xda>
1a004aae:	bf00      	nop
1a004ab0:	20400001 	.word	0x20400001

1a004ab4 <_fflush_r>:
1a004ab4:	b538      	push	{r3, r4, r5, lr}
1a004ab6:	690b      	ldr	r3, [r1, #16]
1a004ab8:	4605      	mov	r5, r0
1a004aba:	460c      	mov	r4, r1
1a004abc:	b1db      	cbz	r3, 1a004af6 <_fflush_r+0x42>
1a004abe:	b118      	cbz	r0, 1a004ac8 <_fflush_r+0x14>
1a004ac0:	6983      	ldr	r3, [r0, #24]
1a004ac2:	b90b      	cbnz	r3, 1a004ac8 <_fflush_r+0x14>
1a004ac4:	f000 f860 	bl	1a004b88 <__sinit>
1a004ac8:	4b0c      	ldr	r3, [pc, #48]	; (1a004afc <_fflush_r+0x48>)
1a004aca:	429c      	cmp	r4, r3
1a004acc:	d109      	bne.n	1a004ae2 <_fflush_r+0x2e>
1a004ace:	686c      	ldr	r4, [r5, #4]
1a004ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004ad4:	b17b      	cbz	r3, 1a004af6 <_fflush_r+0x42>
1a004ad6:	4621      	mov	r1, r4
1a004ad8:	4628      	mov	r0, r5
1a004ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004ade:	f7ff bf63 	b.w	1a0049a8 <__sflush_r>
1a004ae2:	4b07      	ldr	r3, [pc, #28]	; (1a004b00 <_fflush_r+0x4c>)
1a004ae4:	429c      	cmp	r4, r3
1a004ae6:	d101      	bne.n	1a004aec <_fflush_r+0x38>
1a004ae8:	68ac      	ldr	r4, [r5, #8]
1a004aea:	e7f1      	b.n	1a004ad0 <_fflush_r+0x1c>
1a004aec:	4b05      	ldr	r3, [pc, #20]	; (1a004b04 <_fflush_r+0x50>)
1a004aee:	429c      	cmp	r4, r3
1a004af0:	bf08      	it	eq
1a004af2:	68ec      	ldreq	r4, [r5, #12]
1a004af4:	e7ec      	b.n	1a004ad0 <_fflush_r+0x1c>
1a004af6:	2000      	movs	r0, #0
1a004af8:	bd38      	pop	{r3, r4, r5, pc}
1a004afa:	bf00      	nop
1a004afc:	1a005624 	.word	0x1a005624
1a004b00:	1a005644 	.word	0x1a005644
1a004b04:	1a005604 	.word	0x1a005604

1a004b08 <std>:
1a004b08:	2300      	movs	r3, #0
1a004b0a:	b510      	push	{r4, lr}
1a004b0c:	4604      	mov	r4, r0
1a004b0e:	e9c0 3300 	strd	r3, r3, [r0]
1a004b12:	6083      	str	r3, [r0, #8]
1a004b14:	8181      	strh	r1, [r0, #12]
1a004b16:	6643      	str	r3, [r0, #100]	; 0x64
1a004b18:	81c2      	strh	r2, [r0, #14]
1a004b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004b1e:	6183      	str	r3, [r0, #24]
1a004b20:	4619      	mov	r1, r3
1a004b22:	2208      	movs	r2, #8
1a004b24:	305c      	adds	r0, #92	; 0x5c
1a004b26:	f000 f8e8 	bl	1a004cfa <memset>
1a004b2a:	4b05      	ldr	r3, [pc, #20]	; (1a004b40 <std+0x38>)
1a004b2c:	6263      	str	r3, [r4, #36]	; 0x24
1a004b2e:	4b05      	ldr	r3, [pc, #20]	; (1a004b44 <std+0x3c>)
1a004b30:	62a3      	str	r3, [r4, #40]	; 0x28
1a004b32:	4b05      	ldr	r3, [pc, #20]	; (1a004b48 <std+0x40>)
1a004b34:	62e3      	str	r3, [r4, #44]	; 0x2c
1a004b36:	4b05      	ldr	r3, [pc, #20]	; (1a004b4c <std+0x44>)
1a004b38:	6224      	str	r4, [r4, #32]
1a004b3a:	6323      	str	r3, [r4, #48]	; 0x30
1a004b3c:	bd10      	pop	{r4, pc}
1a004b3e:	bf00      	nop
1a004b40:	1a004f25 	.word	0x1a004f25
1a004b44:	1a004f47 	.word	0x1a004f47
1a004b48:	1a004f7f 	.word	0x1a004f7f
1a004b4c:	1a004fa3 	.word	0x1a004fa3

1a004b50 <_cleanup_r>:
1a004b50:	4901      	ldr	r1, [pc, #4]	; (1a004b58 <_cleanup_r+0x8>)
1a004b52:	f000 b885 	b.w	1a004c60 <_fwalk_reent>
1a004b56:	bf00      	nop
1a004b58:	1a004ab5 	.word	0x1a004ab5

1a004b5c <__sfmoreglue>:
1a004b5c:	b570      	push	{r4, r5, r6, lr}
1a004b5e:	1e4a      	subs	r2, r1, #1
1a004b60:	2568      	movs	r5, #104	; 0x68
1a004b62:	4355      	muls	r5, r2
1a004b64:	460e      	mov	r6, r1
1a004b66:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004b6a:	f000 f91d 	bl	1a004da8 <_malloc_r>
1a004b6e:	4604      	mov	r4, r0
1a004b70:	b140      	cbz	r0, 1a004b84 <__sfmoreglue+0x28>
1a004b72:	2100      	movs	r1, #0
1a004b74:	e9c0 1600 	strd	r1, r6, [r0]
1a004b78:	300c      	adds	r0, #12
1a004b7a:	60a0      	str	r0, [r4, #8]
1a004b7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004b80:	f000 f8bb 	bl	1a004cfa <memset>
1a004b84:	4620      	mov	r0, r4
1a004b86:	bd70      	pop	{r4, r5, r6, pc}

1a004b88 <__sinit>:
1a004b88:	6983      	ldr	r3, [r0, #24]
1a004b8a:	b510      	push	{r4, lr}
1a004b8c:	4604      	mov	r4, r0
1a004b8e:	bb33      	cbnz	r3, 1a004bde <__sinit+0x56>
1a004b90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a004b94:	6503      	str	r3, [r0, #80]	; 0x50
1a004b96:	4b12      	ldr	r3, [pc, #72]	; (1a004be0 <__sinit+0x58>)
1a004b98:	4a12      	ldr	r2, [pc, #72]	; (1a004be4 <__sinit+0x5c>)
1a004b9a:	681b      	ldr	r3, [r3, #0]
1a004b9c:	6282      	str	r2, [r0, #40]	; 0x28
1a004b9e:	4298      	cmp	r0, r3
1a004ba0:	bf04      	itt	eq
1a004ba2:	2301      	moveq	r3, #1
1a004ba4:	6183      	streq	r3, [r0, #24]
1a004ba6:	f000 f81f 	bl	1a004be8 <__sfp>
1a004baa:	6060      	str	r0, [r4, #4]
1a004bac:	4620      	mov	r0, r4
1a004bae:	f000 f81b 	bl	1a004be8 <__sfp>
1a004bb2:	60a0      	str	r0, [r4, #8]
1a004bb4:	4620      	mov	r0, r4
1a004bb6:	f000 f817 	bl	1a004be8 <__sfp>
1a004bba:	2200      	movs	r2, #0
1a004bbc:	60e0      	str	r0, [r4, #12]
1a004bbe:	2104      	movs	r1, #4
1a004bc0:	6860      	ldr	r0, [r4, #4]
1a004bc2:	f7ff ffa1 	bl	1a004b08 <std>
1a004bc6:	2201      	movs	r2, #1
1a004bc8:	2109      	movs	r1, #9
1a004bca:	68a0      	ldr	r0, [r4, #8]
1a004bcc:	f7ff ff9c 	bl	1a004b08 <std>
1a004bd0:	2202      	movs	r2, #2
1a004bd2:	2112      	movs	r1, #18
1a004bd4:	68e0      	ldr	r0, [r4, #12]
1a004bd6:	f7ff ff97 	bl	1a004b08 <std>
1a004bda:	2301      	movs	r3, #1
1a004bdc:	61a3      	str	r3, [r4, #24]
1a004bde:	bd10      	pop	{r4, pc}
1a004be0:	1a005664 	.word	0x1a005664
1a004be4:	1a004b51 	.word	0x1a004b51

1a004be8 <__sfp>:
1a004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004bea:	4b1b      	ldr	r3, [pc, #108]	; (1a004c58 <__sfp+0x70>)
1a004bec:	681e      	ldr	r6, [r3, #0]
1a004bee:	69b3      	ldr	r3, [r6, #24]
1a004bf0:	4607      	mov	r7, r0
1a004bf2:	b913      	cbnz	r3, 1a004bfa <__sfp+0x12>
1a004bf4:	4630      	mov	r0, r6
1a004bf6:	f7ff ffc7 	bl	1a004b88 <__sinit>
1a004bfa:	3648      	adds	r6, #72	; 0x48
1a004bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a004c00:	3b01      	subs	r3, #1
1a004c02:	d503      	bpl.n	1a004c0c <__sfp+0x24>
1a004c04:	6833      	ldr	r3, [r6, #0]
1a004c06:	b133      	cbz	r3, 1a004c16 <__sfp+0x2e>
1a004c08:	6836      	ldr	r6, [r6, #0]
1a004c0a:	e7f7      	b.n	1a004bfc <__sfp+0x14>
1a004c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a004c10:	b16d      	cbz	r5, 1a004c2e <__sfp+0x46>
1a004c12:	3468      	adds	r4, #104	; 0x68
1a004c14:	e7f4      	b.n	1a004c00 <__sfp+0x18>
1a004c16:	2104      	movs	r1, #4
1a004c18:	4638      	mov	r0, r7
1a004c1a:	f7ff ff9f 	bl	1a004b5c <__sfmoreglue>
1a004c1e:	6030      	str	r0, [r6, #0]
1a004c20:	2800      	cmp	r0, #0
1a004c22:	d1f1      	bne.n	1a004c08 <__sfp+0x20>
1a004c24:	230c      	movs	r3, #12
1a004c26:	603b      	str	r3, [r7, #0]
1a004c28:	4604      	mov	r4, r0
1a004c2a:	4620      	mov	r0, r4
1a004c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004c2e:	4b0b      	ldr	r3, [pc, #44]	; (1a004c5c <__sfp+0x74>)
1a004c30:	6665      	str	r5, [r4, #100]	; 0x64
1a004c32:	e9c4 5500 	strd	r5, r5, [r4]
1a004c36:	60a5      	str	r5, [r4, #8]
1a004c38:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a004c3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a004c40:	2208      	movs	r2, #8
1a004c42:	4629      	mov	r1, r5
1a004c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004c48:	f000 f857 	bl	1a004cfa <memset>
1a004c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a004c54:	e7e9      	b.n	1a004c2a <__sfp+0x42>
1a004c56:	bf00      	nop
1a004c58:	1a005664 	.word	0x1a005664
1a004c5c:	ffff0001 	.word	0xffff0001

1a004c60 <_fwalk_reent>:
1a004c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004c64:	4680      	mov	r8, r0
1a004c66:	4689      	mov	r9, r1
1a004c68:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004c6c:	2600      	movs	r6, #0
1a004c6e:	b914      	cbnz	r4, 1a004c76 <_fwalk_reent+0x16>
1a004c70:	4630      	mov	r0, r6
1a004c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004c76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004c7a:	3f01      	subs	r7, #1
1a004c7c:	d501      	bpl.n	1a004c82 <_fwalk_reent+0x22>
1a004c7e:	6824      	ldr	r4, [r4, #0]
1a004c80:	e7f5      	b.n	1a004c6e <_fwalk_reent+0xe>
1a004c82:	89ab      	ldrh	r3, [r5, #12]
1a004c84:	2b01      	cmp	r3, #1
1a004c86:	d907      	bls.n	1a004c98 <_fwalk_reent+0x38>
1a004c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004c8c:	3301      	adds	r3, #1
1a004c8e:	d003      	beq.n	1a004c98 <_fwalk_reent+0x38>
1a004c90:	4629      	mov	r1, r5
1a004c92:	4640      	mov	r0, r8
1a004c94:	47c8      	blx	r9
1a004c96:	4306      	orrs	r6, r0
1a004c98:	3568      	adds	r5, #104	; 0x68
1a004c9a:	e7ee      	b.n	1a004c7a <_fwalk_reent+0x1a>

1a004c9c <__libc_init_array>:
1a004c9c:	b570      	push	{r4, r5, r6, lr}
1a004c9e:	4e0d      	ldr	r6, [pc, #52]	; (1a004cd4 <__libc_init_array+0x38>)
1a004ca0:	4c0d      	ldr	r4, [pc, #52]	; (1a004cd8 <__libc_init_array+0x3c>)
1a004ca2:	1ba4      	subs	r4, r4, r6
1a004ca4:	10a4      	asrs	r4, r4, #2
1a004ca6:	2500      	movs	r5, #0
1a004ca8:	42a5      	cmp	r5, r4
1a004caa:	d109      	bne.n	1a004cc0 <__libc_init_array+0x24>
1a004cac:	4e0b      	ldr	r6, [pc, #44]	; (1a004cdc <__libc_init_array+0x40>)
1a004cae:	4c0c      	ldr	r4, [pc, #48]	; (1a004ce0 <__libc_init_array+0x44>)
1a004cb0:	f7fc f959 	bl	1a000f66 <_init>
1a004cb4:	1ba4      	subs	r4, r4, r6
1a004cb6:	10a4      	asrs	r4, r4, #2
1a004cb8:	2500      	movs	r5, #0
1a004cba:	42a5      	cmp	r5, r4
1a004cbc:	d105      	bne.n	1a004cca <__libc_init_array+0x2e>
1a004cbe:	bd70      	pop	{r4, r5, r6, pc}
1a004cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004cc4:	4798      	blx	r3
1a004cc6:	3501      	adds	r5, #1
1a004cc8:	e7ee      	b.n	1a004ca8 <__libc_init_array+0xc>
1a004cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004cce:	4798      	blx	r3
1a004cd0:	3501      	adds	r5, #1
1a004cd2:	e7f2      	b.n	1a004cba <__libc_init_array+0x1e>
1a004cd4:	1a005668 	.word	0x1a005668
1a004cd8:	1a005668 	.word	0x1a005668
1a004cdc:	1a005668 	.word	0x1a005668
1a004ce0:	1a00566c 	.word	0x1a00566c

1a004ce4 <memcpy>:
1a004ce4:	b510      	push	{r4, lr}
1a004ce6:	1e43      	subs	r3, r0, #1
1a004ce8:	440a      	add	r2, r1
1a004cea:	4291      	cmp	r1, r2
1a004cec:	d100      	bne.n	1a004cf0 <memcpy+0xc>
1a004cee:	bd10      	pop	{r4, pc}
1a004cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004cf4:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004cf8:	e7f7      	b.n	1a004cea <memcpy+0x6>

1a004cfa <memset>:
1a004cfa:	4402      	add	r2, r0
1a004cfc:	4603      	mov	r3, r0
1a004cfe:	4293      	cmp	r3, r2
1a004d00:	d100      	bne.n	1a004d04 <memset+0xa>
1a004d02:	4770      	bx	lr
1a004d04:	f803 1b01 	strb.w	r1, [r3], #1
1a004d08:	e7f9      	b.n	1a004cfe <memset+0x4>
1a004d0a:	Address 0x000000001a004d0a is out of bounds.


1a004d0c <_free_r>:
1a004d0c:	b538      	push	{r3, r4, r5, lr}
1a004d0e:	4605      	mov	r5, r0
1a004d10:	2900      	cmp	r1, #0
1a004d12:	d045      	beq.n	1a004da0 <_free_r+0x94>
1a004d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004d18:	1f0c      	subs	r4, r1, #4
1a004d1a:	2b00      	cmp	r3, #0
1a004d1c:	bfb8      	it	lt
1a004d1e:	18e4      	addlt	r4, r4, r3
1a004d20:	f000 fa68 	bl	1a0051f4 <__malloc_lock>
1a004d24:	4a1f      	ldr	r2, [pc, #124]	; (1a004da4 <_free_r+0x98>)
1a004d26:	6813      	ldr	r3, [r2, #0]
1a004d28:	4610      	mov	r0, r2
1a004d2a:	b933      	cbnz	r3, 1a004d3a <_free_r+0x2e>
1a004d2c:	6063      	str	r3, [r4, #4]
1a004d2e:	6014      	str	r4, [r2, #0]
1a004d30:	4628      	mov	r0, r5
1a004d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004d36:	f000 ba5e 	b.w	1a0051f6 <__malloc_unlock>
1a004d3a:	42a3      	cmp	r3, r4
1a004d3c:	d90c      	bls.n	1a004d58 <_free_r+0x4c>
1a004d3e:	6821      	ldr	r1, [r4, #0]
1a004d40:	1862      	adds	r2, r4, r1
1a004d42:	4293      	cmp	r3, r2
1a004d44:	bf04      	itt	eq
1a004d46:	681a      	ldreq	r2, [r3, #0]
1a004d48:	685b      	ldreq	r3, [r3, #4]
1a004d4a:	6063      	str	r3, [r4, #4]
1a004d4c:	bf04      	itt	eq
1a004d4e:	1852      	addeq	r2, r2, r1
1a004d50:	6022      	streq	r2, [r4, #0]
1a004d52:	6004      	str	r4, [r0, #0]
1a004d54:	e7ec      	b.n	1a004d30 <_free_r+0x24>
1a004d56:	4613      	mov	r3, r2
1a004d58:	685a      	ldr	r2, [r3, #4]
1a004d5a:	b10a      	cbz	r2, 1a004d60 <_free_r+0x54>
1a004d5c:	42a2      	cmp	r2, r4
1a004d5e:	d9fa      	bls.n	1a004d56 <_free_r+0x4a>
1a004d60:	6819      	ldr	r1, [r3, #0]
1a004d62:	1858      	adds	r0, r3, r1
1a004d64:	42a0      	cmp	r0, r4
1a004d66:	d10b      	bne.n	1a004d80 <_free_r+0x74>
1a004d68:	6820      	ldr	r0, [r4, #0]
1a004d6a:	4401      	add	r1, r0
1a004d6c:	1858      	adds	r0, r3, r1
1a004d6e:	4282      	cmp	r2, r0
1a004d70:	6019      	str	r1, [r3, #0]
1a004d72:	d1dd      	bne.n	1a004d30 <_free_r+0x24>
1a004d74:	6810      	ldr	r0, [r2, #0]
1a004d76:	6852      	ldr	r2, [r2, #4]
1a004d78:	605a      	str	r2, [r3, #4]
1a004d7a:	4401      	add	r1, r0
1a004d7c:	6019      	str	r1, [r3, #0]
1a004d7e:	e7d7      	b.n	1a004d30 <_free_r+0x24>
1a004d80:	d902      	bls.n	1a004d88 <_free_r+0x7c>
1a004d82:	230c      	movs	r3, #12
1a004d84:	602b      	str	r3, [r5, #0]
1a004d86:	e7d3      	b.n	1a004d30 <_free_r+0x24>
1a004d88:	6820      	ldr	r0, [r4, #0]
1a004d8a:	1821      	adds	r1, r4, r0
1a004d8c:	428a      	cmp	r2, r1
1a004d8e:	bf04      	itt	eq
1a004d90:	6811      	ldreq	r1, [r2, #0]
1a004d92:	6852      	ldreq	r2, [r2, #4]
1a004d94:	6062      	str	r2, [r4, #4]
1a004d96:	bf04      	itt	eq
1a004d98:	1809      	addeq	r1, r1, r0
1a004d9a:	6021      	streq	r1, [r4, #0]
1a004d9c:	605c      	str	r4, [r3, #4]
1a004d9e:	e7c7      	b.n	1a004d30 <_free_r+0x24>
1a004da0:	bd38      	pop	{r3, r4, r5, pc}
1a004da2:	bf00      	nop
1a004da4:	10002bb0 	.word	0x10002bb0

1a004da8 <_malloc_r>:
1a004da8:	b570      	push	{r4, r5, r6, lr}
1a004daa:	1ccd      	adds	r5, r1, #3
1a004dac:	f025 0503 	bic.w	r5, r5, #3
1a004db0:	3508      	adds	r5, #8
1a004db2:	2d0c      	cmp	r5, #12
1a004db4:	bf38      	it	cc
1a004db6:	250c      	movcc	r5, #12
1a004db8:	2d00      	cmp	r5, #0
1a004dba:	4606      	mov	r6, r0
1a004dbc:	db01      	blt.n	1a004dc2 <_malloc_r+0x1a>
1a004dbe:	42a9      	cmp	r1, r5
1a004dc0:	d903      	bls.n	1a004dca <_malloc_r+0x22>
1a004dc2:	230c      	movs	r3, #12
1a004dc4:	6033      	str	r3, [r6, #0]
1a004dc6:	2000      	movs	r0, #0
1a004dc8:	bd70      	pop	{r4, r5, r6, pc}
1a004dca:	f000 fa13 	bl	1a0051f4 <__malloc_lock>
1a004dce:	4a21      	ldr	r2, [pc, #132]	; (1a004e54 <_malloc_r+0xac>)
1a004dd0:	6814      	ldr	r4, [r2, #0]
1a004dd2:	4621      	mov	r1, r4
1a004dd4:	b991      	cbnz	r1, 1a004dfc <_malloc_r+0x54>
1a004dd6:	4c20      	ldr	r4, [pc, #128]	; (1a004e58 <_malloc_r+0xb0>)
1a004dd8:	6823      	ldr	r3, [r4, #0]
1a004dda:	b91b      	cbnz	r3, 1a004de4 <_malloc_r+0x3c>
1a004ddc:	4630      	mov	r0, r6
1a004dde:	f7fc f917 	bl	1a001010 <_sbrk_r>
1a004de2:	6020      	str	r0, [r4, #0]
1a004de4:	4629      	mov	r1, r5
1a004de6:	4630      	mov	r0, r6
1a004de8:	f7fc f912 	bl	1a001010 <_sbrk_r>
1a004dec:	1c43      	adds	r3, r0, #1
1a004dee:	d124      	bne.n	1a004e3a <_malloc_r+0x92>
1a004df0:	230c      	movs	r3, #12
1a004df2:	6033      	str	r3, [r6, #0]
1a004df4:	4630      	mov	r0, r6
1a004df6:	f000 f9fe 	bl	1a0051f6 <__malloc_unlock>
1a004dfa:	e7e4      	b.n	1a004dc6 <_malloc_r+0x1e>
1a004dfc:	680b      	ldr	r3, [r1, #0]
1a004dfe:	1b5b      	subs	r3, r3, r5
1a004e00:	d418      	bmi.n	1a004e34 <_malloc_r+0x8c>
1a004e02:	2b0b      	cmp	r3, #11
1a004e04:	d90f      	bls.n	1a004e26 <_malloc_r+0x7e>
1a004e06:	600b      	str	r3, [r1, #0]
1a004e08:	50cd      	str	r5, [r1, r3]
1a004e0a:	18cc      	adds	r4, r1, r3
1a004e0c:	4630      	mov	r0, r6
1a004e0e:	f000 f9f2 	bl	1a0051f6 <__malloc_unlock>
1a004e12:	f104 000b 	add.w	r0, r4, #11
1a004e16:	1d23      	adds	r3, r4, #4
1a004e18:	f020 0007 	bic.w	r0, r0, #7
1a004e1c:	1ac3      	subs	r3, r0, r3
1a004e1e:	d0d3      	beq.n	1a004dc8 <_malloc_r+0x20>
1a004e20:	425a      	negs	r2, r3
1a004e22:	50e2      	str	r2, [r4, r3]
1a004e24:	e7d0      	b.n	1a004dc8 <_malloc_r+0x20>
1a004e26:	428c      	cmp	r4, r1
1a004e28:	684b      	ldr	r3, [r1, #4]
1a004e2a:	bf16      	itet	ne
1a004e2c:	6063      	strne	r3, [r4, #4]
1a004e2e:	6013      	streq	r3, [r2, #0]
1a004e30:	460c      	movne	r4, r1
1a004e32:	e7eb      	b.n	1a004e0c <_malloc_r+0x64>
1a004e34:	460c      	mov	r4, r1
1a004e36:	6849      	ldr	r1, [r1, #4]
1a004e38:	e7cc      	b.n	1a004dd4 <_malloc_r+0x2c>
1a004e3a:	1cc4      	adds	r4, r0, #3
1a004e3c:	f024 0403 	bic.w	r4, r4, #3
1a004e40:	42a0      	cmp	r0, r4
1a004e42:	d005      	beq.n	1a004e50 <_malloc_r+0xa8>
1a004e44:	1a21      	subs	r1, r4, r0
1a004e46:	4630      	mov	r0, r6
1a004e48:	f7fc f8e2 	bl	1a001010 <_sbrk_r>
1a004e4c:	3001      	adds	r0, #1
1a004e4e:	d0cf      	beq.n	1a004df0 <_malloc_r+0x48>
1a004e50:	6025      	str	r5, [r4, #0]
1a004e52:	e7db      	b.n	1a004e0c <_malloc_r+0x64>
1a004e54:	10002bb0 	.word	0x10002bb0
1a004e58:	10002bb4 	.word	0x10002bb4

1a004e5c <_puts_r>:
1a004e5c:	b570      	push	{r4, r5, r6, lr}
1a004e5e:	460e      	mov	r6, r1
1a004e60:	4605      	mov	r5, r0
1a004e62:	b118      	cbz	r0, 1a004e6c <_puts_r+0x10>
1a004e64:	6983      	ldr	r3, [r0, #24]
1a004e66:	b90b      	cbnz	r3, 1a004e6c <_puts_r+0x10>
1a004e68:	f7ff fe8e 	bl	1a004b88 <__sinit>
1a004e6c:	69ab      	ldr	r3, [r5, #24]
1a004e6e:	68ac      	ldr	r4, [r5, #8]
1a004e70:	b913      	cbnz	r3, 1a004e78 <_puts_r+0x1c>
1a004e72:	4628      	mov	r0, r5
1a004e74:	f7ff fe88 	bl	1a004b88 <__sinit>
1a004e78:	4b23      	ldr	r3, [pc, #140]	; (1a004f08 <_puts_r+0xac>)
1a004e7a:	429c      	cmp	r4, r3
1a004e7c:	d117      	bne.n	1a004eae <_puts_r+0x52>
1a004e7e:	686c      	ldr	r4, [r5, #4]
1a004e80:	89a3      	ldrh	r3, [r4, #12]
1a004e82:	071b      	lsls	r3, r3, #28
1a004e84:	d51d      	bpl.n	1a004ec2 <_puts_r+0x66>
1a004e86:	6923      	ldr	r3, [r4, #16]
1a004e88:	b1db      	cbz	r3, 1a004ec2 <_puts_r+0x66>
1a004e8a:	3e01      	subs	r6, #1
1a004e8c:	68a3      	ldr	r3, [r4, #8]
1a004e8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a004e92:	3b01      	subs	r3, #1
1a004e94:	60a3      	str	r3, [r4, #8]
1a004e96:	b9e9      	cbnz	r1, 1a004ed4 <_puts_r+0x78>
1a004e98:	2b00      	cmp	r3, #0
1a004e9a:	da2e      	bge.n	1a004efa <_puts_r+0x9e>
1a004e9c:	4622      	mov	r2, r4
1a004e9e:	210a      	movs	r1, #10
1a004ea0:	4628      	mov	r0, r5
1a004ea2:	f000 f883 	bl	1a004fac <__swbuf_r>
1a004ea6:	3001      	adds	r0, #1
1a004ea8:	d011      	beq.n	1a004ece <_puts_r+0x72>
1a004eaa:	200a      	movs	r0, #10
1a004eac:	e011      	b.n	1a004ed2 <_puts_r+0x76>
1a004eae:	4b17      	ldr	r3, [pc, #92]	; (1a004f0c <_puts_r+0xb0>)
1a004eb0:	429c      	cmp	r4, r3
1a004eb2:	d101      	bne.n	1a004eb8 <_puts_r+0x5c>
1a004eb4:	68ac      	ldr	r4, [r5, #8]
1a004eb6:	e7e3      	b.n	1a004e80 <_puts_r+0x24>
1a004eb8:	4b15      	ldr	r3, [pc, #84]	; (1a004f10 <_puts_r+0xb4>)
1a004eba:	429c      	cmp	r4, r3
1a004ebc:	bf08      	it	eq
1a004ebe:	68ec      	ldreq	r4, [r5, #12]
1a004ec0:	e7de      	b.n	1a004e80 <_puts_r+0x24>
1a004ec2:	4621      	mov	r1, r4
1a004ec4:	4628      	mov	r0, r5
1a004ec6:	f000 f8c3 	bl	1a005050 <__swsetup_r>
1a004eca:	2800      	cmp	r0, #0
1a004ecc:	d0dd      	beq.n	1a004e8a <_puts_r+0x2e>
1a004ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004ed2:	bd70      	pop	{r4, r5, r6, pc}
1a004ed4:	2b00      	cmp	r3, #0
1a004ed6:	da04      	bge.n	1a004ee2 <_puts_r+0x86>
1a004ed8:	69a2      	ldr	r2, [r4, #24]
1a004eda:	429a      	cmp	r2, r3
1a004edc:	dc06      	bgt.n	1a004eec <_puts_r+0x90>
1a004ede:	290a      	cmp	r1, #10
1a004ee0:	d004      	beq.n	1a004eec <_puts_r+0x90>
1a004ee2:	6823      	ldr	r3, [r4, #0]
1a004ee4:	1c5a      	adds	r2, r3, #1
1a004ee6:	6022      	str	r2, [r4, #0]
1a004ee8:	7019      	strb	r1, [r3, #0]
1a004eea:	e7cf      	b.n	1a004e8c <_puts_r+0x30>
1a004eec:	4622      	mov	r2, r4
1a004eee:	4628      	mov	r0, r5
1a004ef0:	f000 f85c 	bl	1a004fac <__swbuf_r>
1a004ef4:	3001      	adds	r0, #1
1a004ef6:	d1c9      	bne.n	1a004e8c <_puts_r+0x30>
1a004ef8:	e7e9      	b.n	1a004ece <_puts_r+0x72>
1a004efa:	6823      	ldr	r3, [r4, #0]
1a004efc:	200a      	movs	r0, #10
1a004efe:	1c5a      	adds	r2, r3, #1
1a004f00:	6022      	str	r2, [r4, #0]
1a004f02:	7018      	strb	r0, [r3, #0]
1a004f04:	e7e5      	b.n	1a004ed2 <_puts_r+0x76>
1a004f06:	bf00      	nop
1a004f08:	1a005624 	.word	0x1a005624
1a004f0c:	1a005644 	.word	0x1a005644
1a004f10:	1a005604 	.word	0x1a005604

1a004f14 <puts>:
1a004f14:	4b02      	ldr	r3, [pc, #8]	; (1a004f20 <puts+0xc>)
1a004f16:	4601      	mov	r1, r0
1a004f18:	6818      	ldr	r0, [r3, #0]
1a004f1a:	f7ff bf9f 	b.w	1a004e5c <_puts_r>
1a004f1e:	bf00      	nop
1a004f20:	10000058 	.word	0x10000058

1a004f24 <__sread>:
1a004f24:	b510      	push	{r4, lr}
1a004f26:	460c      	mov	r4, r1
1a004f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004f2c:	f7fc f834 	bl	1a000f98 <_read_r>
1a004f30:	2800      	cmp	r0, #0
1a004f32:	bfab      	itete	ge
1a004f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a004f36:	89a3      	ldrhlt	r3, [r4, #12]
1a004f38:	181b      	addge	r3, r3, r0
1a004f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004f3e:	bfac      	ite	ge
1a004f40:	6563      	strge	r3, [r4, #84]	; 0x54
1a004f42:	81a3      	strhlt	r3, [r4, #12]
1a004f44:	bd10      	pop	{r4, pc}

1a004f46 <__swrite>:
1a004f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004f4a:	461f      	mov	r7, r3
1a004f4c:	898b      	ldrh	r3, [r1, #12]
1a004f4e:	05db      	lsls	r3, r3, #23
1a004f50:	4605      	mov	r5, r0
1a004f52:	460c      	mov	r4, r1
1a004f54:	4616      	mov	r6, r2
1a004f56:	d505      	bpl.n	1a004f64 <__swrite+0x1e>
1a004f58:	2302      	movs	r3, #2
1a004f5a:	2200      	movs	r2, #0
1a004f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004f60:	f7fc f815 	bl	1a000f8e <_lseek_r>
1a004f64:	89a3      	ldrh	r3, [r4, #12]
1a004f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004f6e:	81a3      	strh	r3, [r4, #12]
1a004f70:	4632      	mov	r2, r6
1a004f72:	463b      	mov	r3, r7
1a004f74:	4628      	mov	r0, r5
1a004f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004f7a:	f7fc b834 	b.w	1a000fe6 <_write_r>

1a004f7e <__sseek>:
1a004f7e:	b510      	push	{r4, lr}
1a004f80:	460c      	mov	r4, r1
1a004f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004f86:	f7fc f802 	bl	1a000f8e <_lseek_r>
1a004f8a:	1c43      	adds	r3, r0, #1
1a004f8c:	89a3      	ldrh	r3, [r4, #12]
1a004f8e:	bf15      	itete	ne
1a004f90:	6560      	strne	r0, [r4, #84]	; 0x54
1a004f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004f9a:	81a3      	strheq	r3, [r4, #12]
1a004f9c:	bf18      	it	ne
1a004f9e:	81a3      	strhne	r3, [r4, #12]
1a004fa0:	bd10      	pop	{r4, pc}

1a004fa2 <__sclose>:
1a004fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004fa6:	f7fb bfdf 	b.w	1a000f68 <_close_r>
1a004faa:	Address 0x000000001a004faa is out of bounds.


1a004fac <__swbuf_r>:
1a004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004fae:	460e      	mov	r6, r1
1a004fb0:	4614      	mov	r4, r2
1a004fb2:	4605      	mov	r5, r0
1a004fb4:	b118      	cbz	r0, 1a004fbe <__swbuf_r+0x12>
1a004fb6:	6983      	ldr	r3, [r0, #24]
1a004fb8:	b90b      	cbnz	r3, 1a004fbe <__swbuf_r+0x12>
1a004fba:	f7ff fde5 	bl	1a004b88 <__sinit>
1a004fbe:	4b21      	ldr	r3, [pc, #132]	; (1a005044 <__swbuf_r+0x98>)
1a004fc0:	429c      	cmp	r4, r3
1a004fc2:	d12a      	bne.n	1a00501a <__swbuf_r+0x6e>
1a004fc4:	686c      	ldr	r4, [r5, #4]
1a004fc6:	69a3      	ldr	r3, [r4, #24]
1a004fc8:	60a3      	str	r3, [r4, #8]
1a004fca:	89a3      	ldrh	r3, [r4, #12]
1a004fcc:	071a      	lsls	r2, r3, #28
1a004fce:	d52e      	bpl.n	1a00502e <__swbuf_r+0x82>
1a004fd0:	6923      	ldr	r3, [r4, #16]
1a004fd2:	b363      	cbz	r3, 1a00502e <__swbuf_r+0x82>
1a004fd4:	6923      	ldr	r3, [r4, #16]
1a004fd6:	6820      	ldr	r0, [r4, #0]
1a004fd8:	1ac0      	subs	r0, r0, r3
1a004fda:	6963      	ldr	r3, [r4, #20]
1a004fdc:	b2f6      	uxtb	r6, r6
1a004fde:	4283      	cmp	r3, r0
1a004fe0:	4637      	mov	r7, r6
1a004fe2:	dc04      	bgt.n	1a004fee <__swbuf_r+0x42>
1a004fe4:	4621      	mov	r1, r4
1a004fe6:	4628      	mov	r0, r5
1a004fe8:	f7ff fd64 	bl	1a004ab4 <_fflush_r>
1a004fec:	bb28      	cbnz	r0, 1a00503a <__swbuf_r+0x8e>
1a004fee:	68a3      	ldr	r3, [r4, #8]
1a004ff0:	3b01      	subs	r3, #1
1a004ff2:	60a3      	str	r3, [r4, #8]
1a004ff4:	6823      	ldr	r3, [r4, #0]
1a004ff6:	1c5a      	adds	r2, r3, #1
1a004ff8:	6022      	str	r2, [r4, #0]
1a004ffa:	701e      	strb	r6, [r3, #0]
1a004ffc:	6963      	ldr	r3, [r4, #20]
1a004ffe:	3001      	adds	r0, #1
1a005000:	4283      	cmp	r3, r0
1a005002:	d004      	beq.n	1a00500e <__swbuf_r+0x62>
1a005004:	89a3      	ldrh	r3, [r4, #12]
1a005006:	07db      	lsls	r3, r3, #31
1a005008:	d519      	bpl.n	1a00503e <__swbuf_r+0x92>
1a00500a:	2e0a      	cmp	r6, #10
1a00500c:	d117      	bne.n	1a00503e <__swbuf_r+0x92>
1a00500e:	4621      	mov	r1, r4
1a005010:	4628      	mov	r0, r5
1a005012:	f7ff fd4f 	bl	1a004ab4 <_fflush_r>
1a005016:	b190      	cbz	r0, 1a00503e <__swbuf_r+0x92>
1a005018:	e00f      	b.n	1a00503a <__swbuf_r+0x8e>
1a00501a:	4b0b      	ldr	r3, [pc, #44]	; (1a005048 <__swbuf_r+0x9c>)
1a00501c:	429c      	cmp	r4, r3
1a00501e:	d101      	bne.n	1a005024 <__swbuf_r+0x78>
1a005020:	68ac      	ldr	r4, [r5, #8]
1a005022:	e7d0      	b.n	1a004fc6 <__swbuf_r+0x1a>
1a005024:	4b09      	ldr	r3, [pc, #36]	; (1a00504c <__swbuf_r+0xa0>)
1a005026:	429c      	cmp	r4, r3
1a005028:	bf08      	it	eq
1a00502a:	68ec      	ldreq	r4, [r5, #12]
1a00502c:	e7cb      	b.n	1a004fc6 <__swbuf_r+0x1a>
1a00502e:	4621      	mov	r1, r4
1a005030:	4628      	mov	r0, r5
1a005032:	f000 f80d 	bl	1a005050 <__swsetup_r>
1a005036:	2800      	cmp	r0, #0
1a005038:	d0cc      	beq.n	1a004fd4 <__swbuf_r+0x28>
1a00503a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00503e:	4638      	mov	r0, r7
1a005040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005042:	bf00      	nop
1a005044:	1a005624 	.word	0x1a005624
1a005048:	1a005644 	.word	0x1a005644
1a00504c:	1a005604 	.word	0x1a005604

1a005050 <__swsetup_r>:
1a005050:	4b32      	ldr	r3, [pc, #200]	; (1a00511c <__swsetup_r+0xcc>)
1a005052:	b570      	push	{r4, r5, r6, lr}
1a005054:	681d      	ldr	r5, [r3, #0]
1a005056:	4606      	mov	r6, r0
1a005058:	460c      	mov	r4, r1
1a00505a:	b125      	cbz	r5, 1a005066 <__swsetup_r+0x16>
1a00505c:	69ab      	ldr	r3, [r5, #24]
1a00505e:	b913      	cbnz	r3, 1a005066 <__swsetup_r+0x16>
1a005060:	4628      	mov	r0, r5
1a005062:	f7ff fd91 	bl	1a004b88 <__sinit>
1a005066:	4b2e      	ldr	r3, [pc, #184]	; (1a005120 <__swsetup_r+0xd0>)
1a005068:	429c      	cmp	r4, r3
1a00506a:	d10f      	bne.n	1a00508c <__swsetup_r+0x3c>
1a00506c:	686c      	ldr	r4, [r5, #4]
1a00506e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005072:	b29a      	uxth	r2, r3
1a005074:	0715      	lsls	r5, r2, #28
1a005076:	d42c      	bmi.n	1a0050d2 <__swsetup_r+0x82>
1a005078:	06d0      	lsls	r0, r2, #27
1a00507a:	d411      	bmi.n	1a0050a0 <__swsetup_r+0x50>
1a00507c:	2209      	movs	r2, #9
1a00507e:	6032      	str	r2, [r6, #0]
1a005080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005084:	81a3      	strh	r3, [r4, #12]
1a005086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00508a:	e03e      	b.n	1a00510a <__swsetup_r+0xba>
1a00508c:	4b25      	ldr	r3, [pc, #148]	; (1a005124 <__swsetup_r+0xd4>)
1a00508e:	429c      	cmp	r4, r3
1a005090:	d101      	bne.n	1a005096 <__swsetup_r+0x46>
1a005092:	68ac      	ldr	r4, [r5, #8]
1a005094:	e7eb      	b.n	1a00506e <__swsetup_r+0x1e>
1a005096:	4b24      	ldr	r3, [pc, #144]	; (1a005128 <__swsetup_r+0xd8>)
1a005098:	429c      	cmp	r4, r3
1a00509a:	bf08      	it	eq
1a00509c:	68ec      	ldreq	r4, [r5, #12]
1a00509e:	e7e6      	b.n	1a00506e <__swsetup_r+0x1e>
1a0050a0:	0751      	lsls	r1, r2, #29
1a0050a2:	d512      	bpl.n	1a0050ca <__swsetup_r+0x7a>
1a0050a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0050a6:	b141      	cbz	r1, 1a0050ba <__swsetup_r+0x6a>
1a0050a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0050ac:	4299      	cmp	r1, r3
1a0050ae:	d002      	beq.n	1a0050b6 <__swsetup_r+0x66>
1a0050b0:	4630      	mov	r0, r6
1a0050b2:	f7ff fe2b 	bl	1a004d0c <_free_r>
1a0050b6:	2300      	movs	r3, #0
1a0050b8:	6363      	str	r3, [r4, #52]	; 0x34
1a0050ba:	89a3      	ldrh	r3, [r4, #12]
1a0050bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0050c0:	81a3      	strh	r3, [r4, #12]
1a0050c2:	2300      	movs	r3, #0
1a0050c4:	6063      	str	r3, [r4, #4]
1a0050c6:	6923      	ldr	r3, [r4, #16]
1a0050c8:	6023      	str	r3, [r4, #0]
1a0050ca:	89a3      	ldrh	r3, [r4, #12]
1a0050cc:	f043 0308 	orr.w	r3, r3, #8
1a0050d0:	81a3      	strh	r3, [r4, #12]
1a0050d2:	6923      	ldr	r3, [r4, #16]
1a0050d4:	b94b      	cbnz	r3, 1a0050ea <__swsetup_r+0x9a>
1a0050d6:	89a3      	ldrh	r3, [r4, #12]
1a0050d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0050dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0050e0:	d003      	beq.n	1a0050ea <__swsetup_r+0x9a>
1a0050e2:	4621      	mov	r1, r4
1a0050e4:	4630      	mov	r0, r6
1a0050e6:	f000 f845 	bl	1a005174 <__smakebuf_r>
1a0050ea:	89a2      	ldrh	r2, [r4, #12]
1a0050ec:	f012 0301 	ands.w	r3, r2, #1
1a0050f0:	d00c      	beq.n	1a00510c <__swsetup_r+0xbc>
1a0050f2:	2300      	movs	r3, #0
1a0050f4:	60a3      	str	r3, [r4, #8]
1a0050f6:	6963      	ldr	r3, [r4, #20]
1a0050f8:	425b      	negs	r3, r3
1a0050fa:	61a3      	str	r3, [r4, #24]
1a0050fc:	6923      	ldr	r3, [r4, #16]
1a0050fe:	b953      	cbnz	r3, 1a005116 <__swsetup_r+0xc6>
1a005100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005104:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a005108:	d1ba      	bne.n	1a005080 <__swsetup_r+0x30>
1a00510a:	bd70      	pop	{r4, r5, r6, pc}
1a00510c:	0792      	lsls	r2, r2, #30
1a00510e:	bf58      	it	pl
1a005110:	6963      	ldrpl	r3, [r4, #20]
1a005112:	60a3      	str	r3, [r4, #8]
1a005114:	e7f2      	b.n	1a0050fc <__swsetup_r+0xac>
1a005116:	2000      	movs	r0, #0
1a005118:	e7f7      	b.n	1a00510a <__swsetup_r+0xba>
1a00511a:	bf00      	nop
1a00511c:	10000058 	.word	0x10000058
1a005120:	1a005624 	.word	0x1a005624
1a005124:	1a005644 	.word	0x1a005644
1a005128:	1a005604 	.word	0x1a005604

1a00512c <__swhatbuf_r>:
1a00512c:	b570      	push	{r4, r5, r6, lr}
1a00512e:	460e      	mov	r6, r1
1a005130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005134:	2900      	cmp	r1, #0
1a005136:	b096      	sub	sp, #88	; 0x58
1a005138:	4614      	mov	r4, r2
1a00513a:	461d      	mov	r5, r3
1a00513c:	da07      	bge.n	1a00514e <__swhatbuf_r+0x22>
1a00513e:	2300      	movs	r3, #0
1a005140:	602b      	str	r3, [r5, #0]
1a005142:	89b3      	ldrh	r3, [r6, #12]
1a005144:	061a      	lsls	r2, r3, #24
1a005146:	d410      	bmi.n	1a00516a <__swhatbuf_r+0x3e>
1a005148:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00514c:	e00e      	b.n	1a00516c <__swhatbuf_r+0x40>
1a00514e:	466a      	mov	r2, sp
1a005150:	f7fb ff0f 	bl	1a000f72 <_fstat_r>
1a005154:	2800      	cmp	r0, #0
1a005156:	dbf2      	blt.n	1a00513e <__swhatbuf_r+0x12>
1a005158:	9a01      	ldr	r2, [sp, #4]
1a00515a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a00515e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a005162:	425a      	negs	r2, r3
1a005164:	415a      	adcs	r2, r3
1a005166:	602a      	str	r2, [r5, #0]
1a005168:	e7ee      	b.n	1a005148 <__swhatbuf_r+0x1c>
1a00516a:	2340      	movs	r3, #64	; 0x40
1a00516c:	2000      	movs	r0, #0
1a00516e:	6023      	str	r3, [r4, #0]
1a005170:	b016      	add	sp, #88	; 0x58
1a005172:	bd70      	pop	{r4, r5, r6, pc}

1a005174 <__smakebuf_r>:
1a005174:	898b      	ldrh	r3, [r1, #12]
1a005176:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a005178:	079d      	lsls	r5, r3, #30
1a00517a:	4606      	mov	r6, r0
1a00517c:	460c      	mov	r4, r1
1a00517e:	d507      	bpl.n	1a005190 <__smakebuf_r+0x1c>
1a005180:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a005184:	6023      	str	r3, [r4, #0]
1a005186:	6123      	str	r3, [r4, #16]
1a005188:	2301      	movs	r3, #1
1a00518a:	6163      	str	r3, [r4, #20]
1a00518c:	b002      	add	sp, #8
1a00518e:	bd70      	pop	{r4, r5, r6, pc}
1a005190:	ab01      	add	r3, sp, #4
1a005192:	466a      	mov	r2, sp
1a005194:	f7ff ffca 	bl	1a00512c <__swhatbuf_r>
1a005198:	9900      	ldr	r1, [sp, #0]
1a00519a:	4605      	mov	r5, r0
1a00519c:	4630      	mov	r0, r6
1a00519e:	f7ff fe03 	bl	1a004da8 <_malloc_r>
1a0051a2:	b948      	cbnz	r0, 1a0051b8 <__smakebuf_r+0x44>
1a0051a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0051a8:	059a      	lsls	r2, r3, #22
1a0051aa:	d4ef      	bmi.n	1a00518c <__smakebuf_r+0x18>
1a0051ac:	f023 0303 	bic.w	r3, r3, #3
1a0051b0:	f043 0302 	orr.w	r3, r3, #2
1a0051b4:	81a3      	strh	r3, [r4, #12]
1a0051b6:	e7e3      	b.n	1a005180 <__smakebuf_r+0xc>
1a0051b8:	4b0d      	ldr	r3, [pc, #52]	; (1a0051f0 <__smakebuf_r+0x7c>)
1a0051ba:	62b3      	str	r3, [r6, #40]	; 0x28
1a0051bc:	89a3      	ldrh	r3, [r4, #12]
1a0051be:	6020      	str	r0, [r4, #0]
1a0051c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0051c4:	81a3      	strh	r3, [r4, #12]
1a0051c6:	9b00      	ldr	r3, [sp, #0]
1a0051c8:	6163      	str	r3, [r4, #20]
1a0051ca:	9b01      	ldr	r3, [sp, #4]
1a0051cc:	6120      	str	r0, [r4, #16]
1a0051ce:	b15b      	cbz	r3, 1a0051e8 <__smakebuf_r+0x74>
1a0051d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0051d4:	4630      	mov	r0, r6
1a0051d6:	f7fb fed1 	bl	1a000f7c <_isatty_r>
1a0051da:	b128      	cbz	r0, 1a0051e8 <__smakebuf_r+0x74>
1a0051dc:	89a3      	ldrh	r3, [r4, #12]
1a0051de:	f023 0303 	bic.w	r3, r3, #3
1a0051e2:	f043 0301 	orr.w	r3, r3, #1
1a0051e6:	81a3      	strh	r3, [r4, #12]
1a0051e8:	89a3      	ldrh	r3, [r4, #12]
1a0051ea:	431d      	orrs	r5, r3
1a0051ec:	81a5      	strh	r5, [r4, #12]
1a0051ee:	e7cd      	b.n	1a00518c <__smakebuf_r+0x18>
1a0051f0:	1a004b51 	.word	0x1a004b51

1a0051f4 <__malloc_lock>:
1a0051f4:	4770      	bx	lr

1a0051f6 <__malloc_unlock>:
1a0051f6:	4770      	bx	lr
1a0051f8:	63696e49 	.word	0x63696e49
1a0051fc:	696c6169 	.word	0x696c6169
1a005200:	646e617a 	.word	0x646e617a
1a005204:	4a50206f 	.word	0x4a50206f
1a005208:	0d434143 	.word	0x0d434143
1a00520c:	00000000 	.word	0x00000000
1a005210:	6b736154 	.word	0x6b736154
1a005214:	65746e49 	.word	0x65746e49
1a005218:	70757272 	.word	0x70757272
1a00521c:	00000074 	.word	0x00000074
1a005220:	6b736154 	.word	0x6b736154
1a005224:	6f636e45 	.word	0x6f636e45
1a005228:	50726564 	.word	0x50726564
1a00522c:	6369736f 	.word	0x6369736f
1a005230:	006e6f69 	.word	0x006e6f69
1a005234:	6154796d 	.word	0x6154796d
1a005238:	614d6b73 	.word	0x614d6b73
1a00523c:	74656e67 	.word	0x74656e67
1a005240:	74656d6f 	.word	0x74656d6f
1a005244:	654c6f72 	.word	0x654c6f72
1a005248:	72757463 	.word	0x72757463
1a00524c:	00000061 	.word	0x00000061
1a005250:	6154796d 	.word	0x6154796d
1a005254:	61546b73 	.word	0x61546b73
1a005258:	73616572 	.word	0x73616572
1a00525c:	0064634c 	.word	0x0064634c
1a005260:	6154796d 	.word	0x6154796d
1a005264:	6e496b73 	.word	0x6e496b73
1a005268:	61696369 	.word	0x61696369
1a00526c:	64634c72 	.word	0x64634c72
1a005270:	00000000 	.word	0x00000000
1a005274:	6154796d 	.word	0x6154796d
1a005278:	6f4d6b73 	.word	0x6f4d6b73
1a00527c:	61727473 	.word	0x61727473
1a005280:	6c615672 	.word	0x6c615672
1a005284:	7365726f 	.word	0x7365726f
1a005288:	0064634c 	.word	0x0064634c
1a00528c:	534f5452 	.word	0x534f5452
1a005290:	50202d20 	.word	0x50202d20
1a005294:	4341434a 	.word	0x4341434a
1a005298:	003b2020 	.word	0x003b2020
1a00529c:	43203031 	.word	0x43203031
1a0052a0:	726f686f 	.word	0x726f686f
1a0052a4:	2d206574 	.word	0x2d206574
1a0052a8:	39313032 	.word	0x39313032
1a0052ac:	0000003b 	.word	0x0000003b
1a0052b0:	6f636e45 	.word	0x6f636e45
1a0052b4:	20726564 	.word	0x20726564
1a0052b8:	6e67614d 	.word	0x6e67614d
1a0052bc:	63697465 	.word	0x63697465
1a0052c0:	ff003b6f 	.word	0xff003b6f
1a0052c4:	3d207842 	.word	0x3d207842
1a0052c8:	00003b20 	.word	0x00003b20
1a0052cc:	3d207942 	.word	0x3d207942
1a0052d0:	00003b20 	.word	0x00003b20
1a0052d4:	3d207a42 	.word	0x3d207a42
1a0052d8:	00003b20 	.word	0x00003b20
1a0052dc:	6f636e65 	.word	0x6f636e65
1a0052e0:	20726564 	.word	0x20726564
1a0052e4:	003b203d 	.word	0x003b203d
1a0052e8:	454c4449 	.word	0x454c4449
1a0052ec:	ffffff00 	.word	0xffffff00
1a0052f0:	51726d54 	.word	0x51726d54
1a0052f4:	ffffff00 	.word	0xffffff00
1a0052f8:	20726d54 	.word	0x20726d54
1a0052fc:	00637653 	.word	0x00637653

1a005300 <ExtRateIn>:
1a005300:	00000000                                ....

1a005304 <GpioButtons>:
1a005304:	08000400 09010900                       ........

1a00530c <GpioLeds>:
1a00530c:	01050005 0e000205 0c010b01              ............

1a005318 <GpioPorts>:
1a005318:	03030003 0f050403 05031005 07030603     ................
1a005328:	ffff0802                                ....

1a00532c <OscRateIn>:
1a00532c:	00b71b00                                ....

1a005330 <InitClkStates>:
1a005330:	01010f01                                ....

1a005334 <pinmuxing>:
1a005334:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005344:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005354:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005364:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005374:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005384:	00d50301 00d50401 00160107 00560207     ..............V.
1a005394:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0053a4:	00570206                                ..W.

1a0053a8 <UART_BClock>:
1a0053a8:	01a201c2 01620182                       ......b.

1a0053b0 <UART_PClock>:
1a0053b0:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0053c0:	ffff00ff                                ....

1a0053c4 <periph_to_base>:
1a0053c4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0053d4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0053e4:	000100e0 01000100 01200003 00060120     .......... . ...
1a0053f4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005404:	01820013 00120182 01a201a2 01c20011     ................
1a005414:	001001c2 01e201e2 0202000f 000e0202     ................
1a005424:	02220222 0223000d 001c0223              "."...#.#...

1a005430 <InitClkStates>:
1a005430:	00010100 00010909 0001090a 01010701     ................
1a005440:	00010902 00010906 0101090c 0001090d     ................
1a005450:	0001090e 0001090f 00010910 00010911     ................
1a005460:	00010912 00010913 00011114 00011119     ................
1a005470:	0001111a 0001111b                       ........

1a005478 <lpcUarts>:
1a005478:	40081000 06020406 00180205 40081000     ...@...........@
1a005488:	09070509 00180706 40082000 00000000     ......... .@....
1a005498:	00190000 400c1000 07060107 001a0602     .......@........
1a0054a8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0054b8:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0054c8:	0072656d                                mer.

1a0054cc <gpioPinsInit>:
1a0054cc:	02000104 00050701 05010d03 04080100     ................
1a0054dc:	02020002 02000304 00000403 04070002     ................
1a0054ec:	030c0300 09050402 05040103 04030208     ................
1a0054fc:	04020305 06040504 0802000c 03000b06     ................
1a00550c:	00090607 07060503 060f0504 03030004     ................
1a00551c:	02000404 00050404 06040502 04060200     ................
1a00552c:	0c050408 05040a04 0003010e 14010a00     ................
1a00553c:	010f0000 0d000012 00001101 0010010c     ................
1a00554c:	07070300 000f0300 01000001 00000000     ................
1a00555c:	000a0600 08060603 06100504 04030005     ................
1a00556c:	03000106 04090400 04010d05 010b0000     ................
1a00557c:	0200000f 00000001 00010104 02010800     ................
1a00558c:	01090000 09010006 05040002 04010200     ................
1a00559c:	02020105 02020504 0e00000a 01000b02     ................
1a0055ac:	000c020b 00040c01 04000200 01020001     ................
1a0055bc:	02000204 00030402 03070302 070b0300     ................
1a0055cc:	0c030004 03000507 0006070d 01020e03     ................
1a0055dc:	04010504 06020006 02000504 00040405     ................
1a0055ec:	08040402 040c0504 0d050409 05040a04     ................
1a0055fc:	0005010e ffff0801                       ........

1a005604 <__sf_fake_stderr>:
	...

1a005624 <__sf_fake_stdin>:
	...

1a005644 <__sf_fake_stdout>:
	...

1a005664 <_global_impure_ptr>:
1a005664:	1000005c                                \...
